Return-Path: <linux-stm32-bounces@st-md-mailman.stormreply.com>
X-Original-To: lists+linux-stm32@lfdr.de
Delivered-To: lists+linux-stm32@lfdr.de
Received: from stm-ict-prod-mailman-01.stormreply.prv (st-md-mailman.stormreply.com [52.209.6.89])
	by mail.lfdr.de (Postfix) with ESMTPS id B951557028D
	for <lists+linux-stm32@lfdr.de>; Mon, 11 Jul 2022 14:39:47 +0200 (CEST)
Received: from ip-172-31-3-47.eu-west-1.compute.internal (localhost [127.0.0.1])
	by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTP id 7953DC640F0;
	Mon, 11 Jul 2022 12:39:47 +0000 (UTC)
Received: from mx0a-00128a01.pphosted.com (mx0a-00128a01.pphosted.com
 [148.163.135.77])
 (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTPS id 630CAC640EE
 for <linux-stm32@st-md-mailman.stormreply.com>;
 Mon, 11 Jul 2022 12:39:45 +0000 (UTC)
Received: from pps.filterd (m0167089.ppops.net [127.0.0.1])
 by mx0a-00128a01.pphosted.com (8.17.1.5/8.17.1.5) with ESMTP id 26BCAAML026688;
 Mon, 11 Jul 2022 08:38:51 -0400
Received: from nwd2mta3.analog.com ([137.71.173.56])
 by mx0a-00128a01.pphosted.com (PPS) with ESMTPS id 3h76k6bhxg-1
 (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NOT);
 Mon, 11 Jul 2022 08:38:50 -0400
Received: from ASHBMBX8.ad.analog.com (ASHBMBX8.ad.analog.com [10.64.17.5])
 by nwd2mta3.analog.com (8.14.7/8.14.7) with ESMTP id 26BCcnTF045697
 (version=TLSv1/SSLv3 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=FAIL); 
 Mon, 11 Jul 2022 08:38:49 -0400
Received: from ASHBCASHYB4.ad.analog.com (10.64.17.132) by
 ASHBMBX8.ad.analog.com (10.64.17.5) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.2.986.14; Mon, 11 Jul 2022 08:38:48 -0400
Received: from ASHBMBX9.ad.analog.com (10.64.17.10) by
 ASHBCASHYB4.ad.analog.com (10.64.17.132) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.2.986.14; Mon, 11 Jul 2022 08:38:48 -0400
Received: from zeus.spd.analog.com (10.66.68.11) by ashbmbx9.ad.analog.com
 (10.64.17.10) with Microsoft SMTP Server id 15.2.986.14 via Frontend
 Transport; Mon, 11 Jul 2022 08:38:48 -0400
Received: from nsa.ad.analog.com ([10.44.3.53])
 by zeus.spd.analog.com (8.15.1/8.15.1) with ESMTP id 26BCbVEA011687;
 Mon, 11 Jul 2022 08:38:36 -0400
From: =?UTF-8?q?Nuno=20S=C3=A1?= <nuno.sa@analog.com>
To: <linux-arm-msm@vger.kernel.org>, <openbmc@lists.ozlabs.org>,
 <linux-renesas-soc@vger.kernel.org>,
 <linux-mediatek@lists.infradead.org>, <linux-imx@nxp.com>,
 <linux-mips@vger.kernel.org>, Lad Prabhakar
 <prabhakar.mahadev-lad.rj@bp.renesas.com>,
 <linux-iio@vger.kernel.org>, <chrome-platform@lists.linux.dev>,
 <linux-arm-kernel@lists.infradead.org>,
 <linux-stm32@st-md-mailman.stormreply.com>
Date: Mon, 11 Jul 2022 14:38:25 +0200
Message-ID: <20220711123835.811358-6-nuno.sa@analog.com>
X-Mailer: git-send-email 2.37.0
In-Reply-To: <20220711123835.811358-1-nuno.sa@analog.com>
References: <20220711123835.811358-1-nuno.sa@analog.com>
MIME-Version: 1.0
X-ADIRuleOP-NewSCL: Rule Triggered
X-Proofpoint-ORIG-GUID: V3B74O8w0BGK3b7gC93xQ5skj89w0Qy-
X-Proofpoint-GUID: V3B74O8w0BGK3b7gC93xQ5skj89w0Qy-
X-Proofpoint-Virus-Version: vendor=baseguard
 engine=ICAP:2.0.205,Aquarius:18.0.883,Hydra:6.0.517,FMLib:17.11.122.1
 definitions=2022-07-11_18,2022-07-08_01,2022-06-22_01
X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0
 clxscore=1015 adultscore=0
 mlxlogscore=999 malwarescore=0 spamscore=0 impostorscore=0
 priorityscore=1501 suspectscore=0 mlxscore=0 lowpriorityscore=0
 bulkscore=0 phishscore=0 classifier=spam adjust=0 reason=mlx scancount=1
 engine=8.12.0-2206140000 definitions=main-2207110054
Cc: Alexandre Belloni <alexandre.belloni@bootlin.com>,
 Daniel Lezcano <daniel.lezcano@linaro.org>, Tomer Maimon <tmaimon77@gmail.com>,
 "Rafael J. Wysocki" <rafael@kernel.org>,
 Linus Walleij <linus.walleij@linaro.org>, Amit Kucheria <amitk@kernel.org>,
 Tali Perry <tali.perry1@gmail.com>, Paul Cercueil <paul@crapouillou.net>,
 Miquel Raynal <miquel.raynal@bootlin.com>, Guenter Roeck <groeck@chromium.org>,
 Fabio Estevam <festevam@gmail.com>, Lars-Peter Clausen <lars@metafoo.de>,
 Benjamin Fair <benjaminfair@google.com>,
 Jishnu Prakash <quic_jprakash@quicinc.com>, Haibo Chen <haibo.chen@nxp.com>,
 Nancy Yuen <yuenn@google.com>, Andy Shevchenko <andy.shevchenko@gmail.com>,
 Andy Gross <agross@kernel.org>, Zhang
 Rui <rui.zhang@intel.com>, Christophe Branchereau <cbranchereau@gmail.com>,
 Saravanan Sekar <sravanhome@gmail.com>,
 Michael Hennerich <Michael.Hennerich@analog.com>,
 Sascha Hauer <s.hauer@pengutronix.de>, Cai Huoqing <cai.huoqing@linux.dev>,
 Matthias
 Brugger <matthias.bgg@gmail.com>, Gwendal Grignou <gwendal@chromium.org>,
 Bjorn Andersson <bjorn.andersson@linaro.org>,
 Benson Leung <bleung@chromium.org>,
 Pengutronix Kernel Team <kernel@pengutronix.de>,
 Lorenzo Bianconi <lorenzo@kernel.org>, Avi Fishman <avifishman70@gmail.com>,
 Patrick Venture <venture@google.com>,
 Nicolas Ferre <nicolas.ferre@microchip.com>,
 Thara Gopinath <thara.gopinath@linaro.org>, Arnd
 Bergmann <arnd@arndb.de>, Maxime Coquelin <mcoquelin.stm32@gmail.com>, Eugen
 Hristev <eugen.hristev@microchip.com>, Shawn Guo <shawnguo@kernel.org>,
 Claudiu Beznea <claudiu.beznea@microchip.com>,
 Jonathan Cameron <jic23@kernel.org>
Subject: [Linux-stm32] [PATCH v2 05/15] iio: inkern: move to fwnode
	properties
X-BeenThere: linux-stm32@st-md-mailman.stormreply.com
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: <linux-stm32.st-md-mailman.stormreply.com>
List-Unsubscribe: <https://st-md-mailman.stormreply.com/mailman/options/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=unsubscribe>
List-Archive: <http://st-md-mailman.stormreply.com/pipermail/linux-stm32/>
List-Post: <mailto:linux-stm32@st-md-mailman.stormreply.com>
List-Help: <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=help>
List-Subscribe: <https://st-md-mailman.stormreply.com/mailman/listinfo/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: linux-stm32-bounces@st-md-mailman.stormreply.com
Sender: "Linux-stm32" <linux-stm32-bounces@st-md-mailman.stormreply.com>

VGhpcyBtb3ZlcyB0aGUgSUlPIGluIGtlcm5lbCBpbnRlcmZhY2UgdG8gdXNlIGZ3bm9kZSBwcm9w
ZXJ0aWVzIGFuZCB0aHVzCmJlIGZpcm13YXJlIGFnbm9zdGljLgoKTm90ZSB0aGF0IHRoZSBpbnRl
cmZhY2UgaXMgc3RpbGwgbm90IGZpcm13YXJlIGFnbm9zdGljLiBBdCB0aGlzIHBvaW50IHdlCmhh
dmUgYm90aCBPRiBhbmQgZndub2RlIGludGVyZmFjZXMgc28gdGhhdCB3ZSBkb24ndCBicmVhayBh
bnkgdXNlci4gT24KdG9wIG9mIHRoaXMgd2UgYWxzbyB3YW50IHRvIGhhdmUgYSBwZXIgZHJpdmVy
IGNvbnZlcnNpb24gYW5kIHRoYXQgaXMgdGhlCm1haW4gcmVhc29uIHdlIGhhdmUgYm90aCBvZl94
bGF0ZSgpIGFuZCBmd25vZGVfeGxhdGUoKSBzdXBwb3J0LgoKU2lnbmVkLW9mZi1ieTogTnVubyBT
w6EgPG51bm8uc2FAYW5hbG9nLmNvbT4KUmV2aWV3ZWQtYnk6IEFuZHkgU2hldmNoZW5rbyA8YW5k
eS5zaGV2Y2hlbmtvQGdtYWlsLmNvbT4KLS0tCiBkcml2ZXJzL2lpby9pbmtlcm4uYyAgICAgICAg
IHwgMTU5ICsrKysrKysrKysrKysrKysrKy0tLS0tLS0tLS0tLS0tLS0tCiBpbmNsdWRlL2xpbnV4
L2lpby9jb25zdW1lci5oIHwgIDM2ICsrKystLS0tCiBpbmNsdWRlL2xpbnV4L2lpby9paW8uaCAg
ICAgIHwgICA1ICsrCiAzIGZpbGVzIGNoYW5nZWQsIDEwOCBpbnNlcnRpb25zKCspLCA5MiBkZWxl
dGlvbnMoLSkKCmRpZmYgLS1naXQgYS9kcml2ZXJzL2lpby9pbmtlcm4uYyBiL2RyaXZlcnMvaWlv
L2lua2Vybi5jCmluZGV4IGY5N2I3OTY3ZDNkOS4uOTVlMDE1ZTg4NjQ1IDEwMDY0NAotLS0gYS9k
cml2ZXJzL2lpby9pbmtlcm4uYworKysgYi9kcml2ZXJzL2lpby9pbmtlcm4uYwpAQCAtNSw2ICs1
LDcgQEAKICAqLwogI2luY2x1ZGUgPGxpbnV4L2Vyci5oPgogI2luY2x1ZGUgPGxpbnV4L2V4cG9y
dC5oPgorI2luY2x1ZGUgPGxpbnV4L3Byb3BlcnR5Lmg+CiAjaW5jbHVkZSA8bGludXgvc2xhYi5o
PgogI2luY2x1ZGUgPGxpbnV4L211dGV4Lmg+CiAjaW5jbHVkZSA8bGludXgvb2YuaD4KQEAgLTEx
NywxNSArMTE4LDggQEAgc3RhdGljIGNvbnN0IHN0cnVjdCBpaW9fY2hhbl9zcGVjCiAJcmV0dXJu
IGNoYW47CiB9CiAKLSNpZmRlZiBDT05GSUdfT0YKLQotc3RhdGljIGludCBpaW9fZGV2X25vZGVf
bWF0Y2goc3RydWN0IGRldmljZSAqZGV2LCBjb25zdCB2b2lkICpkYXRhKQotewotCXJldHVybiBk
ZXYtPm9mX25vZGUgPT0gZGF0YSAmJiBkZXYtPnR5cGUgPT0gJmlpb19kZXZpY2VfdHlwZTsKLX0K
LQogLyoqCi0gKiBfX29mX2lpb19zaW1wbGVfeGxhdGUgLSB0cmFuc2xhdGUgaWlvc3BlYyB0byB0
aGUgSUlPIGNoYW5uZWwgaW5kZXgKKyAqIF9fZndub2RlX2lpb19zaW1wbGVfeGxhdGUgLSB0cmFu
c2xhdGUgaWlvc3BlYyB0byB0aGUgSUlPIGNoYW5uZWwgaW5kZXgKICAqIEBpbmRpb19kZXY6CXBv
aW50ZXIgdG8gdGhlIGlpb19kZXYgc3RydWN0dXJlCiAgKiBAaWlvc3BlYzoJSUlPIHNwZWNpZmll
ciBhcyBmb3VuZCBpbiB0aGUgZGV2aWNlIHRyZWUKICAqCkBAIC0xMzQsMTQgKzEyOCwxNCBAQCBz
dGF0aWMgaW50IGlpb19kZXZfbm9kZV9tYXRjaChzdHJ1Y3QgZGV2aWNlICpkZXYsIGNvbnN0IHZv
aWQgKmRhdGEpCiAgKiB3aGV0aGVyIElJTyBpbmRleCBpcyBsZXNzIHRoYW4gbnVtX2NoYW5uZWxz
ICh0aGF0IGlzIHNwZWNpZmllZCBpbiB0aGUKICAqIGlpb19kZXYpLgogICovCi1zdGF0aWMgaW50
IF9fb2ZfaWlvX3NpbXBsZV94bGF0ZShzdHJ1Y3QgaWlvX2RldiAqaW5kaW9fZGV2LAotCQkJCWNv
bnN0IHN0cnVjdCBvZl9waGFuZGxlX2FyZ3MgKmlpb3NwZWMpCitzdGF0aWMgaW50IF9fZndub2Rl
X2lpb19zaW1wbGVfeGxhdGUoc3RydWN0IGlpb19kZXYgKmluZGlvX2RldiwKKwkJCQkgICAgIGNv
bnN0IHN0cnVjdCBmd25vZGVfcmVmZXJlbmNlX2FyZ3MgKmlpb3NwZWMpCiB7Ci0JaWYgKCFpaW9z
cGVjLT5hcmdzX2NvdW50KQorCWlmICghaWlvc3BlYy0+bmFyZ3MpCiAJCXJldHVybiAwOwogCiAJ
aWYgKGlpb3NwZWMtPmFyZ3NbMF0gPj0gaW5kaW9fZGV2LT5udW1fY2hhbm5lbHMpIHsKLQkJZGV2
X2VycigmaW5kaW9fZGV2LT5kZXYsICJpbnZhbGlkIGNoYW5uZWwgaW5kZXggJXVcbiIsCisJCWRl
dl9lcnIoJmluZGlvX2Rldi0+ZGV2LCAiaW52YWxpZCBjaGFubmVsIGluZGV4ICVsbHVcbiIsCiAJ
CQlpaW9zcGVjLT5hcmdzWzBdKTsKIAkJcmV0dXJuIC1FSU5WQUw7CiAJfQpAQCAtMTQ5LDM0ICsx
NDMsNTUgQEAgc3RhdGljIGludCBfX29mX2lpb19zaW1wbGVfeGxhdGUoc3RydWN0IGlpb19kZXYg
KmluZGlvX2RldiwKIAlyZXR1cm4gaWlvc3BlYy0+YXJnc1swXTsKIH0KIAotc3RhdGljIGludCBf
X29mX2lpb19jaGFubmVsX2dldChzdHJ1Y3QgaWlvX2NoYW5uZWwgKmNoYW5uZWwsCi0JCQkJc3Ry
dWN0IGRldmljZV9ub2RlICpucCwgaW50IGluZGV4KQorLyoKKyAqIFNpbXBsZSBoZWxwZXIgdG8g
Y29weSBmd25vZGVfcmVmZXJlbmNlX2FyZ3MgaW50byBvZl9waGFuZGxlX2FyZ3Mgc28gd2UKKyAq
IGNhbiBwYXNzIGl0IHRvIG9mX3hsYXRlKCkuIFVsdGltYXRlIGdvYWwgaXMgdG8gZHJvcCB0aGlz
IHRvZ2V0aGVyIHdpdGgKKyAqIG9mX3hsYXRlKCkuCisgKi8KK3N0YXRpYyBpbnQgX19md25vZGVf
dG9fb2ZfeGxhdGUoc3RydWN0IGlpb19kZXYgKmluZGlvX2RldiwKKwkJCQljb25zdCBzdHJ1Y3Qg
Zndub2RlX3JlZmVyZW5jZV9hcmdzICppaW9zcGVjKQoreworCXN0cnVjdCBvZl9waGFuZGxlX2Fy
Z3Mgb2ZfYXJnczsKKwl1bnNpZ25lZCBpbnQgaTsKKworCW9mX2FyZ3MuYXJnc19jb3VudCA9IGlp
b3NwZWMtPm5hcmdzOworCW9mX2FyZ3MubnAgPSB0b19vZl9ub2RlKGlpb3NwZWMtPmZ3bm9kZSk7
CisKKwlmb3IgKGkgPSAwOyBpIDwgTUFYX1BIQU5ETEVfQVJHUzsgaSsrKQorCQlvZl9hcmdzLmFy
Z3NbaV0gPSBpIDwgaWlvc3BlYy0+bmFyZ3MgPyBpaW9zcGVjLT5hcmdzW2ldIDogMDsKKworCXJl
dHVybiBpbmRpb19kZXYtPmluZm8tPm9mX3hsYXRlKGluZGlvX2RldiwgJm9mX2FyZ3MpOworfQor
CitzdGF0aWMgaW50IF9fZndub2RlX2lpb19jaGFubmVsX2dldChzdHJ1Y3QgaWlvX2NoYW5uZWwg
KmNoYW5uZWwsCisJCQkJICAgIHN0cnVjdCBmd25vZGVfaGFuZGxlICpmd25vZGUsIGludCBpbmRl
eCkKIHsKKwlzdHJ1Y3QgZndub2RlX3JlZmVyZW5jZV9hcmdzIGlpb3NwZWM7CiAJc3RydWN0IGRl
dmljZSAqaWRldjsKIAlzdHJ1Y3QgaWlvX2RldiAqaW5kaW9fZGV2OwogCWludCBlcnI7Ci0Jc3Ry
dWN0IG9mX3BoYW5kbGVfYXJncyBpaW9zcGVjOwogCi0JZXJyID0gb2ZfcGFyc2VfcGhhbmRsZV93
aXRoX2FyZ3MobnAsICJpby1jaGFubmVscyIsCi0JCQkJCSAiI2lvLWNoYW5uZWwtY2VsbHMiLAot
CQkJCQkgaW5kZXgsICZpaW9zcGVjKTsKKwllcnIgPSBmd25vZGVfcHJvcGVydHlfZ2V0X3JlZmVy
ZW5jZV9hcmdzKGZ3bm9kZSwgImlvLWNoYW5uZWxzIiwKKwkJCQkJCSAiI2lvLWNoYW5uZWwtY2Vs
bHMiLCAwLAorCQkJCQkJIGluZGV4LCAmaWlvc3BlYyk7CiAJaWYgKGVycikKIAkJcmV0dXJuIGVy
cjsKIAotCWlkZXYgPSBidXNfZmluZF9kZXZpY2UoJmlpb19idXNfdHlwZSwgTlVMTCwgaWlvc3Bl
Yy5ucCwKLQkJCSAgICAgICBpaW9fZGV2X25vZGVfbWF0Y2gpOworCWlkZXYgPSBidXNfZmluZF9k
ZXZpY2VfYnlfZndub2RlKCZpaW9fYnVzX3R5cGUsIGlpb3NwZWMuZndub2RlKTsKIAlpZiAoaWRl
diA9PSBOVUxMKSB7Ci0JCW9mX25vZGVfcHV0KGlpb3NwZWMubnApOworCQlmd25vZGVfaGFuZGxl
X3B1dChpaW9zcGVjLmZ3bm9kZSk7CiAJCXJldHVybiAtRVBST0JFX0RFRkVSOwogCX0KIAogCWlu
ZGlvX2RldiA9IGRldl90b19paW9fZGV2KGlkZXYpOwogCWNoYW5uZWwtPmluZGlvX2RldiA9IGlu
ZGlvX2RldjsKIAlpZiAoaW5kaW9fZGV2LT5pbmZvLT5vZl94bGF0ZSkKLQkJaW5kZXggPSBpbmRp
b19kZXYtPmluZm8tPm9mX3hsYXRlKGluZGlvX2RldiwgJmlpb3NwZWMpOworCQlpbmRleCA9IF9f
Zndub2RlX3RvX29mX3hsYXRlKGluZGlvX2RldiwgJmlpb3NwZWMpOworCWVsc2UgaWYgKGluZGlv
X2Rldi0+aW5mby0+Zndub2RlX3hsYXRlKQorCQlpbmRleCA9IGluZGlvX2Rldi0+aW5mby0+Zndu
b2RlX3hsYXRlKGluZGlvX2RldiwgJmlpb3NwZWMpOwogCWVsc2UKLQkJaW5kZXggPSBfX29mX2lp
b19zaW1wbGVfeGxhdGUoaW5kaW9fZGV2LCAmaWlvc3BlYyk7Ci0Jb2Zfbm9kZV9wdXQoaWlvc3Bl
Yy5ucCk7CisJCWluZGV4ID0gX19md25vZGVfaWlvX3NpbXBsZV94bGF0ZShpbmRpb19kZXYsICZp
aW9zcGVjKTsKKwlmd25vZGVfaGFuZGxlX3B1dChpaW9zcGVjLmZ3bm9kZSk7CiAJaWYgKGluZGV4
IDwgMCkKIAkJZ290byBlcnJfcHV0OwogCWNoYW5uZWwtPmNoYW5uZWwgPSAmaW5kaW9fZGV2LT5j
aGFubmVsc1tpbmRleF07CkBAIC0xODgsNyArMjAzLDggQEAgc3RhdGljIGludCBfX29mX2lpb19j
aGFubmVsX2dldChzdHJ1Y3QgaWlvX2NoYW5uZWwgKmNoYW5uZWwsCiAJcmV0dXJuIGluZGV4Owog
fQogCi1zdGF0aWMgc3RydWN0IGlpb19jaGFubmVsICpvZl9paW9fY2hhbm5lbF9nZXQoc3RydWN0
IGRldmljZV9ub2RlICpucCwgaW50IGluZGV4KQorc3RhdGljIHN0cnVjdCBpaW9fY2hhbm5lbCAq
Zndub2RlX2lpb19jaGFubmVsX2dldChzdHJ1Y3QgZndub2RlX2hhbmRsZSAqZndub2RlLAorCQkJ
CQkJICBpbnQgaW5kZXgpCiB7CiAJc3RydWN0IGlpb19jaGFubmVsICpjaGFubmVsOwogCWludCBl
cnI7CkBAIC0yMDAsNyArMjE2LDcgQEAgc3RhdGljIHN0cnVjdCBpaW9fY2hhbm5lbCAqb2ZfaWlv
X2NoYW5uZWxfZ2V0KHN0cnVjdCBkZXZpY2Vfbm9kZSAqbnAsIGludCBpbmRleCkKIAlpZiAoY2hh
bm5lbCA9PSBOVUxMKQogCQlyZXR1cm4gRVJSX1BUUigtRU5PTUVNKTsKIAotCWVyciA9IF9fb2Zf
aWlvX2NoYW5uZWxfZ2V0KGNoYW5uZWwsIG5wLCBpbmRleCk7CisJZXJyID0gX19md25vZGVfaWlv
X2NoYW5uZWxfZ2V0KGNoYW5uZWwsIGZ3bm9kZSwgaW5kZXgpOwogCWlmIChlcnIpCiAJCWdvdG8g
ZXJyX2ZyZWVfY2hhbm5lbDsKIApAQCAtMjExLDggKzIyNyw4IEBAIHN0YXRpYyBzdHJ1Y3QgaWlv
X2NoYW5uZWwgKm9mX2lpb19jaGFubmVsX2dldChzdHJ1Y3QgZGV2aWNlX25vZGUgKm5wLCBpbnQg
aW5kZXgpCiAJcmV0dXJuIEVSUl9QVFIoZXJyKTsKIH0KIAotc3RydWN0IGlpb19jaGFubmVsICpf
X29mX2lpb19jaGFubmVsX2dldF9ieV9uYW1lKHN0cnVjdCBkZXZpY2Vfbm9kZSAqbnAsCi0JCQkJ
CQkgY29uc3QgY2hhciAqbmFtZSkKK3N0cnVjdCBpaW9fY2hhbm5lbCAqCitfX2Z3bm9kZV9paW9f
Y2hhbm5lbF9nZXRfYnlfbmFtZShzdHJ1Y3QgZndub2RlX2hhbmRsZSAqZndub2RlLCBjb25zdCBj
aGFyICpuYW1lKQogewogCXN0cnVjdCBpaW9fY2hhbm5lbCAqY2hhbjsKIAlpbnQgaW5kZXggPSAw
OwpAQCAtMjIwLDE5ICsyMzYsMjAgQEAgc3RydWN0IGlpb19jaGFubmVsICpfX29mX2lpb19jaGFu
bmVsX2dldF9ieV9uYW1lKHN0cnVjdCBkZXZpY2Vfbm9kZSAqbnAsCiAJLyoKIAkgKiBGb3IgbmFt
ZWQgaWlvIGNoYW5uZWxzLCBmaXJzdCBsb29rIHVwIHRoZSBuYW1lIGluIHRoZQogCSAqICJpby1j
aGFubmVsLW5hbWVzIiBwcm9wZXJ0eS4gIElmIGl0IGNhbm5vdCBiZSBmb3VuZCwgdGhlCi0JICog
aW5kZXggd2lsbCBiZSBhbiBlcnJvciBjb2RlLCBhbmQgb2ZfaWlvX2NoYW5uZWxfZ2V0KCkKKwkg
KiBpbmRleCB3aWxsIGJlIGFuIGVycm9yIGNvZGUsIGFuZCBmd25vZGVfaWlvX2NoYW5uZWxfZ2V0
KCkKIAkgKiB3aWxsIGZhaWwuCiAJICovCiAJaWYgKG5hbWUpCi0JCWluZGV4ID0gb2ZfcHJvcGVy
dHlfbWF0Y2hfc3RyaW5nKG5wLCAiaW8tY2hhbm5lbC1uYW1lcyIsIG5hbWUpOworCQlpbmRleCA9
IGZ3bm9kZV9wcm9wZXJ0eV9tYXRjaF9zdHJpbmcoZndub2RlLCAiaW8tY2hhbm5lbC1uYW1lcyIs
CisJCQkJCQkgICAgIG5hbWUpOwogCi0JY2hhbiA9IG9mX2lpb19jaGFubmVsX2dldChucCwgaW5k
ZXgpOworCWNoYW4gPSBmd25vZGVfaWlvX2NoYW5uZWxfZ2V0KGZ3bm9kZSwgaW5kZXgpOwogCWlm
ICghSVNfRVJSKGNoYW4pIHx8IFBUUl9FUlIoY2hhbikgPT0gLUVQUk9CRV9ERUZFUikKIAkJcmV0
dXJuIGNoYW47CiAJaWYgKG5hbWUpIHsKIAkJaWYgKGluZGV4ID49IDApIHsKLQkJCXByX2Vycigi
RVJST1I6IGNvdWxkIG5vdCBnZXQgSUlPIGNoYW5uZWwgJXBPRjolcyglaSlcbiIsCi0JCQkgICAg
ICAgbnAsIG5hbWUsIGluZGV4KTsKKwkJCXByX2VycigiRVJST1I6IGNvdWxkIG5vdCBnZXQgSUlP
IGNoYW5uZWwgJXBmdzolcyglaSlcbiIsCisJCQkgICAgICAgZndub2RlLCBuYW1lLCBpbmRleCk7
CiAJCQkvKgogCQkJICogSW4gdGhpcyBjYXNlLCB3ZSBmb3VuZCAnbmFtZScgaW4gJ2lvLWNoYW5u
ZWwtbmFtZXMnCiAJCQkgKiBidXQgc29tZWhvdyB3ZSBzdGlsbCBmYWlsIHNvIHRoYXQgd2Ugc2hv
dWxkIG5vdCBwcm9jZWVkCkBAIC0yNDIsMTYgKzI1OSwxNiBAQCBzdHJ1Y3QgaWlvX2NoYW5uZWwg
Kl9fb2ZfaWlvX2NoYW5uZWxfZ2V0X2J5X25hbWUoc3RydWN0IGRldmljZV9ub2RlICpucCwKIAkJ
CSAqLwogCQkJcmV0dXJuIEVSUl9QVFIoLUVJTlZBTCk7CiAJCX0KLQkJLyogSWYgaW5kZXggPCAw
LCB0aGVuIG9mX3BhcnNlX3BoYW5kbGVfd2l0aF9hcmdzKCkgZmFpbHMKLQkJICogd2l0aCAtRUlO
VkFMIHdoaWNoIGlzIGV4cGVjdGVkLiBXZSBzaG91bGQgbm90IHByb2NlZWQKLQkJICogaWYgd2Ug
Z2V0IGFueSBvdGhlciBlcnJvci4KKwkJLyogSWYgaW5kZXggPCAwLCB0aGVuIGZ3bm9kZV9wcm9w
ZXJ0eV9nZXRfcmVmZXJlbmNlX2FyZ3MoKSBmYWlscworCQkgKiB3aXRoIC1FSU5WQUwgb3IgLUVO
T0VOVCAoQUNQSSBjYXNlKSB3aGljaCBpcyBleHBlY3RlZC4gV2UKKwkJICogc2hvdWxkIG5vdCBw
cm9jZWVkIGlmIHdlIGdldCBhbnkgb3RoZXIgZXJyb3IuCiAJCSAqLwotCQlpZiAoUFRSX0VSUihj
aGFuKSAhPSAtRUlOVkFMKQorCQlpZiAoUFRSX0VSUihjaGFuKSAhPSAtRUlOVkFMICYmIFBUUl9F
UlIoY2hhbikgIT0gLUVOT0VOVCkKIAkJCXJldHVybiBjaGFuOwogCX0gZWxzZSBpZiAoUFRSX0VS
UihjaGFuKSAhPSAtRU5PRU5UKSB7CiAJCS8qCiAJCSAqIGlmICFuYW1lLCB0aGVuIHdlIHNob3Vs
ZCBvbmx5IHByb2NlZWQgdGhlIGxvb2t1cCBpZgotCQkgKiBvZl9wYXJzZV9waGFuZGxlX3dpdGhf
YXJncygpIHJldHVybnMgLUVOT0VOVC4KKwkJICogZndub2RlX3Byb3BlcnR5X2dldF9yZWZlcmVu
Y2VfYXJncygpIHJldHVybnMgLUVOT0VOVC4KIAkJICovCiAJCXJldHVybiBjaGFuOwogCX0KQEAg
LTI2MCwxMyArMjc3LDE0IEBAIHN0cnVjdCBpaW9fY2hhbm5lbCAqX19vZl9paW9fY2hhbm5lbF9n
ZXRfYnlfbmFtZShzdHJ1Y3QgZGV2aWNlX25vZGUgKm5wLAogCXJldHVybiBFUlJfUFRSKC1FTk9E
RVYpOwogfQogCi1zdHJ1Y3QgaWlvX2NoYW5uZWwgKm9mX2lpb19jaGFubmVsX2dldF9ieV9uYW1l
KHN0cnVjdCBkZXZpY2Vfbm9kZSAqbnAsCi0JCQkJCSAgICAgICBjb25zdCBjaGFyICpuYW1lKQor
c3RydWN0IGlpb19jaGFubmVsICpmd25vZGVfaWlvX2NoYW5uZWxfZ2V0X2J5X25hbWUoc3RydWN0
IGZ3bm9kZV9oYW5kbGUgKmZ3bm9kZSwKKwkJCQkJCSAgIGNvbnN0IGNoYXIgKm5hbWUpCiB7CisJ
c3RydWN0IGZ3bm9kZV9oYW5kbGUgKnBhcmVudDsKIAlzdHJ1Y3QgaWlvX2NoYW5uZWwgKmNoYW47
CiAKIAkvKiBXYWxrIHVwIHRoZSB0cmVlIG9mIGRldmljZXMgbG9va2luZyBmb3IgYSBtYXRjaGlu
ZyBpaW8gY2hhbm5lbCAqLwotCWNoYW4gPSBfX29mX2lpb19jaGFubmVsX2dldF9ieV9uYW1lKG5w
LCBuYW1lKTsKKwljaGFuID0gX19md25vZGVfaWlvX2NoYW5uZWxfZ2V0X2J5X25hbWUoZndub2Rl
LCBuYW1lKTsKIAlpZiAoIUlTX0VSUihjaGFuKSB8fCBQVFJfRVJSKGNoYW4pICE9IC1FTk9ERVYp
CiAJCXJldHVybiBjaGFuOwogCkBAIC0yNzUsMzUgKzI5MywzNCBAQCBzdHJ1Y3QgaWlvX2NoYW5u
ZWwgKm9mX2lpb19jaGFubmVsX2dldF9ieV9uYW1lKHN0cnVjdCBkZXZpY2Vfbm9kZSAqbnAsCiAJ
ICogSWYgdGhlIHBhcmVudCBub2RlIGhhcyBhICJpby1jaGFubmVsLXJhbmdlcyIgcHJvcGVydHks
CiAJICogdGhlbiB3ZSBjYW4gdHJ5IG9uZSBvZiBpdHMgY2hhbm5lbHMuCiAJICovCi0JbnAgPSBu
cC0+cGFyZW50OwotCXdoaWxlIChucCkgewotCQlpbnQgaW5kZXggPSAwOwotCi0JCWlmICghb2Zf
Z2V0X3Byb3BlcnR5KG5wLCAiaW8tY2hhbm5lbC1yYW5nZXMiLCBOVUxMKSkKKwlmd25vZGVfZm9y
X2VhY2hfcGFyZW50X25vZGUoZndub2RlLCBwYXJlbnQpIHsKKwkJaWYgKCFmd25vZGVfcHJvcGVy
dHlfcHJlc2VudChwYXJlbnQsICJpby1jaGFubmVsLXJhbmdlcyIpKSB7CisJCQlmd25vZGVfaGFu
ZGxlX3B1dChwYXJlbnQpOwogCQkJcmV0dXJuIEVSUl9QVFIoLUVOT0RFVik7CisJCX0KIAotCQlj
aGFuID0gX19vZl9paW9fY2hhbm5lbF9nZXRfYnlfbmFtZShucCwgbmFtZSk7Ci0JCWlmICghSVNf
RVJSKGNoYW4pIHx8IFBUUl9FUlIoY2hhbikgIT0gLUVOT0RFVikKKwkJY2hhbiA9IF9fZndub2Rl
X2lpb19jaGFubmVsX2dldF9ieV9uYW1lKGZ3bm9kZSwgbmFtZSk7CisJCWlmICghSVNfRVJSKGNo
YW4pIHx8IFBUUl9FUlIoY2hhbikgIT0gLUVOT0RFVikgeworCQkJZndub2RlX2hhbmRsZV9wdXQo
cGFyZW50KTsKIAkJCXJldHVybiBjaGFuOwotCi0JCW5wID0gbnAtPnBhcmVudDsKKwkJfQogCX0K
IAogCXJldHVybiBFUlJfUFRSKC1FTk9ERVYpOwogfQotRVhQT1JUX1NZTUJPTF9HUEwob2ZfaWlv
X2NoYW5uZWxfZ2V0X2J5X25hbWUpOworRVhQT1JUX1NZTUJPTF9HUEwoZndub2RlX2lpb19jaGFu
bmVsX2dldF9ieV9uYW1lKTsKIAotc3RhdGljIHN0cnVjdCBpaW9fY2hhbm5lbCAqb2ZfaWlvX2No
YW5uZWxfZ2V0X2FsbChzdHJ1Y3QgZGV2aWNlICpkZXYpCitzdGF0aWMgc3RydWN0IGlpb19jaGFu
bmVsICpmd25vZGVfaWlvX2NoYW5uZWxfZ2V0X2FsbChzdHJ1Y3QgZGV2aWNlICpkZXYpCiB7CisJ
c3RydWN0IGZ3bm9kZV9oYW5kbGUgKmZ3bm9kZSA9IGRldl9md25vZGUoZGV2KTsKIAlzdHJ1Y3Qg
aWlvX2NoYW5uZWwgKmNoYW5zOwogCWludCBpLCBtYXBpbmQsIG51bW1hcHMgPSAwOwogCWludCBy
ZXQ7CiAKIAlkbyB7Ci0JCXJldCA9IG9mX3BhcnNlX3BoYW5kbGVfd2l0aF9hcmdzKGRldi0+b2Zf
bm9kZSwKLQkJCQkJCSAiaW8tY2hhbm5lbHMiLAotCQkJCQkJICIjaW8tY2hhbm5lbC1jZWxscyIs
Ci0JCQkJCQkgbnVtbWFwcywgTlVMTCk7CisJCXJldCA9IGZ3bm9kZV9wcm9wZXJ0eV9nZXRfcmVm
ZXJlbmNlX2FyZ3MoZndub2RlLCAiaW8tY2hhbm5lbHMiLAorCQkJCQkJCSAiI2lvLWNoYW5uZWwt
Y2VsbHMiLCAwLAorCQkJCQkJCSBudW1tYXBzLCBOVUxMKTsKIAkJaWYgKHJldCA8IDApCiAJCQli
cmVhazsKIAl9IHdoaWxlICgrK251bW1hcHMpOwpAQCAtMzE2LDEwICszMzMsOSBAQCBzdGF0aWMg
c3RydWN0IGlpb19jaGFubmVsICpvZl9paW9fY2hhbm5lbF9nZXRfYWxsKHN0cnVjdCBkZXZpY2Ug
KmRldikKIAlpZiAoY2hhbnMgPT0gTlVMTCkKIAkJcmV0dXJuIEVSUl9QVFIoLUVOT01FTSk7CiAK
LQkvKiBTZWFyY2ggZm9yIE9GIG1hdGNoZXMgKi8KKwkvKiBTZWFyY2ggZm9yIEZXIG1hdGNoZXMg
Ki8KIAlmb3IgKG1hcGluZCA9IDA7IG1hcGluZCA8IG51bW1hcHM7IG1hcGluZCsrKSB7Ci0JCXJl
dCA9IF9fb2ZfaWlvX2NoYW5uZWxfZ2V0KCZjaGFuc1ttYXBpbmRdLCBkZXYtPm9mX25vZGUsCi0J
CQkJCSAgIG1hcGluZCk7CisJCXJldCA9IF9fZndub2RlX2lpb19jaGFubmVsX2dldCgmY2hhbnNb
bWFwaW5kXSwgZndub2RlLCBtYXBpbmQpOwogCQlpZiAocmV0KQogCQkJZ290byBlcnJvcl9mcmVl
X2NoYW5zOwogCX0KQEAgLTMzMiwxNSArMzQ4LDYgQEAgc3RhdGljIHN0cnVjdCBpaW9fY2hhbm5l
bCAqb2ZfaWlvX2NoYW5uZWxfZ2V0X2FsbChzdHJ1Y3QgZGV2aWNlICpkZXYpCiAJcmV0dXJuIEVS
Ul9QVFIocmV0KTsKIH0KIAotI2Vsc2UgLyogQ09ORklHX09GICovCi0KLXN0YXRpYyBpbmxpbmUg
c3RydWN0IGlpb19jaGFubmVsICpvZl9paW9fY2hhbm5lbF9nZXRfYWxsKHN0cnVjdCBkZXZpY2Ug
KmRldikKLXsKLQlyZXR1cm4gRVJSX1BUUigtRU5PREVWKTsKLX0KLQotI2VuZGlmIC8qIENPTkZJ
R19PRiAqLwotCiBzdGF0aWMgc3RydWN0IGlpb19jaGFubmVsICppaW9fY2hhbm5lbF9nZXRfc3lz
KGNvbnN0IGNoYXIgKm5hbWUsCiAJCQkJCSAgICAgICBjb25zdCBjaGFyICpjaGFubmVsX25hbWUp
CiB7CkBAIC00MDEsOCArNDA4LDggQEAgc3RydWN0IGlpb19jaGFubmVsICppaW9fY2hhbm5lbF9n
ZXQoc3RydWN0IGRldmljZSAqZGV2LAogCXN0cnVjdCBpaW9fY2hhbm5lbCAqY2hhbm5lbDsKIAog
CWlmIChkZXYpIHsKLQkJY2hhbm5lbCA9IG9mX2lpb19jaGFubmVsX2dldF9ieV9uYW1lKGRldi0+
b2Zfbm9kZSwKLQkJCQkJCSAgICAgY2hhbm5lbF9uYW1lKTsKKwkJY2hhbm5lbCA9IGZ3bm9kZV9p
aW9fY2hhbm5lbF9nZXRfYnlfbmFtZShkZXZfZndub2RlKGRldiksCisJCQkJCQkJIGNoYW5uZWxf
bmFtZSk7CiAJCWlmICghSVNfRVJSKGNoYW5uZWwpIHx8IFBUUl9FUlIoY2hhbm5lbCkgIT0gLUVO
T0RFVikKIAkJCXJldHVybiBjaGFubmVsOwogCX0KQEAgLTQ0MywxNCArNDUwLDE0IEBAIHN0cnVj
dCBpaW9fY2hhbm5lbCAqZGV2bV9paW9fY2hhbm5lbF9nZXQoc3RydWN0IGRldmljZSAqZGV2LAog
fQogRVhQT1JUX1NZTUJPTF9HUEwoZGV2bV9paW9fY2hhbm5lbF9nZXQpOwogCi1zdHJ1Y3QgaWlv
X2NoYW5uZWwgKmRldm1fb2ZfaWlvX2NoYW5uZWxfZ2V0X2J5X25hbWUoc3RydWN0IGRldmljZSAq
ZGV2LAotCQkJCQkJICAgIHN0cnVjdCBkZXZpY2Vfbm9kZSAqbnAsCi0JCQkJCQkgICAgY29uc3Qg
Y2hhciAqY2hhbm5lbF9uYW1lKQorc3RydWN0IGlpb19jaGFubmVsICpkZXZtX2Z3bm9kZV9paW9f
Y2hhbm5lbF9nZXRfYnlfbmFtZShzdHJ1Y3QgZGV2aWNlICpkZXYsCisJCQkJCQkJc3RydWN0IGZ3
bm9kZV9oYW5kbGUgKmZ3bm9kZSwKKwkJCQkJCQljb25zdCBjaGFyICpjaGFubmVsX25hbWUpCiB7
CiAJc3RydWN0IGlpb19jaGFubmVsICpjaGFubmVsOwogCWludCByZXQ7CiAKLQljaGFubmVsID0g
b2ZfaWlvX2NoYW5uZWxfZ2V0X2J5X25hbWUobnAsIGNoYW5uZWxfbmFtZSk7CisJY2hhbm5lbCA9
IGZ3bm9kZV9paW9fY2hhbm5lbF9nZXRfYnlfbmFtZShmd25vZGUsIGNoYW5uZWxfbmFtZSk7CiAJ
aWYgKElTX0VSUihjaGFubmVsKSkKIAkJcmV0dXJuIGNoYW5uZWw7CiAKQEAgLTQ2MCw3ICs0Njcs
NyBAQCBzdHJ1Y3QgaWlvX2NoYW5uZWwgKmRldm1fb2ZfaWlvX2NoYW5uZWxfZ2V0X2J5X25hbWUo
c3RydWN0IGRldmljZSAqZGV2LAogCiAJcmV0dXJuIGNoYW5uZWw7CiB9Ci1FWFBPUlRfU1lNQk9M
X0dQTChkZXZtX29mX2lpb19jaGFubmVsX2dldF9ieV9uYW1lKTsKK0VYUE9SVF9TWU1CT0xfR1BM
KGRldm1fZndub2RlX2lpb19jaGFubmVsX2dldF9ieV9uYW1lKTsKIAogc3RydWN0IGlpb19jaGFu
bmVsICppaW9fY2hhbm5lbF9nZXRfYWxsKHN0cnVjdCBkZXZpY2UgKmRldikKIHsKQEAgLTQ3NCw3
ICs0ODEsNyBAQCBzdHJ1Y3QgaWlvX2NoYW5uZWwgKmlpb19jaGFubmVsX2dldF9hbGwoc3RydWN0
IGRldmljZSAqZGV2KQogCWlmIChkZXYgPT0gTlVMTCkKIAkJcmV0dXJuIEVSUl9QVFIoLUVJTlZB
TCk7CiAKLQljaGFucyA9IG9mX2lpb19jaGFubmVsX2dldF9hbGwoZGV2KTsKKwljaGFucyA9IGZ3
bm9kZV9paW9fY2hhbm5lbF9nZXRfYWxsKGRldik7CiAJLyoKIAkgKiBXZSBvbmx5IHdhbnQgdG8g
Y2Fycnkgb24gaWYgdGhlIGVycm9yIGlzIC1FTk9ERVYuICBBbnl0aGluZyBlbHNlCiAJICogc2hv
dWxkIGJlIHJlcG9ydGVkIHVwIHRoZSBzdGFjay4KZGlmZiAtLWdpdCBhL2luY2x1ZGUvbGludXgv
aWlvL2NvbnN1bWVyLmggYi9pbmNsdWRlL2xpbnV4L2lpby9jb25zdW1lci5oCmluZGV4IDVmYTU5
NTc1ODZjZi4uMmFkYjEzMDZkYTNlIDEwMDY0NAotLS0gYS9pbmNsdWRlL2xpbnV4L2lpby9jb25z
dW1lci5oCisrKyBiL2luY2x1ZGUvbGludXgvaWlvL2NvbnN1bWVyLmgKQEAgLTcsNiArNyw3IEBA
CiAjaWZuZGVmIF9JSU9fSU5LRVJOX0NPTlNVTUVSX0hfCiAjZGVmaW5lIF9JSU9fSU5LRVJOX0NP
TlNVTUVSX0hfCiAKKyNpbmNsdWRlIDxsaW51eC9vZi5oPgogI2luY2x1ZGUgPGxpbnV4L3R5cGVz
Lmg+CiAjaW5jbHVkZSA8bGludXgvaWlvL3R5cGVzLmg+CiAKQEAgLTE0LDYgKzE1LDcgQEAgc3Ry
dWN0IGlpb19kZXY7CiBzdHJ1Y3QgaWlvX2NoYW5fc3BlYzsKIHN0cnVjdCBkZXZpY2U7CiBzdHJ1
Y3QgZGV2aWNlX25vZGU7CitzdHJ1Y3QgZndub2RlX2hhbmRsZTsKIAogLyoqCiAgKiBzdHJ1Y3Qg
aWlvX2NoYW5uZWwgLSBldmVyeXRoaW5nIG5lZWRlZCBmb3IgYSBjb25zdW1lciB0byB1c2UgYSBj
aGFubmVsCkBAIC05OSwyNiArMTAxLDIwIEBAIHZvaWQgaWlvX2NoYW5uZWxfcmVsZWFzZV9hbGwo
c3RydWN0IGlpb19jaGFubmVsICpjaGFuKTsKIHN0cnVjdCBpaW9fY2hhbm5lbCAqZGV2bV9paW9f
Y2hhbm5lbF9nZXRfYWxsKHN0cnVjdCBkZXZpY2UgKmRldik7CiAKIC8qKgotICogb2ZfaWlvX2No
YW5uZWxfZ2V0X2J5X25hbWUoKSAtIGdldCBkZXNjcmlwdGlvbiBvZiBhbGwgdGhhdCBpcyBuZWVk
ZWQgdG8gYWNjZXNzIGNoYW5uZWwuCi0gKiBAbnA6CQkJUG9pbnRlciB0byBjb25zdW1lciBkZXZp
Y2UgdHJlZSBub2RlCisgKiBmd25vZGVfaWlvX2NoYW5uZWxfZ2V0X2J5X25hbWUoKSAtIGdldCBk
ZXNjcmlwdGlvbiBvZiBhbGwgdGhhdCBpcyBuZWVkZWQgdG8gYWNjZXNzIGNoYW5uZWwuCisgKiBA
Zndub2RlOgkJUG9pbnRlciB0byBjb25zdW1lciBGaXJtd2FyZSBub2RlCiAgKiBAY29uc3VtZXJf
Y2hhbm5lbDoJVW5pcXVlIG5hbWUgdG8gaWRlbnRpZnkgdGhlIGNoYW5uZWwgb24gdGhlIGNvbnN1
bWVyCiAgKgkJCXNpZGUuIFRoaXMgdHlwaWNhbGx5IGRlc2NyaWJlcyB0aGUgY2hhbm5lbHMgdXNl
IHdpdGhpbgogICoJCQl0aGUgY29uc3VtZXIuIEUuZy4gJ2JhdHRlcnlfdm9sdGFnZScKICAqLwot
I2lmZGVmIENPTkZJR19PRgotc3RydWN0IGlpb19jaGFubmVsICpvZl9paW9fY2hhbm5lbF9nZXRf
YnlfbmFtZShzdHJ1Y3QgZGV2aWNlX25vZGUgKm5wLCBjb25zdCBjaGFyICpuYW1lKTsKLSNlbHNl
Ci1zdGF0aWMgaW5saW5lIHN0cnVjdCBpaW9fY2hhbm5lbCAqCi1vZl9paW9fY2hhbm5lbF9nZXRf
YnlfbmFtZShzdHJ1Y3QgZGV2aWNlX25vZGUgKm5wLCBjb25zdCBjaGFyICpuYW1lKQotewotCXJl
dHVybiBOVUxMOwotfQotI2VuZGlmCitzdHJ1Y3QgaWlvX2NoYW5uZWwgKmZ3bm9kZV9paW9fY2hh
bm5lbF9nZXRfYnlfbmFtZShzdHJ1Y3QgZndub2RlX2hhbmRsZSAqZndub2RlLAorCQkJCQkJICAg
Y29uc3QgY2hhciAqbmFtZSk7CiAKIC8qKgotICogZGV2bV9vZl9paW9fY2hhbm5lbF9nZXRfYnlf
bmFtZSgpIC0gUmVzb3VyY2UgbWFuYWdlZCB2ZXJzaW9uIG9mIG9mX2lpb19jaGFubmVsX2dldF9i
eV9uYW1lKCkuCisgKiBkZXZtX2Z3bm9kZV9paW9fY2hhbm5lbF9nZXRfYnlfbmFtZSgpIC0gUmVz
b3VyY2UgbWFuYWdlZCB2ZXJzaW9uIG9mCisgKgkJCQkJICAgZndub2RlX2lpb19jaGFubmVsX2dl
dF9ieV9uYW1lKCkuCiAgKiBAZGV2OgkJUG9pbnRlciB0byBjb25zdW1lciBkZXZpY2UuCi0gKiBA
bnA6CQkJUG9pbnRlciB0byBjb25zdW1lciBkZXZpY2UgdHJlZSBub2RlCisgKiBAZndub2RlOgkJ
UG9pbnRlciB0byBjb25zdW1lciBGaXJtd2FyZSBub2RlCiAgKiBAY29uc3VtZXJfY2hhbm5lbDoJ
VW5pcXVlIG5hbWUgdG8gaWRlbnRpZnkgdGhlIGNoYW5uZWwgb24gdGhlIGNvbnN1bWVyCiAgKgkJ
CXNpZGUuIFRoaXMgdHlwaWNhbGx5IGRlc2NyaWJlcyB0aGUgY2hhbm5lbHMgdXNlIHdpdGhpbgog
ICoJCQl0aGUgY29uc3VtZXIuIEUuZy4gJ2JhdHRlcnlfdm9sdGFnZScKQEAgLTEyOSw5ICsxMjUs
MTcgQEAgb2ZfaWlvX2NoYW5uZWxfZ2V0X2J5X25hbWUoc3RydWN0IGRldmljZV9ub2RlICpucCwg
Y29uc3QgY2hhciAqbmFtZSkKICAqIFRoZSBhbGxvY2F0ZWQgaWlvIGNoYW5uZWwgaXMgYXV0b21h
dGljYWxseSByZWxlYXNlZCB3aGVuIHRoZSBkZXZpY2UgaXMKICAqIHVuYm91bmQuCiAgKi8KLXN0
cnVjdCBpaW9fY2hhbm5lbCAqZGV2bV9vZl9paW9fY2hhbm5lbF9nZXRfYnlfbmFtZShzdHJ1Y3Qg
ZGV2aWNlICpkZXYsCi0JCQkJCQkgICAgc3RydWN0IGRldmljZV9ub2RlICpucCwKLQkJCQkJCSAg
ICBjb25zdCBjaGFyICpjb25zdW1lcl9jaGFubmVsKTsKK3N0cnVjdCBpaW9fY2hhbm5lbCAqZGV2
bV9md25vZGVfaWlvX2NoYW5uZWxfZ2V0X2J5X25hbWUoc3RydWN0IGRldmljZSAqZGV2LAorCQkJ
CQkJCXN0cnVjdCBmd25vZGVfaGFuZGxlICpmd25vZGUsCisJCQkJCQkJY29uc3QgY2hhciAqY29u
c3VtZXJfY2hhbm5lbCk7CisKK3N0YXRpYyBpbmxpbmUgc3RydWN0IGlpb19jaGFubmVsCisqZGV2
bV9vZl9paW9fY2hhbm5lbF9nZXRfYnlfbmFtZShzdHJ1Y3QgZGV2aWNlICpkZXYsIHN0cnVjdCBk
ZXZpY2Vfbm9kZSAqbnAsCisJCQkJIGNvbnN0IGNoYXIgKmNvbnN1bWVyX2NoYW5uZWwpCit7CisJ
cmV0dXJuIGRldm1fZndub2RlX2lpb19jaGFubmVsX2dldF9ieV9uYW1lKGRldiwgb2ZfZndub2Rl
X2hhbmRsZShucCksCisJCQkJCQkgICBjb25zdW1lcl9jaGFubmVsKTsKK30KIAogc3RydWN0IGlp
b19jYl9idWZmZXI7CiAvKioKZGlmZiAtLWdpdCBhL2luY2x1ZGUvbGludXgvaWlvL2lpby5oIGIv
aW5jbHVkZS9saW51eC9paW8vaWlvLmgKaW5kZXggZDliNGE5Y2E5YTBmLi40OTRhYmI2MzQwNmUg
MTAwNjQ0Ci0tLSBhL2luY2x1ZGUvbGludXgvaWlvL2lpby5oCisrKyBiL2luY2x1ZGUvbGludXgv
aWlvL2lpby5oCkBAIC0xOCw2ICsxOCw3IEBACiAgKi8KIAogc3RydWN0IG9mX3BoYW5kbGVfYXJn
czsKK3N0cnVjdCBmd25vZGVfcmVmZXJlbmNlX2FyZ3M7CiAKIGVudW0gaWlvX3NoYXJlZF9ieSB7
CiAJSUlPX1NFUEFSQVRFLApAQCAtNDI5LDYgKzQzMCw4IEBAIHN0cnVjdCBpaW9fdHJpZ2dlcjsg
LyogZm9yd2FyZCBkZWNsYXJhdGlvbiAqLwogICoJCQlwcm92aWRlIGEgY3VzdG9tIG9mX3hsYXRl
IGZ1bmN0aW9uIHRoYXQgcmVhZHMgdGhlCiAgKgkJCSphcmdzKiBhbmQgcmV0dXJucyB0aGUgYXBw
cm9wcmlhdGUgaW5kZXggaW4gcmVnaXN0ZXJlZAogICoJCQlJSU8gY2hhbm5lbHMgYXJyYXkuCisg
KiBAZndub2RlX3hsYXRlOglmd25vZGUgYmFzZWQgZnVuY3Rpb24gcG9pbnRlciB0byBvYnRhaW4g
Y2hhbm5lbCBzcGVjaWZpZXIgaW5kZXguCisgKgkJCUZ1bmN0aW9uYWxseSB0aGUgc2FtZSBhcyBA
b2ZfeGxhdGUuCiAgKiBAaHdmaWZvX3NldF93YXRlcm1hcms6IGZ1bmN0aW9uIHBvaW50ZXIgdG8g
c2V0IHRoZSBjdXJyZW50IGhhcmR3YXJlCiAgKgkJCWZpZm8gd2F0ZXJtYXJrIGxldmVsOyBzZWUg
aHdmaWZvXyogZW50cmllcyBpbgogICoJCQlEb2N1bWVudGF0aW9uL0FCSS90ZXN0aW5nL3N5c2Zz
LWJ1cy1paW8gZm9yIGRldGFpbHMgb24KQEAgLTUxMCw2ICs1MTMsOCBAQCBzdHJ1Y3QgaWlvX2lu
Zm8gewogCQkJCSAgdW5zaWduZWQgKnJlYWR2YWwpOwogCWludCAoKm9mX3hsYXRlKShzdHJ1Y3Qg
aWlvX2RldiAqaW5kaW9fZGV2LAogCQkJY29uc3Qgc3RydWN0IG9mX3BoYW5kbGVfYXJncyAqaWlv
c3BlYyk7CisJaW50ICgqZndub2RlX3hsYXRlKShzdHJ1Y3QgaWlvX2RldiAqaW5kaW9fZGV2LAor
CQkJICAgIGNvbnN0IHN0cnVjdCBmd25vZGVfcmVmZXJlbmNlX2FyZ3MgKmlpb3NwZWMpOwogCWlu
dCAoKmh3Zmlmb19zZXRfd2F0ZXJtYXJrKShzdHJ1Y3QgaWlvX2RldiAqaW5kaW9fZGV2LCB1bnNp
Z25lZCB2YWwpOwogCWludCAoKmh3Zmlmb19mbHVzaF90b19idWZmZXIpKHN0cnVjdCBpaW9fZGV2
ICppbmRpb19kZXYsCiAJCQkJICAgICAgdW5zaWduZWQgY291bnQpOwotLSAKMi4zNy4wCgpfX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpMaW51eC1zdG0zMiBt
YWlsaW5nIGxpc3QKTGludXgtc3RtMzJAc3QtbWQtbWFpbG1hbi5zdG9ybXJlcGx5LmNvbQpodHRw
czovL3N0LW1kLW1haWxtYW4uc3Rvcm1yZXBseS5jb20vbWFpbG1hbi9saXN0aW5mby9saW51eC1z
dG0zMgo=
