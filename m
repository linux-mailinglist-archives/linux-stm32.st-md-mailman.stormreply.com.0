Return-Path: <linux-stm32-bounces@st-md-mailman.stormreply.com>
X-Original-To: lists+linux-stm32@lfdr.de
Delivered-To: lists+linux-stm32@lfdr.de
Received: from stm-ict-prod-mailman-01.stormreply.prv (st-md-mailman.stormreply.com [52.209.6.89])
	by mail.lfdr.de (Postfix) with ESMTPS id 8CBA08A4940
	for <lists+linux-stm32@lfdr.de>; Mon, 15 Apr 2024 09:42:56 +0200 (CEST)
Received: from ip-172-31-3-47.eu-west-1.compute.internal (localhost [127.0.0.1])
	by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTP id 2B7A0C6B444;
	Mon, 15 Apr 2024 07:42:56 +0000 (UTC)
Received: from mx07-00178001.pphosted.com (mx07-00178001.pphosted.com
 [185.132.182.106])
 (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTPS id 2FC9DC6B444
 for <linux-stm32@st-md-mailman.stormreply.com>;
 Fri, 12 Apr 2024 12:55:54 +0000 (UTC)
Received: from pps.filterd (m0288072.ppops.net [127.0.0.1])
 by mx07-00178001.pphosted.com (8.17.1.24/8.17.1.24) with ESMTP id
 43CC06gB016590; Fri, 12 Apr 2024 14:55:29 +0200
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=foss.st.com; h=
 from:to:cc:subject:date:message-id:mime-version:content-type
 :content-transfer-encoding; s=selector1; bh=ImEAKOL+u2wUqsXeJmbU
 lbzaMkx4kY1fkNPpK5Jr5CA=; b=CIS2PZanF/LtMN0z8UJSZP1msQbUyffh8/pa
 QR/3qgS7UkftrkSZpzCD5YefR004+8eOaRU6D/HFTm+cFOUmP2cgFO5oCrRNi1sW
 rzQuuGrw7iRqs1Gz9ipZ9YKt1uNoRe6hi3BFzNxHvPuiCTmRnp5rrK4FhV6rTHZv
 RX2M4/1wxOWtUWam8mGePSK79w7mTK+g2lbnrfpjcul/Iou13Hroef9v8sbh5cZ6
 OQZSQ7/IT5V+ck5bAHHRDxzH+z3enaE1JEA+fkq2R9Q4qmLb3kTC8ASfH3iVy9nc
 W3nmqzNcoCsdEbPOY6cSJoW8+DZGgxcYLvV9qmy1EkMWh2fHtg==
Received: from beta.dmz-ap.st.com (beta.dmz-ap.st.com [138.198.100.35])
 by mx07-00178001.pphosted.com (PPS) with ESMTPS id 3xautga20n-1
 (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NOT);
 Fri, 12 Apr 2024 14:55:29 +0200 (MEST)
Received: from euls16034.sgp.st.com (euls16034.sgp.st.com [10.75.44.20])
 by beta.dmz-ap.st.com (STMicroelectronics) with ESMTP id 0162740045;
 Fri, 12 Apr 2024 14:55:23 +0200 (CEST)
Received: from Webmail-eu.st.com (shfdag1node3.st.com [10.75.129.71])
 by euls16034.sgp.st.com (STMicroelectronics) with ESMTP id A382D215BE3;
 Fri, 12 Apr 2024 14:54:42 +0200 (CEST)
Received: from localhost (10.48.86.103) by SHFDAG1NODE3.st.com (10.75.129.71)
 with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id 15.1.2507.27; Fri, 12 Apr
 2024 14:54:42 +0200
From: Maxime MERE <maxime.mere@foss.st.com>
To: Herbert Xu <herbert@gondor.apana.org.au>, "David S . Miller"
 <davem@davemloft.net>, Maxime Coquelin <mcoquelin.stm32@gmail.com>,
 Alexandre Torgue <alexandre.torgue@foss.st.com>
Date: Fri, 12 Apr 2024 14:45:45 +0200
Message-ID: <20240412124545.2704487-1-maxime.mere@foss.st.com>
X-Mailer: git-send-email 2.25.1
MIME-Version: 1.0
X-Originating-IP: [10.48.86.103]
X-ClientProxiedBy: EQNCAS1NODE4.st.com (10.75.129.82) To SHFDAG1NODE3.st.com
 (10.75.129.71)
X-Proofpoint-Virus-Version: vendor=baseguard
 engine=ICAP:2.0.293,Aquarius:18.0.1011,Hydra:6.0.619,FMLib:17.11.176.26
 definitions=2024-04-12_09,2024-04-09_01,2023-05-22_02
X-Mailman-Approved-At: Mon, 15 Apr 2024 07:42:55 +0000
Cc: Rob Herring <robh@kernel.org>, Eric Biggers <ebiggers@google.com>,
 linux-kernel@vger.kernel.org, linux-crypto@vger.kernel.org,
 =?UTF-8?q?Uwe=20Kleine-K=C3=B6nig?= <u.kleine-koenig@pengutronix.de>,
 =?UTF-8?q?Maxime=20M=C3=A9r=C3=A9?= <maxime.mere@foss.st.com>,
 linux-stm32@st-md-mailman.stormreply.com, linux-arm-kernel@lists.infradead.org
Subject: [Linux-stm32] [PATCH] crypto: stm32/hash - add full DMA support for
	stm32mpx
X-BeenThere: linux-stm32@st-md-mailman.stormreply.com
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: <linux-stm32.st-md-mailman.stormreply.com>
List-Unsubscribe: <https://st-md-mailman.stormreply.com/mailman/options/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=unsubscribe>
List-Archive: <http://st-md-mailman.stormreply.com/pipermail/linux-stm32/>
List-Post: <mailto:linux-stm32@st-md-mailman.stormreply.com>
List-Help: <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=help>
List-Subscribe: <https://st-md-mailman.stormreply.com/mailman/listinfo/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: linux-stm32-bounces@st-md-mailman.stormreply.com
Sender: "Linux-stm32" <linux-stm32-bounces@st-md-mailman.stormreply.com>

RnJvbTogTWF4aW1lIE3DqXLDqSA8bWF4aW1lLm1lcmVAZm9zcy5zdC5jb20+CgpEdWUgdG8gYSBs
YWNrIG9mIGFsaWdubWVudCBpbiB0aGUgZGF0YSBzZW50IGJ5IHJlcXVlc3RzLCB0aGUgYWN0dWFs
IERNQQpzdXBwb3J0IG9mIHRoZSBTVE0zMiBoYXNoIGRyaXZlciBpcyBvbmx5IHdvcmtpbmcgd2l0
aCBkaWdlc3QgY2FsbHMuClRoaXMgcGF0Y2gsIGJhc2VkIG9uIHRoZSBhbGdvcml0aG0gdXNlZCBp
biB0aGUgZHJpdmVyIG9tYXAtc2hhbS5jLAphbGxvd3MgZm9yIHRoZSB1c2FnZSBvZiBETUEgaW4g
YW55IHNpdHVhdGlvbi4KCkl0IGhhcyBiZWVuIGZ1bmN0aW9uYWxseSB0ZXN0ZWQgb24gU1RNMzJN
UDE1LCBTVE0zMk1QMTMgYW5kIFNUTTMyTVAyNS4KCkJ5IGNoZWNraW5nIHRoZSBwZXJmb3JtYW5j
ZSBvZiB0aGlzIG5ldyBkcml2ZXIgd2l0aCBPcGVuU1NMLCB0aGUKZm9sbG93aW5nIHJlc3VsdHMg
d2VyZSBmb3VuZDoKClBlcmZvcm1hbmNlOgoKKGRhdGFzaXplOiA0MDk2LCBudW1iZXIgb2YgaGFz
aGVzIHBlcmZvcm1lZCBpbiAxMHMpCgp8dHlwZSAgIHxubyBETUEgICAgfERNQSBzdXBwb3J0fHNv
ZnR3YXJlICB8CnwtLS0tLS0tfC0tLS0tLS0tLS18LS0tLS0tLS0tLS18LS0tLS0tLS0tLXwKfG1k
NSAgICB8MTM4NzMuNTZrIHwxMDk1OC4wM2sgIHw3MTE2My4wOGsgfAp8c2hhMSAgIHwxMzc5Ni4x
NWsgfDEwNzI5LjQ3ayAgfDM5NjcwLjU4ayB8CnxzaGEyMjQgfDEzNzM3Ljk4ayB8MTA3NzUuNzZr
ICB8MjIwOTQuNjRrIHwKfHNoYTI1NiB8MTM2NTUuNjVrIHwxMDg3Mi4wMWsgIHwyMjA3NS4zOWsg
fAoKQ1BVIFVzYWdlOgoKKGFsZ29yaXRobSB1c2VkOiBzaGEyNTYsIGNvbXB1dGF0aW9uIHRpbWU6
IDIwcywgbWVhc3VyZW1lbnQgdGFrZW4gYXQKfjEwcykKCnxkYXRhc2l6ZSAgfG5vIERNQSB8RE1B
ICB8IHNvZnR3YXJlIHwKfC0tLS0tLS0tLS18LS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tfAp8ICAy
MDQ4ICAgIHwgNTYlICAgfCA0OSUgfCA1MCUgICAgICB8CnwgIDQwOTYgICAgfCA1NCUgICB8IDQ2
JSB8IDUwJSAgICAgIHwKfCAgODE5MiAgICB8IDUzJSAgIHwgNDAlIHwgNTAlICAgICAgfAp8IDE2
Mzg0ICAgIHwgNTMlICAgfCAzMyUgfCA1MCUgICAgICB8CgpOb3RlOiB0aGlzIHVwZGF0ZSBkb2Vz
bid0IGNoYW5nZSB0aGUgZHJpdmVyIHBlcmZvcm1hbmNlIHdpdGhvdXQgRE1BLgoKQXMgc2hvd24s
IHBlcmZvcm1hbmNlIHdpdGggRE1BIGlzIHNsaWdodGx5IGxvd2VyIHRoYW4gd2l0aG91dCwgYnV0
IGluCm1vc3QgY2FzZXMsIGl0IHdpbGwgc2F2ZSBDUFUgdGltZS4KClNpZ25lZC1vZmYtYnk6IE1h
eGltZSBNw6lyw6kgPG1heGltZS5tZXJlQGZvc3Muc3QuY29tPgotLS0KIGRyaXZlcnMvY3J5cHRv
L3N0bTMyL3N0bTMyLWhhc2guYyB8IDU3MCArKysrKysrKysrKysrKysrKysrKysrKy0tLS0tLS0K
IDEgZmlsZSBjaGFuZ2VkLCA0NDggaW5zZXJ0aW9ucygrKSwgMTIyIGRlbGV0aW9ucygtKQoKZGlm
ZiAtLWdpdCBhL2RyaXZlcnMvY3J5cHRvL3N0bTMyL3N0bTMyLWhhc2guYyBiL2RyaXZlcnMvY3J5
cHRvL3N0bTMyL3N0bTMyLWhhc2guYwppbmRleCAyYjIzODJkNDMzMmMuLmJhY2UyYmFlZmFmMyAx
MDA2NDQKLS0tIGEvZHJpdmVycy9jcnlwdG8vc3RtMzIvc3RtMzItaGFzaC5jCisrKyBiL2RyaXZl
cnMvY3J5cHRvL3N0bTMyL3N0bTMyLWhhc2guYwpAQCAtOTQsNiArOTQsNyBAQAogI2RlZmluZSBI
QVNIX0ZMQUdTX0VSUk9SUwkJQklUKDIxKQogI2RlZmluZSBIQVNIX0ZMQUdTX0VNUFRZCQlCSVQo
MjIpCiAjZGVmaW5lIEhBU0hfRkxBR1NfSE1BQwkJCUJJVCgyMykKKyNkZWZpbmUgSEFTSF9GTEFH
U19TR1NfQ09QSUVECQlCSVQoMjQpCiAKICNkZWZpbmUgSEFTSF9PUF9VUERBVEUJCQkxCiAjZGVm
aW5lIEhBU0hfT1BfRklOQUwJCQkyCkBAIC0xNDUsNyArMTQ2LDcgQEAgc3RydWN0IHN0bTMyX2hh
c2hfc3RhdGUgewogCXUxNgkJCWJ1ZmNudDsKIAl1MTYJCQlibG9ja2xlbjsKIAotCXU4IGJ1ZmZl
cltIQVNIX0JVRkxFTl0gX19hbGlnbmVkKDQpOworCXU4IGJ1ZmZlcltIQVNIX0JVRkxFTl0gX19h
bGlnbmVkKHNpemVvZih1MzIpKTsKIAogCS8qIGhhc2ggc3RhdGUgKi8KIAl1MzIJCQlod19jb250
ZXh0WzMgKyBIQVNIX0NTUl9OQl9NQVhdOwpAQCAtMTU4LDggKzE1OSw4IEBAIHN0cnVjdCBzdG0z
Ml9oYXNoX3JlcXVlc3RfY3R4IHsKIAl1OCBkaWdlc3RbU0hBNTEyX0RJR0VTVF9TSVpFXSBfX2Fs
aWduZWQoc2l6ZW9mKHUzMikpOwogCXNpemVfdAkJCWRpZ2NudDsKIAotCS8qIERNQSAqLwogCXN0
cnVjdCBzY2F0dGVybGlzdAkqc2c7CisJc3RydWN0IHNjYXR0ZXJsaXN0CXNnbFsyXTsgLyogc2Nh
dHRlcmxpc3QgdXNlZCB0byByZWFsaXplIGFsaWdubWVudCAqLwogCXVuc2lnbmVkIGludAkJb2Zm
c2V0OwogCXVuc2lnbmVkIGludAkJdG90YWw7CiAJc3RydWN0IHNjYXR0ZXJsaXN0CXNnX2tleTsK
QEAgLTE4NCw2ICsxODUsNyBAQCBzdHJ1Y3Qgc3RtMzJfaGFzaF9wZGF0YSB7CiAJc2l6ZV90CQkJ
CQlhbGdzX2luZm9fc2l6ZTsKIAlib29sCQkJCQloYXNfc3I7CiAJYm9vbAkJCQkJaGFzX21kbWF0
OworCWJvb2wJCQkJCWNvbnRleHRfc2VjdXJlZDsKIAlib29sCQkJCQlicm9rZW5fZW1wdHltc2c7
CiAJYm9vbAkJCQkJdXg1MDA7CiB9OwpAQCAtMTk1LDYgKzE5Nyw3IEBAIHN0cnVjdCBzdG0zMl9o
YXNoX2RldiB7CiAJc3RydWN0IHJlc2V0X2NvbnRyb2wJKnJzdDsKIAl2b2lkIF9faW9tZW0JCSpp
b19iYXNlOwogCXBoeXNfYWRkcl90CQlwaHlzX2Jhc2U7CisJdTgJCQl4bWl0X2J1ZltIQVNIX0JV
RkxFTl0gX19hbGlnbmVkKHNpemVvZih1MzIpKTsKIAl1MzIJCQlkbWFfbW9kZTsKIAlib29sCQkJ
cG9sbGVkOwogCkBAIC0yMjAsNiArMjIzLDggQEAgc3RhdGljIHN0cnVjdCBzdG0zMl9oYXNoX2Ry
diBzdG0zMl9oYXNoID0gewogfTsKIAogc3RhdGljIHZvaWQgc3RtMzJfaGFzaF9kbWFfY2FsbGJh
Y2sodm9pZCAqcGFyYW0pOworc3RhdGljIGludCBzdG0zMl9oYXNoX3ByZXBhcmVfcmVxdWVzdChz
dHJ1Y3QgYWhhc2hfcmVxdWVzdCAqcmVxKTsKK3N0YXRpYyB2b2lkIHN0bTMyX2hhc2hfdW5wcmVw
YXJlX3JlcXVlc3Qoc3RydWN0IGFoYXNoX3JlcXVlc3QgKnJlcSk7CiAKIHN0YXRpYyBpbmxpbmUg
dTMyIHN0bTMyX2hhc2hfcmVhZChzdHJ1Y3Qgc3RtMzJfaGFzaF9kZXYgKmhkZXYsIHUzMiBvZmZz
ZXQpCiB7CkBAIC0yMzIsNiArMjM3LDExIEBAIHN0YXRpYyBpbmxpbmUgdm9pZCBzdG0zMl9oYXNo
X3dyaXRlKHN0cnVjdCBzdG0zMl9oYXNoX2RldiAqaGRldiwKIAl3cml0ZWxfcmVsYXhlZCh2YWx1
ZSwgaGRldi0+aW9fYmFzZSArIG9mZnNldCk7CiB9CiAKKy8qKgorICogc3RtMzJfaGFzaF93YWl0
X2J1c3kgLSB3YWl0IHVudGlsIGhhc2ggcHJvY2Vzc29yIGlzIGF2YWlsYWJsZS4gSXQgcmV0dXJu
IGFuCisgKiBlcnJvciBpZiB0aGUgaGFzaCBjb3JlIGlzIHByb2Nlc3NpbmcgYSBibG9jayBvZiBk
YXRhIGZvciBtb3JlIHRoYW4gMTAgbXMuCisgKiBAaGRldjogdGhlIHN0bTMyX2hhc2hfZGV2IGRl
dmljZS4KKyAqLwogc3RhdGljIGlubGluZSBpbnQgc3RtMzJfaGFzaF93YWl0X2J1c3koc3RydWN0
IHN0bTMyX2hhc2hfZGV2ICpoZGV2KQogewogCXUzMiBzdGF0dXM7CkBAIC0yNDUsNiArMjU1LDEx
IEBAIHN0YXRpYyBpbmxpbmUgaW50IHN0bTMyX2hhc2hfd2FpdF9idXN5KHN0cnVjdCBzdG0zMl9o
YXNoX2RldiAqaGRldikKIAkJCQkgICAhKHN0YXR1cyAmIEhBU0hfU1JfQlVTWSksIDEwLCAxMDAw
MCk7CiB9CiAKKy8qKgorICogc3RtMzJfaGFzaF9zZXRfbmJsdyAtIHNldCB0aGUgbnVtYmVyIG9m
IHZhbGlkIGJ5dGVzIGluIHRoZSBsYXN0IHdvcmQuCisgKiBAaGRldjogdGhlIHN0bTMyX2hhc2hf
ZGV2IGRldmljZS4KKyAqIEBsZW5ndGg6IHRoZSBsZW5ndGggb2YgdGhlIGZpbmFsIHdvcmQuCisg
Ki8KIHN0YXRpYyB2b2lkIHN0bTMyX2hhc2hfc2V0X25ibHcoc3RydWN0IHN0bTMyX2hhc2hfZGV2
ICpoZGV2LCBpbnQgbGVuZ3RoKQogewogCXUzMiByZWc7CkBAIC0yODIsNiArMjk3LDExIEBAIHN0
YXRpYyBpbnQgc3RtMzJfaGFzaF93cml0ZV9rZXkoc3RydWN0IHN0bTMyX2hhc2hfZGV2ICpoZGV2
KQogCXJldHVybiAwOwogfQogCisvKioKKyAqIHN0bTMyX2hhc2hfd3JpdGVfY3RybCAtIEluaXRp
YWxpemUgdGhlIGhhc2ggcHJvY2Vzc29yLCBvbmx5IGlmCisgKiBIQVNIX0ZMQUdTX0lOSVQgaXMg
c2V0LgorICogQGhkZXY6IHRoZSBzdG0zMl9oYXNoX2RldiBkZXZpY2UKKyAqLwogc3RhdGljIHZv
aWQgc3RtMzJfaGFzaF93cml0ZV9jdHJsKHN0cnVjdCBzdG0zMl9oYXNoX2RldiAqaGRldikKIHsK
IAlzdHJ1Y3Qgc3RtMzJfaGFzaF9yZXF1ZXN0X2N0eCAqcmN0eCA9IGFoYXNoX3JlcXVlc3RfY3R4
KGhkZXYtPnJlcSk7CkBAIC00NjksOSArNDg5LDcgQEAgc3RhdGljIGludCBzdG0zMl9oYXNoX3Vw
ZGF0ZV9jcHUoc3RydWN0IHN0bTMyX2hhc2hfZGV2ICpoZGV2KQogewogCXN0cnVjdCBzdG0zMl9o
YXNoX3JlcXVlc3RfY3R4ICpyY3R4ID0gYWhhc2hfcmVxdWVzdF9jdHgoaGRldi0+cmVxKTsKIAlz
dHJ1Y3Qgc3RtMzJfaGFzaF9zdGF0ZSAqc3RhdGUgPSAmcmN0eC0+c3RhdGU7Ci0JdTMyICpwcmVn
ID0gc3RhdGUtPmh3X2NvbnRleHQ7CiAJaW50IGJ1ZmNudCwgZXJyID0gMCwgZmluYWw7Ci0JaW50
IGksIHN3YXBfcmVnOwogCiAJZGV2X2RiZyhoZGV2LT5kZXYsICIlcyBmbGFncyAleFxuIiwgX19m
dW5jX18sIHN0YXRlLT5mbGFncyk7CiAKQEAgLTQ5NSwzNCArNTEzLDIzIEBAIHN0YXRpYyBpbnQg
c3RtMzJfaGFzaF91cGRhdGVfY3B1KHN0cnVjdCBzdG0zMl9oYXNoX2RldiAqaGRldikKIAkJcmV0
dXJuIHN0bTMyX2hhc2hfeG1pdF9jcHUoaGRldiwgc3RhdGUtPmJ1ZmZlciwgYnVmY250LCAxKTsK
IAl9CiAKLQlpZiAoIShoZGV2LT5mbGFncyAmIEhBU0hfRkxBR1NfSU5JVCkpCi0JCXJldHVybiAw
OwotCi0JaWYgKHN0bTMyX2hhc2hfd2FpdF9idXN5KGhkZXYpKQotCQlyZXR1cm4gLUVUSU1FRE9V
VDsKLQotCXN3YXBfcmVnID0gaGFzaF9zd2FwX3JlZyhyY3R4KTsKLQotCWlmICghaGRldi0+cGRh
dGEtPnV4NTAwKQotCQkqcHJlZysrID0gc3RtMzJfaGFzaF9yZWFkKGhkZXYsIEhBU0hfSU1SKTsK
LQkqcHJlZysrID0gc3RtMzJfaGFzaF9yZWFkKGhkZXYsIEhBU0hfU1RSKTsKLQkqcHJlZysrID0g
c3RtMzJfaGFzaF9yZWFkKGhkZXYsIEhBU0hfQ1IpOwotCWZvciAoaSA9IDA7IGkgPCBzd2FwX3Jl
ZzsgaSsrKQotCQkqcHJlZysrID0gc3RtMzJfaGFzaF9yZWFkKGhkZXYsIEhBU0hfQ1NSKGkpKTsK
LQotCXN0YXRlLT5mbGFncyB8PSBIQVNIX0ZMQUdTX0lOSVQ7Ci0KIAlyZXR1cm4gZXJyOwogfQog
CiBzdGF0aWMgaW50IHN0bTMyX2hhc2hfeG1pdF9kbWEoc3RydWN0IHN0bTMyX2hhc2hfZGV2ICpo
ZGV2LAotCQkJICAgICAgIHN0cnVjdCBzY2F0dGVybGlzdCAqc2csIGludCBsZW5ndGgsIGludCBt
ZG1hKQorCQkJICAgICAgIHN0cnVjdCBzY2F0dGVybGlzdCAqc2csIGludCBsZW5ndGgsIGludCBt
ZG1hdCkKIHsKIAlzdHJ1Y3QgZG1hX2FzeW5jX3R4X2Rlc2NyaXB0b3IgKmluX2Rlc2M7CiAJZG1h
X2Nvb2tpZV90IGNvb2tpZTsKIAl1MzIgcmVnOwogCWludCBlcnI7CiAKKwlkZXZfZGJnKGhkZXYt
PmRldiwgIiVzIG1kbWF0OiAleCBsZW5ndGg6ICVkXG4iLCBfX2Z1bmNfXywgbWRtYXQsIGxlbmd0
aCk7CisKKwkvKiBkbyBub3QgdXNlIGRtYSBpZiB0aGVyZSBpcyBubyBkYXRhIHRvIHNlbmQgKi8K
KwlpZiAobGVuZ3RoIDw9IDApCisJCXJldHVybiAwOworCiAJaW5fZGVzYyA9IGRtYWVuZ2luZV9w
cmVwX3NsYXZlX3NnKGhkZXYtPmRtYV9sY2gsIHNnLCAxLAogCQkJCQkgIERNQV9NRU1fVE9fREVW
LCBETUFfUFJFUF9JTlRFUlJVUFQgfAogCQkJCQkgIERNQV9DVFJMX0FDSyk7CkBAIC01MzUsMTMg
KzU0MiwxMiBAQCBzdGF0aWMgaW50IHN0bTMyX2hhc2hfeG1pdF9kbWEoc3RydWN0IHN0bTMyX2hh
c2hfZGV2ICpoZGV2LAogCWluX2Rlc2MtPmNhbGxiYWNrID0gc3RtMzJfaGFzaF9kbWFfY2FsbGJh
Y2s7CiAJaW5fZGVzYy0+Y2FsbGJhY2tfcGFyYW0gPSBoZGV2OwogCi0JaGRldi0+ZmxhZ3MgfD0g
SEFTSF9GTEFHU19GSU5BTDsKIAloZGV2LT5mbGFncyB8PSBIQVNIX0ZMQUdTX0RNQV9BQ1RJVkU7
CiAKIAlyZWcgPSBzdG0zMl9oYXNoX3JlYWQoaGRldiwgSEFTSF9DUik7CiAKIAlpZiAoaGRldi0+
cGRhdGEtPmhhc19tZG1hdCkgewotCQlpZiAobWRtYSkKKwkJaWYgKG1kbWF0KQogCQkJcmVnIHw9
IEhBU0hfQ1JfTURNQVQ7CiAJCWVsc2UKIAkJCXJlZyAmPSB+SEFTSF9DUl9NRE1BVDsKQEAgLTU1
MCw3ICs1NTYsNiBAQCBzdGF0aWMgaW50IHN0bTMyX2hhc2hfeG1pdF9kbWEoc3RydWN0IHN0bTMy
X2hhc2hfZGV2ICpoZGV2LAogCiAJc3RtMzJfaGFzaF93cml0ZShoZGV2LCBIQVNIX0NSLCByZWcp
OwogCi0Jc3RtMzJfaGFzaF9zZXRfbmJsdyhoZGV2LCBsZW5ndGgpOwogCiAJY29va2llID0gZG1h
ZW5naW5lX3N1Ym1pdChpbl9kZXNjKTsKIAllcnIgPSBkbWFfc3VibWl0X2Vycm9yKGNvb2tpZSk7
CkBAIC01OTAsNyArNTk1LDcgQEAgc3RhdGljIGludCBzdG0zMl9oYXNoX2htYWNfZG1hX3NlbmQo
c3RydWN0IHN0bTMyX2hhc2hfZGV2ICpoZGV2KQogCXN0cnVjdCBzdG0zMl9oYXNoX2N0eCAqY3R4
ID0gY3J5cHRvX2FoYXNoX2N0eCh0Zm0pOwogCWludCBlcnI7CiAKLQlpZiAoY3R4LT5rZXlsZW4g
PCByY3R4LT5zdGF0ZS5ibG9ja2xlbiB8fCBoZGV2LT5kbWFfbW9kZSA9PSAxKSB7CisJaWYgKGN0
eC0+a2V5bGVuIDwgcmN0eC0+c3RhdGUuYmxvY2tsZW4gfHwgaGRldi0+ZG1hX21vZGUgPiAwKSB7
CiAJCWVyciA9IHN0bTMyX2hhc2hfd3JpdGVfa2V5KGhkZXYpOwogCQlpZiAoc3RtMzJfaGFzaF93
YWl0X2J1c3koaGRldikpCiAJCQlyZXR1cm4gLUVUSU1FRE9VVDsKQEAgLTY1NSwxOCArNjYwLDIw
IEBAIHN0YXRpYyBpbnQgc3RtMzJfaGFzaF9kbWFfc2VuZChzdHJ1Y3Qgc3RtMzJfaGFzaF9kZXYg
KmhkZXYpCiAJc3RydWN0IHNjYXR0ZXJsaXN0IHNnWzFdLCAqdHNnOwogCWludCBlcnIgPSAwLCBy
ZWcsIG5jcCA9IDA7CiAJdW5zaWduZWQgaW50IGksIGxlbiA9IDAsIGJ1ZmNudCA9IDA7CisJYm9v
bCBmaW5hbCA9IGhkZXYtPmZsYWdzICYgSEFTSF9GTEFHU19GSU5BTDsKIAlib29sIGlzX2xhc3Qg
PSBmYWxzZTsKKwl1MzIgbGFzdF93b3JkOwogCi0JcmN0eC0+c2cgPSBoZGV2LT5yZXEtPnNyYzsK
LQlyY3R4LT50b3RhbCA9IGhkZXYtPnJlcS0+bmJ5dGVzOworCWRldl9kYmcoaGRldi0+ZGV2LCAi
JXMgdG90YWw6ICVkIGJ1ZmNudDogJWQgZmluYWw6ICVkXG4iLAorCQlfX2Z1bmNfXywgcmN0eC0+
dG90YWwsIHJjdHgtPnN0YXRlLmJ1ZmNudCwgZmluYWwpOwogCi0JcmN0eC0+bmVudHMgPSBzZ19u
ZW50cyhyY3R4LT5zZyk7CiAJaWYgKHJjdHgtPm5lbnRzIDwgMCkKIAkJcmV0dXJuIC1FSU5WQUw7
CiAKIAlzdG0zMl9oYXNoX3dyaXRlX2N0cmwoaGRldik7CiAKLQlpZiAoaGRldi0+ZmxhZ3MgJiBI
QVNIX0ZMQUdTX0hNQUMpIHsKKwlpZiAoaGRldi0+ZmxhZ3MgJiBIQVNIX0ZMQUdTX0hNQUMgJiYg
KCEoaGRldi0+ZmxhZ3MgJiBIQVNIX0ZMQUdTX0hNQUNfS0VZKSkpIHsKKwkJaGRldi0+ZmxhZ3Mg
fD0gSEFTSF9GTEFHU19ITUFDX0tFWTsKIAkJZXJyID0gc3RtMzJfaGFzaF9obWFjX2RtYV9zZW5k
KGhkZXYpOwogCQlpZiAoZXJyICE9IC1FSU5QUk9HUkVTUykKIAkJCXJldHVybiBlcnI7CkBAIC02
NzcsMjIgKzY4NCwzNiBAQCBzdGF0aWMgaW50IHN0bTMyX2hhc2hfZG1hX3NlbmQoc3RydWN0IHN0
bTMyX2hhc2hfZGV2ICpoZGV2KQogCQlsZW4gPSBzZy0+bGVuZ3RoOwogCiAJCWlmIChzZ19pc19s
YXN0KHNnKSB8fCAoYnVmY250ICsgc2dbMF0ubGVuZ3RoKSA+PSByY3R4LT50b3RhbCkgewotCQkJ
c2ctPmxlbmd0aCA9IHJjdHgtPnRvdGFsIC0gYnVmY250OwotCQkJaXNfbGFzdCA9IHRydWU7Ci0J
CQlpZiAoaGRldi0+ZG1hX21vZGUgPT0gMSkgewotCQkJCWxlbiA9IChBTElHTihzZy0+bGVuZ3Ro
LCAxNikgLSAxNik7Ci0KLQkJCQluY3AgPSBzZ19wY29weV90b19idWZmZXIoCi0JCQkJCXJjdHgt
PnNnLCByY3R4LT5uZW50cywKLQkJCQkJcmN0eC0+c3RhdGUuYnVmZmVyLCBzZy0+bGVuZ3RoIC0g
bGVuLAotCQkJCQlyY3R4LT50b3RhbCAtIHNnLT5sZW5ndGggKyBsZW4pOwotCi0JCQkJc2ctPmxl
bmd0aCA9IGxlbjsKKwkJCWlmICghZmluYWwpIHsKKwkJCQkvKiBBbHdheXMgbWFudWFsbHkgcHV0
IHRoZSBsYXN0IHdvcmQgb2YgYSBub24tZmluYWwgdHJhbnNmZXIuICovCisJCQkJbGVuIC09IHNp
emVvZih1MzIpOworCQkJCXNnX3Bjb3B5X3RvX2J1ZmZlcihyY3R4LT5zZywgcmN0eC0+bmVudHMs
ICZsYXN0X3dvcmQsIDQsIGxlbik7CisJCQkJc2ctPmxlbmd0aCAtPSBzaXplb2YodTMyKTsKIAkJ
CX0gZWxzZSB7Ci0JCQkJaWYgKCEoSVNfQUxJR05FRChzZy0+bGVuZ3RoLCBzaXplb2YodTMyKSkp
KSB7Ci0JCQkJCWxlbiA9IHNnLT5sZW5ndGg7Ci0JCQkJCXNnLT5sZW5ndGggPSBBTElHTihzZy0+
bGVuZ3RoLAotCQkJCQkJCSAgIHNpemVvZih1MzIpKTsKKwkJCQkvKgorCQkJCSAqIEluIE11bHRp
cGxlIERNQSBtb2RlLCBETUEgbXVzdCBiZSBhYm9ydGVkIGJlZm9yZSB0aGUgZmluYWwKKwkJCQkg
KiB0cmFuc2Zlci4KKwkJCQkgKi8KKwkJCQlzZy0+bGVuZ3RoID0gcmN0eC0+dG90YWwgLSBidWZj
bnQ7CisJCQkJaWYgKGhkZXYtPmRtYV9tb2RlID4gMCkgeworCQkJCQlsZW4gPSAoQUxJR04oc2ct
Pmxlbmd0aCwgMTYpIC0gMTYpOworCisJCQkJCW5jcCA9IHNnX3Bjb3B5X3RvX2J1ZmZlcihyY3R4
LT5zZywgcmN0eC0+bmVudHMsCisJCQkJCQkJCSByY3R4LT5zdGF0ZS5idWZmZXIsCisJCQkJCQkJ
CSBzZy0+bGVuZ3RoIC0gbGVuLAorCQkJCQkJCQkgcmN0eC0+dG90YWwgLSBzZy0+bGVuZ3RoICsg
bGVuKTsKKworCQkJCQlpZiAoIWxlbikKKwkJCQkJCWJyZWFrOworCisJCQkJCXNnLT5sZW5ndGgg
PSBsZW47CisJCQkJfSBlbHNlIHsKKwkJCQkJaXNfbGFzdCA9IHRydWU7CisJCQkJCWlmICghKElT
X0FMSUdORUQoc2ctPmxlbmd0aCwgc2l6ZW9mKHUzMikpKSkgeworCQkJCQkJbGVuID0gc2ctPmxl
bmd0aDsKKwkJCQkJCXNnLT5sZW5ndGggPSBBTElHTihzZy0+bGVuZ3RoLAorCQkJCQkJCQkgICBz
aXplb2YodTMyKSk7CisJCQkJCX0KIAkJCQl9CiAJCQl9CiAJCX0KQEAgLTcwNiw0MyArNzI3LDY3
IEBAIHN0YXRpYyBpbnQgc3RtMzJfaGFzaF9kbWFfc2VuZChzdHJ1Y3Qgc3RtMzJfaGFzaF9kZXYg
KmhkZXYpCiAKIAkJZXJyID0gc3RtMzJfaGFzaF94bWl0X2RtYShoZGV2LCBzZywgbGVuLCAhaXNf
bGFzdCk7CiAKKwkJLyogVGhlIGxhc3Qgd29yZCBvZiBhIG5vbiBmaW5hbCB0cmFuc2ZlciBpcyBz
ZW50IG1hbnVhbGx5LiAqLworCQlpZiAoIWZpbmFsKSB7CisJCQlzdG0zMl9oYXNoX3dyaXRlKGhk
ZXYsIEhBU0hfRElOLCBsYXN0X3dvcmQpOworCQkJbGVuICs9IHNpemVvZih1MzIpOworCQl9CisK
KwkJcmN0eC0+dG90YWwgLT0gbGVuOworCiAJCWJ1ZmNudCArPSBzZ1swXS5sZW5ndGg7CiAJCWRt
YV91bm1hcF9zZyhoZGV2LT5kZXYsIHNnLCAxLCBETUFfVE9fREVWSUNFKTsKIAotCQlpZiAoZXJy
ID09IC1FTk9NRU0pCisJCWlmIChlcnIgPT0gLUVOT01FTSB8fCBlcnIgPT0gLUVUSU1FRE9VVCkK
IAkJCXJldHVybiBlcnI7CiAJCWlmIChpc19sYXN0KQogCQkJYnJlYWs7CiAJfQogCi0JaWYgKGhk
ZXYtPmRtYV9tb2RlID09IDEpIHsKLQkJaWYgKHN0bTMyX2hhc2hfd2FpdF9idXN5KGhkZXYpKQot
CQkJcmV0dXJuIC1FVElNRURPVVQ7Ci0JCXJlZyA9IHN0bTMyX2hhc2hfcmVhZChoZGV2LCBIQVNI
X0NSKTsKLQkJcmVnICY9IH5IQVNIX0NSX0RNQUU7Ci0JCXJlZyB8PSBIQVNIX0NSX0RNQUE7Ci0J
CXN0bTMyX2hhc2hfd3JpdGUoaGRldiwgSEFTSF9DUiwgcmVnKTsKKwkvKgorCSAqIFdoZW4gdGhl
IHNlY29uZCBsYXN0IGJsb2NrIHRyYW5zZmVyIG9mIDQgd29yZHMgaXMgcGVyZm9ybWVkIGJ5IHRo
ZSBETUEsCisJICogdGhlIHNvZnR3YXJlIG11c3Qgc2V0IHRoZSBETUEgQWJvcnQgYml0IChETUFB
KSB0byAxIGJlZm9yZSBjb21wbGV0aW5nIHRoZQorCSAqIGxhc3QgdHJhbnNmZXIgb2YgNCB3b3Jk
cyBvciBsZXNzLgorCSAqLworCWlmIChmaW5hbCkgeworCQlpZiAoaGRldi0+ZG1hX21vZGUgPiAw
KSB7CisJCQlpZiAoc3RtMzJfaGFzaF93YWl0X2J1c3koaGRldikpCisJCQkJcmV0dXJuIC1FVElN
RURPVVQ7CisJCQlyZWcgPSBzdG0zMl9oYXNoX3JlYWQoaGRldiwgSEFTSF9DUik7CisJCQlyZWcg
Jj0gfkhBU0hfQ1JfRE1BRTsKKwkJCXJlZyB8PSBIQVNIX0NSX0RNQUE7CisJCQlzdG0zMl9oYXNo
X3dyaXRlKGhkZXYsIEhBU0hfQ1IsIHJlZyk7CisKKwkJCWlmIChuY3ApIHsKKwkJCQltZW1zZXQo
YnVmZmVyICsgbmNwLCAwLCA0IC0gRElWX1JPVU5EX1VQKG5jcCwgc2l6ZW9mKHUzMikpKTsKKwkJ
CQl3cml0ZXNsKGhkZXYtPmlvX2Jhc2UgKyBIQVNIX0RJTiwgYnVmZmVyLAorCQkJCQlESVZfUk9V
TkRfVVAobmNwLCBzaXplb2YodTMyKSkpOworCQkJfQogCi0JCWlmIChuY3ApIHsKLQkJCW1lbXNl
dChidWZmZXIgKyBuY3AsIDAsCi0JCQkgICAgICAgRElWX1JPVU5EX1VQKG5jcCwgc2l6ZW9mKHUz
MikpIC0gbmNwKTsKLQkJCXdyaXRlc2woaGRldi0+aW9fYmFzZSArIEhBU0hfRElOLCBidWZmZXIs
Ci0JCQkJRElWX1JPVU5EX1VQKG5jcCwgc2l6ZW9mKHUzMikpKTsKKwkJCXN0bTMyX2hhc2hfc2V0
X25ibHcoaGRldiwgbmNwKTsKKwkJCXJlZyA9IHN0bTMyX2hhc2hfcmVhZChoZGV2LCBIQVNIX1NU
Uik7CisJCQlyZWcgfD0gSEFTSF9TVFJfRENBTDsKKwkJCXN0bTMyX2hhc2hfd3JpdGUoaGRldiwg
SEFTSF9TVFIsIHJlZyk7CisJCQllcnIgPSAtRUlOUFJPR1JFU1M7CiAJCX0KLQkJc3RtMzJfaGFz
aF9zZXRfbmJsdyhoZGV2LCBuY3ApOwotCQlyZWcgPSBzdG0zMl9oYXNoX3JlYWQoaGRldiwgSEFT
SF9TVFIpOwotCQlyZWcgfD0gSEFTSF9TVFJfRENBTDsKLQkJc3RtMzJfaGFzaF93cml0ZShoZGV2
LCBIQVNIX1NUUiwgcmVnKTsKLQkJZXJyID0gLUVJTlBST0dSRVNTOwotCX0KIAotCWlmIChoZGV2
LT5mbGFncyAmIEhBU0hfRkxBR1NfSE1BQykgewotCQlpZiAoc3RtMzJfaGFzaF93YWl0X2J1c3ko
aGRldikpCi0JCQlyZXR1cm4gLUVUSU1FRE9VVDsKLQkJZXJyID0gc3RtMzJfaGFzaF9obWFjX2Rt
YV9zZW5kKGhkZXYpOworCQkvKgorCQkgKiBUaGUgaGFzaCBwcm9jZXNzb3IgbmVlZHMgdGhlIGtl
eSB0byBiZSBsb2FkZWQgYSBzZWNvbmQgdGltZSBpbiBvcmRlcgorCQkgKiB0byBwcm9jZXNzIHRo
ZSBITUFDLgorCQkgKi8KKwkJaWYgKGhkZXYtPmZsYWdzICYgSEFTSF9GTEFHU19ITUFDKSB7CisJ
CQlpZiAoc3RtMzJfaGFzaF93YWl0X2J1c3koaGRldikpCisJCQkJcmV0dXJuIC1FVElNRURPVVQ7
CisJCQllcnIgPSBzdG0zMl9oYXNoX2htYWNfZG1hX3NlbmQoaGRldik7CisJCX0KKworCQlyZXR1
cm4gZXJyOwogCX0KIAotCXJldHVybiBlcnI7CisJaWYgKGVyciAhPSAtRUlOUFJPR1JFU1MpCisJ
CXJldHVybiBlcnI7CisKKwlyZXR1cm4gMDsKIH0KIAogc3RhdGljIHN0cnVjdCBzdG0zMl9oYXNo
X2RldiAqc3RtMzJfaGFzaF9maW5kX2RldihzdHJ1Y3Qgc3RtMzJfaGFzaF9jdHggKmN0eCkKQEAg
LTc2NSwzMyArODEwLDYgQEAgc3RhdGljIHN0cnVjdCBzdG0zMl9oYXNoX2RldiAqc3RtMzJfaGFz
aF9maW5kX2RldihzdHJ1Y3Qgc3RtMzJfaGFzaF9jdHggKmN0eCkKIAlyZXR1cm4gaGRldjsKIH0K
IAotc3RhdGljIGJvb2wgc3RtMzJfaGFzaF9kbWFfYWxpZ25lZF9kYXRhKHN0cnVjdCBhaGFzaF9y
ZXF1ZXN0ICpyZXEpCi17Ci0Jc3RydWN0IHNjYXR0ZXJsaXN0ICpzZzsKLQlzdHJ1Y3Qgc3RtMzJf
aGFzaF9yZXF1ZXN0X2N0eCAqcmN0eCA9IGFoYXNoX3JlcXVlc3RfY3R4KHJlcSk7Ci0Jc3RydWN0
IHN0bTMyX2hhc2hfY3R4ICpjdHggPSBjcnlwdG9fYWhhc2hfY3R4KGNyeXB0b19haGFzaF9yZXF0
Zm0ocmVxKSk7Ci0Jc3RydWN0IHN0bTMyX2hhc2hfZGV2ICpoZGV2ID0gc3RtMzJfaGFzaF9maW5k
X2RldihjdHgpOwotCWludCBpOwotCi0JaWYgKCFoZGV2LT5kbWFfbGNoIHx8IHJlcS0+bmJ5dGVz
IDw9IHJjdHgtPnN0YXRlLmJsb2NrbGVuKQotCQlyZXR1cm4gZmFsc2U7Ci0KLQlpZiAoc2dfbmVu
dHMocmVxLT5zcmMpID4gMSkgewotCQlpZiAoaGRldi0+ZG1hX21vZGUgPT0gMSkKLQkJCXJldHVy
biBmYWxzZTsKLQkJZm9yX2VhY2hfc2cocmVxLT5zcmMsIHNnLCBzZ19uZW50cyhyZXEtPnNyYyks
IGkpIHsKLQkJCWlmICgoIUlTX0FMSUdORUQoc2ctPmxlbmd0aCwgc2l6ZW9mKHUzMikpKSAmJgot
CQkJICAgICghc2dfaXNfbGFzdChzZykpKQotCQkJCXJldHVybiBmYWxzZTsKLQkJfQotCX0KLQot
CWlmIChyZXEtPnNyYy0+b2Zmc2V0ICUgNCkKLQkJcmV0dXJuIGZhbHNlOwotCi0JcmV0dXJuIHRy
dWU7Ci19Ci0KIHN0YXRpYyBpbnQgc3RtMzJfaGFzaF9pbml0KHN0cnVjdCBhaGFzaF9yZXF1ZXN0
ICpyZXEpCiB7CiAJc3RydWN0IGNyeXB0b19haGFzaCAqdGZtID0gY3J5cHRvX2FoYXNoX3JlcXRm
bShyZXEpOwpAQCAtODAyLDggKzgyMCwxMCBAQCBzdGF0aWMgaW50IHN0bTMyX2hhc2hfaW5pdChz
dHJ1Y3QgYWhhc2hfcmVxdWVzdCAqcmVxKQogCWJvb2wgc2hhM19tb2RlID0gY3R4LT5mbGFncyAm
IEhBU0hfRkxBR1NfU0hBM19NT0RFOwogCiAJcmN0eC0+aGRldiA9IGhkZXY7CisJc3RhdGUtPmZs
YWdzID0gMDsKIAotCXN0YXRlLT5mbGFncyA9IEhBU0hfRkxBR1NfQ1BVOworCWlmICghKGhkZXYt
PmRtYV9sY2ggJiYgIGhkZXYtPnBkYXRhLT5oYXNfbWRtYXQpKQorCQlzdGF0ZS0+ZmxhZ3MgfD0g
SEFTSF9GTEFHU19DUFU7CiAKIAlpZiAoc2hhM19tb2RlKQogCQlzdGF0ZS0+ZmxhZ3MgfD0gSEFT
SF9GTEFHU19TSEEzX01PREU7CkBAIC04NTcsNiArODc3LDcgQEAgc3RhdGljIGludCBzdG0zMl9o
YXNoX2luaXQoc3RydWN0IGFoYXNoX3JlcXVlc3QgKnJlcSkKIAkJZGV2X2VycihoZGV2LT5kZXYs
ICJFcnJvciwgYmxvY2sgdG9vIGxhcmdlIik7CiAJCXJldHVybiAtRUlOVkFMOwogCX0KKwlyY3R4
LT5uZW50cyA9IDA7CiAJcmN0eC0+dG90YWwgPSAwOwogCXJjdHgtPm9mZnNldCA9IDA7CiAJcmN0
eC0+ZGF0YV90eXBlID0gSEFTSF9EQVRBXzhfQklUUzsKQEAgLTg3NCw2ICs4OTUsOSBAQCBzdGF0
aWMgaW50IHN0bTMyX2hhc2hfdXBkYXRlX3JlcShzdHJ1Y3Qgc3RtMzJfaGFzaF9kZXYgKmhkZXYp
CiAJc3RydWN0IHN0bTMyX2hhc2hfcmVxdWVzdF9jdHggKnJjdHggPSBhaGFzaF9yZXF1ZXN0X2N0
eChoZGV2LT5yZXEpOwogCXN0cnVjdCBzdG0zMl9oYXNoX3N0YXRlICpzdGF0ZSA9ICZyY3R4LT5z
dGF0ZTsKIAorCWRldl9kYmcoaGRldi0+ZGV2LCAidXBkYXRlX3JlcTogdG90YWw6ICV1LCBkaWdj
bnQ6ICV6ZCwgZmluYWw6IDAiLAorCQlyY3R4LT50b3RhbCwgcmN0eC0+ZGlnY250KTsKKwogCWlm
ICghKHN0YXRlLT5mbGFncyAmIEhBU0hfRkxBR1NfQ1BVKSkKIAkJcmV0dXJuIHN0bTMyX2hhc2hf
ZG1hX3NlbmQoaGRldik7CiAKQEAgLTg4Nyw2ICs5MTEsMTEgQEAgc3RhdGljIGludCBzdG0zMl9o
YXNoX2ZpbmFsX3JlcShzdHJ1Y3Qgc3RtMzJfaGFzaF9kZXYgKmhkZXYpCiAJc3RydWN0IHN0bTMy
X2hhc2hfc3RhdGUgKnN0YXRlID0gJnJjdHgtPnN0YXRlOwogCWludCBidWZsZW4gPSBzdGF0ZS0+
YnVmY250OwogCisJaWYgKCEoc3RhdGUtPmZsYWdzICYgSEFTSF9GTEFHU19DUFUpKSB7CisJCWhk
ZXYtPmZsYWdzIHw9IEhBU0hfRkxBR1NfRklOQUw7CisJCXJldHVybiBzdG0zMl9oYXNoX2RtYV9z
ZW5kKGhkZXYpOworCX0KKwogCWlmIChzdGF0ZS0+ZmxhZ3MgJiBIQVNIX0ZMQUdTX0ZJTlVQKQog
CQlyZXR1cm4gc3RtMzJfaGFzaF91cGRhdGVfcmVxKGhkZXYpOwogCkBAIC05NjgsMTUgKzk5Nywy
MSBAQCBzdGF0aWMgaW50IHN0bTMyX2hhc2hfZmluaXNoKHN0cnVjdCBhaGFzaF9yZXF1ZXN0ICpy
ZXEpCiBzdGF0aWMgdm9pZCBzdG0zMl9oYXNoX2ZpbmlzaF9yZXEoc3RydWN0IGFoYXNoX3JlcXVl
c3QgKnJlcSwgaW50IGVycikKIHsKIAlzdHJ1Y3Qgc3RtMzJfaGFzaF9yZXF1ZXN0X2N0eCAqcmN0
eCA9IGFoYXNoX3JlcXVlc3RfY3R4KHJlcSk7CisJc3RydWN0IHN0bTMyX2hhc2hfc3RhdGUgKnN0
YXRlID0gJnJjdHgtPnN0YXRlOwogCXN0cnVjdCBzdG0zMl9oYXNoX2RldiAqaGRldiA9IHJjdHgt
PmhkZXY7CiAKKwlpZiAoaGRldi0+ZmxhZ3MgJiBIQVNIX0ZMQUdTX0RNQV9BQ1RJVkUpCisJCXN0
YXRlLT5mbGFncyB8PSBIQVNIX0ZMQUdTX0RNQV9BQ1RJVkU7CisJZWxzZQorCQlzdGF0ZS0+Zmxh
Z3MgJj0gfkhBU0hfRkxBR1NfRE1BX0FDVElWRTsKKwogCWlmICghZXJyICYmIChIQVNIX0ZMQUdT
X0ZJTkFMICYgaGRldi0+ZmxhZ3MpKSB7CiAJCXN0bTMyX2hhc2hfY29weV9oYXNoKHJlcSk7CiAJ
CWVyciA9IHN0bTMyX2hhc2hfZmluaXNoKHJlcSk7CiAJfQogCi0JcG1fcnVudGltZV9tYXJrX2xh
c3RfYnVzeShoZGV2LT5kZXYpOwotCXBtX3J1bnRpbWVfcHV0X2F1dG9zdXNwZW5kKGhkZXYtPmRl
dik7CisJLyogRmluYWxpemVkIHJlcXVlc3QgbWlzdCBiZSB1bnByZXBhcmVkIGhlcmUgKi8KKwlz
dG0zMl9oYXNoX3VucHJlcGFyZV9yZXF1ZXN0KHJlcSk7CiAKIAljcnlwdG9fZmluYWxpemVfaGFz
aF9yZXF1ZXN0KGhkZXYtPmVuZ2luZSwgcmVxLCBlcnIpOwogfQpAQCAtMTAwNiw2ICsxMDQxLDEw
IEBAIHN0YXRpYyBpbnQgc3RtMzJfaGFzaF9vbmVfcmVxdWVzdChzdHJ1Y3QgY3J5cHRvX2VuZ2lu
ZSAqZW5naW5lLCB2b2lkICphcmVxKQogCiAJcG1fcnVudGltZV9nZXRfc3luYyhoZGV2LT5kZXYp
OwogCisJZXJyID0gc3RtMzJfaGFzaF9wcmVwYXJlX3JlcXVlc3QocmVxKTsKKwlpZiAoZXJyKQor
CQlyZXR1cm4gZXJyOworCiAJaGRldi0+cmVxID0gcmVxOwogCWhkZXYtPmZsYWdzID0gMDsKIAlz
d2FwX3JlZyA9IGhhc2hfc3dhcF9yZWcocmN0eCk7CkBAIC0xMDMwLDYgKzEwNjksMTIgQEAgc3Rh
dGljIGludCBzdG0zMl9oYXNoX29uZV9yZXF1ZXN0KHN0cnVjdCBjcnlwdG9fZW5naW5lICplbmdp
bmUsIHZvaWQgKmFyZXEpCiAJCWlmIChzdGF0ZS0+ZmxhZ3MgJiBIQVNIX0ZMQUdTX0hNQUMpCiAJ
CQloZGV2LT5mbGFncyB8PSBIQVNIX0ZMQUdTX0hNQUMgfAogCQkJCSAgICAgICBIQVNIX0ZMQUdT
X0hNQUNfS0VZOworCisJCWlmIChzdGF0ZS0+ZmxhZ3MgJiBIQVNIX0ZMQUdTX0NQVSkKKwkJCWhk
ZXYtPmZsYWdzIHw9IEhBU0hfRkxBR1NfQ1BVOworCisJCWlmIChzdGF0ZS0+ZmxhZ3MgJiBIQVNI
X0ZMQUdTX0RNQV9BQ1RJVkUpCisJCQloZGV2LT5mbGFncyB8PSBIQVNIX0ZMQUdTX0RNQV9BQ1RJ
VkU7CiAJfQogCiAJaWYgKHJjdHgtPm9wID09IEhBU0hfT1BfVVBEQVRFKQpAQCAtMTA1NCw2ICsx
MDk5LDI4NCBAQCBzdGF0aWMgaW50IHN0bTMyX2hhc2hfb25lX3JlcXVlc3Qoc3RydWN0IGNyeXB0
b19lbmdpbmUgKmVuZ2luZSwgdm9pZCAqYXJlcSkKIAlyZXR1cm4gMDsKIH0KIAorc3RhdGljIGlu
dCBzdG0zMl9oYXNoX2NvcHlfc2dzKHN0cnVjdCBzdG0zMl9oYXNoX3JlcXVlc3RfY3R4ICpyY3R4
LAorCQkJICAgICAgIHN0cnVjdCBzY2F0dGVybGlzdCAqc2csIGludCBicywKKwkJCSAgICAgICB1
bnNpZ25lZCBpbnQgbmV3X2xlbikKK3sKKwlzdHJ1Y3Qgc3RtMzJfaGFzaF9zdGF0ZSAqc3RhdGUg
PSAmcmN0eC0+c3RhdGU7CisJaW50IHBhZ2VzOworCXZvaWQgKmJ1ZjsKKworCXBhZ2VzID0gZ2V0
X29yZGVyKG5ld19sZW4pOworCisJYnVmID0gKHZvaWQgKilfX2dldF9mcmVlX3BhZ2VzKEdGUF9B
VE9NSUMsIHBhZ2VzKTsKKwlpZiAoIWJ1ZikgeworCQlwcl9lcnIoIkNvdWxkbid0IGFsbG9jYXRl
IHBhZ2VzIGZvciB1bmFsaWduZWQgY2FzZXMuXG4iKTsKKwkJcmV0dXJuIC1FTk9NRU07CisJfQor
CisJaWYgKHN0YXRlLT5idWZjbnQpCisJCW1lbWNweShidWYsIHJjdHgtPmhkZXYtPnhtaXRfYnVm
LCBzdGF0ZS0+YnVmY250KTsKKworCXNjYXR0ZXJ3YWxrX21hcF9hbmRfY29weShidWYgKyBzdGF0
ZS0+YnVmY250LCBzZywgcmN0eC0+b2Zmc2V0LAorCQkJCSBtaW4obmV3X2xlbiwgcmN0eC0+dG90
YWwpIC0gc3RhdGUtPmJ1ZmNudCwgMCk7CisJc2dfaW5pdF90YWJsZShyY3R4LT5zZ2wsIDEpOwor
CXNnX3NldF9idWYocmN0eC0+c2dsLCBidWYsIG5ld19sZW4pOworCXJjdHgtPnNnID0gcmN0eC0+
c2dsOworCXN0YXRlLT5mbGFncyB8PSBIQVNIX0ZMQUdTX1NHU19DT1BJRUQ7CisJcmN0eC0+bmVu
dHMgPSAxOworCXJjdHgtPm9mZnNldCArPSBuZXdfbGVuIC0gc3RhdGUtPmJ1ZmNudDsKKwlzdGF0
ZS0+YnVmY250ID0gMDsKKwlyY3R4LT50b3RhbCA9IG5ld19sZW47CisKKwlyZXR1cm4gMDsKK30K
Kworc3RhdGljIGludCBzdG0zMl9oYXNoX2FsaWduX3NncyhzdHJ1Y3Qgc2NhdHRlcmxpc3QgKnNn
LAorCQkJCWludCBuYnl0ZXMsIGludCBicywgYm9vbCBpbml0LCBib29sIGZpbmFsLAorCQkJCXN0
cnVjdCBzdG0zMl9oYXNoX3JlcXVlc3RfY3R4ICpyY3R4KQoreworCXN0cnVjdCBzdG0zMl9oYXNo
X3N0YXRlICpzdGF0ZSA9ICZyY3R4LT5zdGF0ZTsKKwlzdHJ1Y3Qgc3RtMzJfaGFzaF9kZXYgKmhk
ZXYgPSByY3R4LT5oZGV2OworCXN0cnVjdCBzY2F0dGVybGlzdCAqc2dfdG1wID0gc2c7CisJaW50
IG9mZnNldCA9IHJjdHgtPm9mZnNldDsKKwlpbnQgbmV3X2xlbjsKKwlpbnQgbiA9IDA7CisJaW50
IGJ1ZmNudCA9IHN0YXRlLT5idWZjbnQ7CisJYm9vbCBzZWN1cmVfY3R4ID0gaGRldi0+cGRhdGEt
PmNvbnRleHRfc2VjdXJlZDsKKwlib29sIGFsaWduZWQgPSB0cnVlOworCisJaWYgKCFzZyB8fCAh
c2ctPmxlbmd0aCB8fCAhbmJ5dGVzKSB7CisJCWlmIChidWZjbnQpIHsKKwkJCWJ1ZmNudCA9IERJ
Vl9ST1VORF9VUChidWZjbnQsIGJzKSAqIGJzOworCQkJc2dfaW5pdF90YWJsZShyY3R4LT5zZ2ws
IDEpOworCQkJc2dfc2V0X2J1ZihyY3R4LT5zZ2wsIHJjdHgtPmhkZXYtPnhtaXRfYnVmLCBidWZj
bnQpOworCQkJcmN0eC0+c2cgPSByY3R4LT5zZ2w7CisJCQlyY3R4LT5uZW50cyA9IDE7CisJCX0K
KworCQlyZXR1cm4gMDsKKwl9CisKKwluZXdfbGVuID0gbmJ5dGVzOworCisJaWYgKG9mZnNldCkK
KwkJYWxpZ25lZCA9IGZhbHNlOworCisJaWYgKGZpbmFsKSB7CisJCW5ld19sZW4gPSBESVZfUk9V
TkRfVVAobmV3X2xlbiwgYnMpICogYnM7CisJfSBlbHNlIHsKKwkJbmV3X2xlbiA9IChuZXdfbGVu
IC0gMSkgLyBicyAqIGJzOyAvLyByZXR1cm4gbiBibG9jayAtIDEgYmxvY2sKKworCQkvKgorCQkg
KiBDb250ZXh0IHNhdmUgaW4gc29tZSB2ZXJzaW9uIG9mIEhBU0ggSVAgY2FuIG9ubHkgYmUgZG9u
ZSB3aGVuIHRoZQorCQkgKiBGSUZPIGlzIHJlYWR5IHRvIGdldCBhIG5ldyBibG9jay4gVGhpcyBp
bXBsaWVzIHRvIHNlbmQgbiBibG9jayBwbHVzIGEKKwkJICogMzIgYml0IHdvcmQgaW4gdGhlIGZp
cnN0IERNQSBzZW5kLgorCQkgKi8KKwkJaWYgKGluaXQgJiYgc2VjdXJlX2N0eCkgeworCQkJbmV3
X2xlbiArPSBzaXplb2YodTMyKTsKKwkJCWlmICh1bmxpa2VseShuZXdfbGVuID4gbmJ5dGVzKSkK
KwkJCQluZXdfbGVuIC09IGJzOworCQl9CisJfQorCisJaWYgKCFuZXdfbGVuKQorCQlyZXR1cm4g
MDsKKworCWlmIChuYnl0ZXMgIT0gbmV3X2xlbikKKwkJYWxpZ25lZCA9IGZhbHNlOworCisJd2hp
bGUgKG5ieXRlcyA+IDAgJiYgc2dfdG1wKSB7CisJCW4rKzsKKworCQlpZiAoYnVmY250KSB7CisJ
CQlpZiAoIUlTX0FMSUdORUQoYnVmY250LCBicykpIHsKKwkJCQlhbGlnbmVkID0gZmFsc2U7CisJ
CQkJYnJlYWs7CisJCQl9CisJCQluYnl0ZXMgLT0gYnVmY250OworCQkJYnVmY250ID0gMDsKKwkJ
CWlmICghbmJ5dGVzKQorCQkJCWFsaWduZWQgPSBmYWxzZTsKKworCQkJY29udGludWU7CisJCX0K
KworCQlpZiAob2Zmc2V0IDwgc2dfdG1wLT5sZW5ndGgpIHsKKwkJCWlmICghSVNfQUxJR05FRChv
ZmZzZXQgKyBzZ190bXAtPm9mZnNldCwgNCkpIHsKKwkJCQlhbGlnbmVkID0gZmFsc2U7CisJCQkJ
YnJlYWs7CisJCQl9CisKKwkJCWlmICghSVNfQUxJR05FRChzZ190bXAtPmxlbmd0aCAtIG9mZnNl
dCwgYnMpKSB7CisJCQkJYWxpZ25lZCA9IGZhbHNlOworCQkJCWJyZWFrOworCQkJfQorCQl9CisK
KwkJaWYgKG9mZnNldCkgeworCQkJb2Zmc2V0IC09IHNnX3RtcC0+bGVuZ3RoOworCQkJaWYgKG9m
ZnNldCA8IDApIHsKKwkJCQluYnl0ZXMgKz0gb2Zmc2V0OworCQkJCW9mZnNldCA9IDA7CisJCQl9
CisJCX0gZWxzZSB7CisJCQluYnl0ZXMgLT0gc2dfdG1wLT5sZW5ndGg7CisJCX0KKworCQlzZ190
bXAgPSBzZ19uZXh0KHNnX3RtcCk7CisKKwkJaWYgKG5ieXRlcyA8IDApIHsKKwkJCWFsaWduZWQg
PSBmYWxzZTsKKwkJCWJyZWFrOworCQl9CisJfQorCisJaWYgKCFhbGlnbmVkKQorCQlyZXR1cm4g
c3RtMzJfaGFzaF9jb3B5X3NncyhyY3R4LCBzZywgYnMsIG5ld19sZW4pOworCisJcmN0eC0+dG90
YWwgPSBuZXdfbGVuOworCXJjdHgtPm9mZnNldCArPSBuZXdfbGVuOworCXJjdHgtPm5lbnRzID0g
bjsKKwlpZiAoc3RhdGUtPmJ1ZmNudCkgeworCQlzZ19pbml0X3RhYmxlKHJjdHgtPnNnbCwgMik7
CisJCXNnX3NldF9idWYocmN0eC0+c2dsLCByY3R4LT5oZGV2LT54bWl0X2J1Ziwgc3RhdGUtPmJ1
ZmNudCk7CisJCXNnX2NoYWluKHJjdHgtPnNnbCwgMiwgc2cpOworCQlyY3R4LT5zZyA9IHJjdHgt
PnNnbDsKKwl9IGVsc2UgeworCQlyY3R4LT5zZyA9IHNnOworCX0KKworCXJldHVybiAwOworfQor
CitzdGF0aWMgaW50IHN0bTMyX2hhc2hfcHJlcGFyZV9yZXF1ZXN0KHN0cnVjdCBhaGFzaF9yZXF1
ZXN0ICpyZXEpCit7CisJc3RydWN0IGNyeXB0b19haGFzaCAqdGZtID0gY3J5cHRvX2FoYXNoX3Jl
cXRmbShyZXEpOworCXN0cnVjdCBzdG0zMl9oYXNoX2N0eCAqY3R4ID0gY3J5cHRvX2FoYXNoX2N0
eCh0Zm0pOworCXN0cnVjdCBzdG0zMl9oYXNoX3JlcXVlc3RfY3R4ICpyY3R4ID0gYWhhc2hfcmVx
dWVzdF9jdHgocmVxKTsKKwlzdHJ1Y3Qgc3RtMzJfaGFzaF9kZXYgKmhkZXYgPSBzdG0zMl9oYXNo
X2ZpbmRfZGV2KGN0eCk7CisJc3RydWN0IHN0bTMyX2hhc2hfc3RhdGUgKnN0YXRlID0gJnJjdHgt
PnN0YXRlOworCXVuc2lnbmVkIGludCBuYnl0ZXM7CisJaW50IHJldCwgaGFzaF9sYXRlciwgYnM7
CisJYm9vbCB1cGRhdGUgPSByY3R4LT5vcCAmIEhBU0hfT1BfVVBEQVRFOworCWJvb2wgaW5pdCA9
ICEoc3RhdGUtPmZsYWdzICYgSEFTSF9GTEFHU19JTklUKTsKKwlib29sIGZpbnVwID0gc3RhdGUt
PmZsYWdzICYgSEFTSF9GTEFHU19GSU5VUDsKKwlib29sIGZpbmFsID0gc3RhdGUtPmZsYWdzICYg
SEFTSF9GTEFHU19GSU5BTDsKKworCWlmICghaGRldi0+ZG1hX2xjaCB8fCBzdGF0ZS0+ZmxhZ3Mg
JiBIQVNIX0ZMQUdTX0NQVSkKKwkJcmV0dXJuIDA7CisKKwlicyA9IGNyeXB0b19haGFzaF9ibG9j
a3NpemUodGZtKTsKKworCW5ieXRlcyA9IHN0YXRlLT5idWZjbnQ7CisKKwkvKgorCSAqIEluIGNh
c2Ugb2YgdXBkYXRlIHJlcXVlc3QgbmJ5dGVzIG11c3QgY29ycmVzcG9uZCB0byB0aGUgY29udGVu
dCBvZiB0aGUKKwkgKiBidWZmZXIgKyB0aGUgb2Zmc2V0IG1pbnVzIHRoZSBjb250ZW50IG9mIHRo
ZSByZXF1ZXN0IGFscmVhZHkgaW4gdGhlCisJICogYnVmZmVyLgorCSAqLworCWlmICh1cGRhdGUg
fHwgZmludXApCisJCW5ieXRlcyArPSByZXEtPm5ieXRlcyAtIHJjdHgtPm9mZnNldDsKKworCWRl
dl9kYmcoaGRldi0+ZGV2LAorCQkiJXM6IG5ieXRlcz0lZCwgYnM9JWQsIHRvdGFsPSVkLCBvZmZz
ZXQ9JWQsIGJ1ZmNudD0lZFxuIiwKKwkJX19mdW5jX18sIG5ieXRlcywgYnMsIHJjdHgtPnRvdGFs
LCByY3R4LT5vZmZzZXQsIHN0YXRlLT5idWZjbnQpOworCisJaWYgKCFuYnl0ZXMpCisJCXJldHVy
biAwOworCisJcmN0eC0+dG90YWwgPSBuYnl0ZXM7CisKKwlpZiAodXBkYXRlICYmIHJlcS0+bmJ5
dGVzICYmICghSVNfQUxJR05FRChzdGF0ZS0+YnVmY250LCBicykpKSB7CisJCWludCBsZW4gPSBi
cyAtIHN0YXRlLT5idWZjbnQgJSBiczsKKworCQlpZiAobGVuID4gcmVxLT5uYnl0ZXMpCisJCQls
ZW4gPSByZXEtPm5ieXRlczsKKwkJc2NhdHRlcndhbGtfbWFwX2FuZF9jb3B5KHN0YXRlLT5idWZm
ZXIgKyBzdGF0ZS0+YnVmY250LCByZXEtPnNyYywKKwkJCQkJIDAsIGxlbiwgMCk7CisJCXN0YXRl
LT5idWZjbnQgKz0gbGVuOworCQlyY3R4LT5vZmZzZXQgPSBsZW47CisJfQorCisJLyogY29weSBi
dWZmZXIgaW4gYSB0ZW1wb3Jhcnkgb25lIHRoYXQgaXMgdXNlZCBmb3Igc2cgYWxpZ25tZW50ICov
CisJaWYgKHN0YXRlLT5idWZjbnQpCisJCW1lbWNweShoZGV2LT54bWl0X2J1Ziwgc3RhdGUtPmJ1
ZmZlciwgc3RhdGUtPmJ1ZmNudCk7CisKKwlyZXQgPSBzdG0zMl9oYXNoX2FsaWduX3NncyhyZXEt
PnNyYywgbmJ5dGVzLCBicywgaW5pdCwgZmluYWwsIHJjdHgpOworCWlmIChyZXQpCisJCXJldHVy
biByZXQ7CisKKwloYXNoX2xhdGVyID0gbmJ5dGVzIC0gcmN0eC0+dG90YWw7CisJaWYgKGhhc2hf
bGF0ZXIgPCAwKQorCQloYXNoX2xhdGVyID0gMDsKKworCWlmIChoYXNoX2xhdGVyICYmIGhhc2hf
bGF0ZXIgPD0gc3RhdGUtPmJsb2NrbGVuKSB7CisJCXNjYXR0ZXJ3YWxrX21hcF9hbmRfY29weShz
dGF0ZS0+YnVmZmVyLAorCQkJCQkgcmVxLT5zcmMsCisJCQkJCSByZXEtPm5ieXRlcyAtIGhhc2hf
bGF0ZXIsCisJCQkJCSBoYXNoX2xhdGVyLCAwKTsKKworCQlzdGF0ZS0+YnVmY250ID0gaGFzaF9s
YXRlcjsKKwl9IGVsc2UgeworCQlzdGF0ZS0+YnVmY250ID0gMDsKKwl9CisKKwlpZiAoaGFzaF9s
YXRlciA+IHN0YXRlLT5ibG9ja2xlbikgeworCQkvKiBGSVhNRTogYWRkIHN1cHBvcnQgb2YgdGhp
cyBjYXNlICovCisJCXByX2VycigiQnVmZmVyIGNvbnRhaW5zIG1vcmUgdGhhbiBvbmUgYmxvY2su
XG4iKTsKKwkJcmV0dXJuIC1FTk9NRU07CisJfQorCisJcmN0eC0+dG90YWwgPSBtaW4obmJ5dGVz
LCByY3R4LT50b3RhbCk7CisKKwlyZXR1cm4gMDsKK30KKworc3RhdGljIHZvaWQgc3RtMzJfaGFz
aF91bnByZXBhcmVfcmVxdWVzdChzdHJ1Y3QgYWhhc2hfcmVxdWVzdCAqcmVxKQoreworCXN0cnVj
dCBzdG0zMl9oYXNoX3JlcXVlc3RfY3R4ICpyY3R4ID0gYWhhc2hfcmVxdWVzdF9jdHgocmVxKTsK
KwlzdHJ1Y3Qgc3RtMzJfaGFzaF9zdGF0ZSAqc3RhdGUgPSAmcmN0eC0+c3RhdGU7CisJc3RydWN0
IHN0bTMyX2hhc2hfY3R4ICpjdHggPSBjcnlwdG9fYWhhc2hfY3R4KGNyeXB0b19haGFzaF9yZXF0
Zm0ocmVxKSk7CisJc3RydWN0IHN0bTMyX2hhc2hfZGV2ICpoZGV2ID0gc3RtMzJfaGFzaF9maW5k
X2RldihjdHgpOworCXUzMiAqcHJlZyA9IHN0YXRlLT5od19jb250ZXh0OworCWludCBzd2FwX3Jl
ZywgaTsKKworCWlmIChoZGV2LT5kbWFfbGNoKQorCQlkbWFlbmdpbmVfdGVybWluYXRlX3N5bmMo
aGRldi0+ZG1hX2xjaCk7CisKKwlpZiAoc3RhdGUtPmZsYWdzICYgSEFTSF9GTEFHU19TR1NfQ09Q
SUVEKQorCQlmcmVlX3BhZ2VzKCh1bnNpZ25lZCBsb25nKXNnX3ZpcnQocmN0eC0+c2cpLCBnZXRf
b3JkZXIocmN0eC0+c2ctPmxlbmd0aCkpOworCisJcmN0eC0+c2cgPSBOVUxMOworCXJjdHgtPm9m
ZnNldCA9IDA7CisKKwlzdGF0ZS0+ZmxhZ3MgJj0gfihIQVNIX0ZMQUdTX1NHU19DT1BJRUQpOwor
CisJaWYgKCEoaGRldi0+ZmxhZ3MgJiBIQVNIX0ZMQUdTX0lOSVQpKQorCQlnb3RvIHBtX3J1bnRp
bWU7CisKKwlzdGF0ZS0+ZmxhZ3MgfD0gSEFTSF9GTEFHU19JTklUOworCisJaWYgKHN0bTMyX2hh
c2hfd2FpdF9idXN5KGhkZXYpKSB7CisJCWRldl93YXJuKGhkZXYtPmRldiwgIldhaXQgYnVzeSBm
YWlsZWQuIik7CisJCXJldHVybjsKKwl9CisKKwlzd2FwX3JlZyA9IGhhc2hfc3dhcF9yZWcocmN0
eCk7CisKKwlpZiAoIWhkZXYtPnBkYXRhLT51eDUwMCkKKwkJKnByZWcrKyA9IHN0bTMyX2hhc2hf
cmVhZChoZGV2LCBIQVNIX0lNUik7CisJKnByZWcrKyA9IHN0bTMyX2hhc2hfcmVhZChoZGV2LCBI
QVNIX1NUUik7CisJKnByZWcrKyA9IHN0bTMyX2hhc2hfcmVhZChoZGV2LCBIQVNIX0NSKTsKKwlm
b3IgKGkgPSAwOyBpIDwgc3dhcF9yZWc7IGkrKykKKwkJKnByZWcrKyA9IHN0bTMyX2hhc2hfcmVh
ZChoZGV2LCBIQVNIX0NTUihpKSk7CisKK3BtX3J1bnRpbWU6CisJcG1fcnVudGltZV9tYXJrX2xh
c3RfYnVzeShoZGV2LT5kZXYpOworCXBtX3J1bnRpbWVfcHV0X2F1dG9zdXNwZW5kKGhkZXYtPmRl
dik7Cit9CisKIHN0YXRpYyBpbnQgc3RtMzJfaGFzaF9lbnF1ZXVlKHN0cnVjdCBhaGFzaF9yZXF1
ZXN0ICpyZXEsIHVuc2lnbmVkIGludCBvcCkKIHsKIAlzdHJ1Y3Qgc3RtMzJfaGFzaF9yZXF1ZXN0
X2N0eCAqcmN0eCA9IGFoYXNoX3JlcXVlc3RfY3R4KHJlcSk7CkBAIC0xMDcwLDE2ICsxMzkzLDI2
IEBAIHN0YXRpYyBpbnQgc3RtMzJfaGFzaF91cGRhdGUoc3RydWN0IGFoYXNoX3JlcXVlc3QgKnJl
cSkKIAlzdHJ1Y3Qgc3RtMzJfaGFzaF9yZXF1ZXN0X2N0eCAqcmN0eCA9IGFoYXNoX3JlcXVlc3Rf
Y3R4KHJlcSk7CiAJc3RydWN0IHN0bTMyX2hhc2hfc3RhdGUgKnN0YXRlID0gJnJjdHgtPnN0YXRl
OwogCi0JaWYgKCFyZXEtPm5ieXRlcyB8fCAhKHN0YXRlLT5mbGFncyAmIEhBU0hfRkxBR1NfQ1BV
KSkKKwlpZiAoIXJlcS0+bmJ5dGVzKQogCQlyZXR1cm4gMDsKIAotCXJjdHgtPnRvdGFsID0gcmVx
LT5uYnl0ZXM7Ci0JcmN0eC0+c2cgPSByZXEtPnNyYzsKLQlyY3R4LT5vZmZzZXQgPSAwOwogCi0J
aWYgKChzdGF0ZS0+YnVmY250ICsgcmN0eC0+dG90YWwgPCBzdGF0ZS0+YmxvY2tsZW4pKSB7Ci0J
CXN0bTMyX2hhc2hfYXBwZW5kX3NnKHJjdHgpOwotCQlyZXR1cm4gMDsKKwlpZiAoc3RhdGUtPmZs
YWdzICYgSEFTSF9GTEFHU19DUFUpIHsKKwkJcmN0eC0+dG90YWwgPSByZXEtPm5ieXRlczsKKwkJ
cmN0eC0+c2cgPSByZXEtPnNyYzsKKwkJcmN0eC0+b2Zmc2V0ID0gMDsKKworCQlpZiAoKHN0YXRl
LT5idWZjbnQgKyByY3R4LT50b3RhbCA8IHN0YXRlLT5ibG9ja2xlbikpIHsKKwkJCXN0bTMyX2hh
c2hfYXBwZW5kX3NnKHJjdHgpOworCQkJcmV0dXJuIDA7CisJCX0KKwl9IGVsc2UgeyAvKiBETUEg
bW9kZSAqLworCQlpZiAoc3RhdGUtPmJ1ZmNudCArIHJlcS0+bmJ5dGVzIDw9IHN0YXRlLT5ibG9j
a2xlbikgeworCQkJc2NhdHRlcndhbGtfbWFwX2FuZF9jb3B5KHN0YXRlLT5idWZmZXIgKyBzdGF0
ZS0+YnVmY250LCByZXEtPnNyYywKKwkJCQkJCSAwLCByZXEtPm5ieXRlcywgMCk7CisJCQlzdGF0
ZS0+YnVmY250ICs9IHJlcS0+bmJ5dGVzOworCQkJcmV0dXJuIDA7CisJCX0KIAl9CiAKIAlyZXR1
cm4gc3RtMzJfaGFzaF9lbnF1ZXVlKHJlcSwgSEFTSF9PUF9VUERBVEUpOwpAQCAtMTA5OCwyMCAr
MTQzMSwxOCBAQCBzdGF0aWMgaW50IHN0bTMyX2hhc2hfZmluYWwoc3RydWN0IGFoYXNoX3JlcXVl
c3QgKnJlcSkKIHN0YXRpYyBpbnQgc3RtMzJfaGFzaF9maW51cChzdHJ1Y3QgYWhhc2hfcmVxdWVz
dCAqcmVxKQogewogCXN0cnVjdCBzdG0zMl9oYXNoX3JlcXVlc3RfY3R4ICpyY3R4ID0gYWhhc2hf
cmVxdWVzdF9jdHgocmVxKTsKLQlzdHJ1Y3Qgc3RtMzJfaGFzaF9jdHggKmN0eCA9IGNyeXB0b19h
aGFzaF9jdHgoY3J5cHRvX2FoYXNoX3JlcXRmbShyZXEpKTsKLQlzdHJ1Y3Qgc3RtMzJfaGFzaF9k
ZXYgKmhkZXYgPSBzdG0zMl9oYXNoX2ZpbmRfZGV2KGN0eCk7CiAJc3RydWN0IHN0bTMyX2hhc2hf
c3RhdGUgKnN0YXRlID0gJnJjdHgtPnN0YXRlOwogCiAJaWYgKCFyZXEtPm5ieXRlcykKIAkJZ290
byBvdXQ7CiAKIAlzdGF0ZS0+ZmxhZ3MgfD0gSEFTSF9GTEFHU19GSU5VUDsKLQlyY3R4LT50b3Rh
bCA9IHJlcS0+bmJ5dGVzOwotCXJjdHgtPnNnID0gcmVxLT5zcmM7Ci0JcmN0eC0+b2Zmc2V0ID0g
MDsKIAotCWlmIChoZGV2LT5kbWFfbGNoICYmIHN0bTMyX2hhc2hfZG1hX2FsaWduZWRfZGF0YShy
ZXEpKQotCQlzdGF0ZS0+ZmxhZ3MgJj0gfkhBU0hfRkxBR1NfQ1BVOworCWlmICgoc3RhdGUtPmZs
YWdzICYgSEFTSF9GTEFHU19DUFUpKSB7CisJCXJjdHgtPnRvdGFsID0gcmVxLT5uYnl0ZXM7CisJ
CXJjdHgtPnNnID0gcmVxLT5zcmM7CisJCXJjdHgtPm9mZnNldCA9IDA7CisJfQogCiBvdXQ6CiAJ
cmV0dXJuIHN0bTMyX2hhc2hfZmluYWwocmVxKTsKQEAgLTEyMTUsNyArMTU0Niw2IEBAIHN0YXRp
YyBpbnQgc3RtMzJfaGFzaF9jcmFfc2hhM19obWFjX2luaXQoc3RydWN0IGNyeXB0b190Zm0gKnRm
bSkKIAkJCQkJSEFTSF9GTEFHU19ITUFDKTsKIH0KIAotCiBzdGF0aWMgdm9pZCBzdG0zMl9oYXNo
X2NyYV9leGl0KHN0cnVjdCBjcnlwdG9fdGZtICp0Zm0pCiB7CiAJc3RydWN0IHN0bTMyX2hhc2hf
Y3R4ICpjdHggPSBjcnlwdG9fdGZtX2N0eCh0Zm0pOwpAQCAtMTIyOCwxNCArMTU1OCw5IEBAIHN0
YXRpYyBpcnFyZXR1cm5fdCBzdG0zMl9oYXNoX2lycV90aHJlYWQoaW50IGlycSwgdm9pZCAqZGV2
X2lkKQogewogCXN0cnVjdCBzdG0zMl9oYXNoX2RldiAqaGRldiA9IGRldl9pZDsKIAotCWlmIChI
QVNIX0ZMQUdTX0NQVSAmIGhkZXYtPmZsYWdzKSB7Ci0JCWlmIChIQVNIX0ZMQUdTX09VVFBVVF9S
RUFEWSAmIGhkZXYtPmZsYWdzKSB7Ci0JCQloZGV2LT5mbGFncyAmPSB+SEFTSF9GTEFHU19PVVRQ
VVRfUkVBRFk7Ci0JCQlnb3RvIGZpbmlzaDsKLQkJfQotCX0gZWxzZSBpZiAoSEFTSF9GTEFHU19E
TUFfQUNUSVZFICYgaGRldi0+ZmxhZ3MpIHsKLQkJaGRldi0+ZmxhZ3MgJj0gfkhBU0hfRkxBR1Nf
RE1BX0FDVElWRTsKLQkJCWdvdG8gZmluaXNoOworCWlmIChIQVNIX0ZMQUdTX09VVFBVVF9SRUFE
WSAmIGhkZXYtPmZsYWdzKSB7CisJCWhkZXYtPmZsYWdzICY9IH5IQVNIX0ZMQUdTX09VVFBVVF9S
RUFEWTsKKwkJZ290byBmaW5pc2g7CiAJfQogCiAJcmV0dXJuIElSUV9IQU5ETEVEOwpAQCAtMjAw
NCw2ICsyMzI5LDcgQEAgc3RhdGljIGNvbnN0IHN0cnVjdCBzdG0zMl9oYXNoX3BkYXRhIHN0bTMy
X2hhc2hfcGRhdGFfc3RtMzJtcDEzID0gewogCS5hbGdzX2luZm9fc2l6ZQk9IEFSUkFZX1NJWkUo
c3RtMzJfaGFzaF9hbGdzX2luZm9fc3RtMzJtcDEzKSwKIAkuaGFzX3NyCQk9IHRydWUsCiAJLmhh
c19tZG1hdAk9IHRydWUsCisJLmNvbnRleHRfc2VjdXJlZCA9IHRydWUsCiB9OwogCiBzdGF0aWMg
Y29uc3Qgc3RydWN0IG9mX2RldmljZV9pZCBzdG0zMl9oYXNoX29mX21hdGNoW10gPSB7Ci0tIAoy
LjI1LjEKCl9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCkxp
bnV4LXN0bTMyIG1haWxpbmcgbGlzdApMaW51eC1zdG0zMkBzdC1tZC1tYWlsbWFuLnN0b3JtcmVw
bHkuY29tCmh0dHBzOi8vc3QtbWQtbWFpbG1hbi5zdG9ybXJlcGx5LmNvbS9tYWlsbWFuL2xpc3Rp
bmZvL2xpbnV4LXN0bTMyCg==
