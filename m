Return-Path: <linux-stm32-bounces@st-md-mailman.stormreply.com>
X-Original-To: lists+linux-stm32@lfdr.de
Delivered-To: lists+linux-stm32@lfdr.de
Received: from stm-ict-prod-mailman-01.stormreply.prv (st-md-mailman.stormreply.com [52.209.6.89])
	by mail.lfdr.de (Postfix) with ESMTPS id 65315A2E4F2
	for <lists+linux-stm32@lfdr.de>; Mon, 10 Feb 2025 08:03:08 +0100 (CET)
Received: from ip-172-31-3-47.eu-west-1.compute.internal (localhost [127.0.0.1])
	by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTP id 2AE07C78F80;
	Mon, 10 Feb 2025 07:03:08 +0000 (UTC)
Received: from mgamail.intel.com (mgamail.intel.com [192.198.163.19])
 (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTPS id 7E7A3C78F80
 for <linux-stm32@st-md-mailman.stormreply.com>;
 Mon, 10 Feb 2025 07:03:06 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
 d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
 t=1739170987; x=1770706987;
 h=from:to:subject:date:message-id:in-reply-to:references:
 mime-version:content-transfer-encoding;
 bh=zCBJ7RdtJmsgPoT7JcInOh+AhPPS26IzMEbkjPcT+t8=;
 b=R15mvnSQ5ucW3a9ZJHwn52gUBCC3Yc98ICxysFXyAFgmoFkCPsEth/3C
 Rn3PcxABj6nz7eZHafXwQOlg0+Z4c5rMfESikmVNH14Lil7AiNjFFZt8D
 jrOPJY3gSjWlQY8uqFaHqcGcIR0unzMb1NUAYCUKF66gPEJV6989R1uvy
 GQUrCxfNyu18TPec3/xYFvfiH88Wc6kWD6+2cBppqzzKoQDpxPn51prSk
 E/CsXfP+AcVcJUXGLYWAPqsGDys5Dw2HTRCu0YdpAmWGnYbgWK0Hu55FD
 24DvJGMRylaD0p5CAiUQLceeEYimOdjxkd1ZO2/LIG2Lyxxi8egE+XU7i g==;
X-CSE-ConnectionGUID: MDB5HT6VRA68yZiVyy/MoA==
X-CSE-MsgGUID: HmyuaMYFTDOfUBxqVb0QaQ==
X-IronPort-AV: E=McAfee;i="6700,10204,11340"; a="38938007"
X-IronPort-AV: E=Sophos;i="6.13,273,1732608000"; d="scan'208";a="38938007"
Received: from fmviesa010.fm.intel.com ([10.60.135.150])
 by fmvoesa113.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384;
 09 Feb 2025 23:03:02 -0800
X-CSE-ConnectionGUID: 8wFEhN3dS7uVNs7uIQ0njw==
X-CSE-MsgGUID: CJqQN2p9SJ22H93hgq+nGw==
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="6.13,273,1732608000"; d="scan'208";a="112622625"
Received: from mohdfai2-ilbpg12-1.png.intel.com ([10.88.227.73])
 by fmviesa010.fm.intel.com with ESMTP; 09 Feb 2025 23:02:53 -0800
From: Faizal Rahim <faizal.abdul.rahim@linux.intel.com>
To: Tony Nguyen <anthony.l.nguyen@intel.com>,
 Przemek Kitszel <przemyslaw.kitszel@intel.com>,
 Andrew Lunn <andrew+netdev@lunn.ch>,
 "David S . Miller" <davem@davemloft.net>,
 Eric Dumazet <edumazet@google.com>, Jakub Kicinski <kuba@kernel.org>,
 Paolo Abeni <pabeni@redhat.com>,
 Maxime Coquelin <mcoquelin.stm32@gmail.com>,
 Alexandre Torgue <alexandre.torgue@foss.st.com>,
 Simon Horman <horms@kernel.org>, Russell King <linux@armlinux.org.uk>,
 Alexei Starovoitov <ast@kernel.org>,
 Daniel Borkmann <daniel@iogearbox.net>,
 Jesper Dangaard Brouer <hawk@kernel.org>,
 John Fastabend <john.fastabend@gmail.com>, Furong Xu <0x1207@gmail.com>,
 Russell King <rmk+kernel@armlinux.org.uk>,
 Vladimir Oltean <vladimir.oltean@nxp.com>,
 Serge Semin <fancer.lancer@gmail.com>,
 Xiaolei Wang <xiaolei.wang@windriver.com>,
 Suraj Jaiswal <quic_jsuraj@quicinc.com>,
 Kory Maincent <kory.maincent@bootlin.com>, Gal Pressman <gal@nvidia.com>,
 Jesper Nilsson <jesper.nilsson@axis.com>,
 Andrew Halaney <ahalaney@redhat.com>,
 Choong Yong Liang <yong.liang.choong@linux.intel.com>,
 Faizal Rahim <faizal.abdul.rahim@linux.intel.com>,
 Kunihiko Hayashi <hayashi.kunihiko@socionext.com>,
 Vinicius Costa Gomes <vinicius.gomes@intel.com>,
 intel-wired-lan@lists.osuosl.org, netdev@vger.kernel.org,
 linux-kernel@vger.kernel.org, linux-stm32@st-md-mailman.stormreply.com,
 linux-arm-kernel@lists.infradead.org, bpf@vger.kernel.org
Date: Mon, 10 Feb 2025 02:02:03 -0500
Message-Id: <20250210070207.2615418-6-faizal.abdul.rahim@linux.intel.com>
X-Mailer: git-send-email 2.34.1
In-Reply-To: <20250210070207.2615418-1-faizal.abdul.rahim@linux.intel.com>
References: <20250210070207.2615418-1-faizal.abdul.rahim@linux.intel.com>
MIME-Version: 1.0
Subject: [Linux-stm32] [PATCH iwl-next v4 5/9] igc: Add support for frame
	preemption verification
X-BeenThere: linux-stm32@st-md-mailman.stormreply.com
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: <linux-stm32.st-md-mailman.stormreply.com>
List-Unsubscribe: <https://st-md-mailman.stormreply.com/mailman/options/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=unsubscribe>
List-Archive: <http://st-md-mailman.stormreply.com/pipermail/linux-stm32/>
List-Post: <mailto:linux-stm32@st-md-mailman.stormreply.com>
List-Help: <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=help>
List-Subscribe: <https://st-md-mailman.stormreply.com/mailman/listinfo/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: linux-stm32-bounces@st-md-mailman.stormreply.com
Sender: "Linux-stm32" <linux-stm32-bounces@st-md-mailman.stormreply.com>

VGhpcyBwYXRjaCBpbXBsZW1lbnRzIHRoZSAiZXRodG9vbCAtLXNldC1tbSIgY2FsbGJhY2sgdG8g
dHJpZ2dlciB0aGUKZnJhbWUgcHJlZW1wdGlvbiB2ZXJpZmljYXRpb24gaGFuZHNoYWtlLgoKVXNl
cyB0aGUgTUFDIE1lcmdlIFNvZnR3YXJlIFZlcmlmaWNhdGlvbiAobW1zdikgbWVjaGFuaXNtIGlu
IGV0aHRvb2wKdG8gcGVyZm9ybSB0aGUgdmVyaWZpY2F0aW9uIGhhbmRzaGFrZSBmb3IgaWdjLgpU
aGUgc3RydWN0dXJlIGZwZS5tbXN2IGlzIHNldCBieSBtbXN2IGluIGV0aHRvb2wgYW5kIHNob3Vs
ZCByZW1haW4KcmVhZC1vbmx5IGZvciB0aGUgZHJpdmVyLgoKT3RoZXIgbW1zdiBjYWxsYmFja3M6
CmEpIGNvbmZpZ3VyZV90eCgpIC0+IG5vdCB1c2VkIHlldCBhdCB0aGlzIHBvaW50CiAgIC0gaWdj
IGxhY2tzIHJlZ2lzdGVycyB0byBjb25maWd1cmUgRlBFIGluIHRoZSB0cmFuc21pdCBkaXJlY3Rp
b24sIHNvCiAgICAgdGhpcyBBUEkgaXMgbm90IHV0aWxpemVkIGZvciBub3cuIEEgZnV0dXJlIHBh
dGNoIHdpbGwgdXNlIGl0IHRvCiAgICAgY29udHJvbCBwcmVlbXB0aWJsZSBxdWV1ZSBjb25maWcu
CgpiKSBjb25maWd1cmVfcG1hYygpIC0+IG5vdCB1c2VkCiAgIC0gdGhpcyBjYWxsYmFjayBkeW5h
bWljYWxseSBjb250cm9scyBwbWFjX2VuYWJsZWQgYXQgcnVudGltZS4gRm9yCiAgICAgZXhhbXBs
ZSwgbW1zdiBjYWxscyBjb25maWd1cmVfcG1hYygpIGFuZCBkaXNhYmxlcyBwbWFjX2VuYWJsZWQg
d2hlbgogICAgIHRoZSBsaW5rIHBhcnRuZXIgZ29lcyBkb3duLCBldmVuIGlmIHRoZSB1c2VyIHBy
ZXZpb3VzbHkgZW5hYmxlZCBpdC4KICAgICBUaGUgaW50ZW50aW9uIGlzIHRvIHNhdmUgcG93ZXIg
YnV0IGl0IGlzIG5vdCBmZWFzaWJsZSBpbiBpZ2MKICAgICBiZWNhdXNlIGl0IGNhdXNlcyBhbiBl
bmRsZXNzIGFkYXB0ZXIgcmVzZXQgbG9vcDoKCgkgMSkgQm9hcmQgQSBhbmQgQm9hcmQgQiBjb21w
bGV0ZSB0aGUgdmVyaWZpY2F0aW9uIGhhbmRzaGFrZS4KICAgICAgICAgICAgVHggbW9kZSByZWdp
c3RlciBmb3IgYm90aCBib2FyZHMgYXJlIGluIFRTTiBtb2RlLgoJIDIpIEJvYXJkIEIgbGluayBn
b2VzIGRvd24uCgogICAgICAgICBPbiBCb2FyZCBBOgoJIDMpIG1tc3YgY2FsbHMgY29uZmlndXJl
X3BtYWMoKSB3aXRoIHBtYWNfZW5hYmxlZCA9IGZhbHNlLgoJIDQpIGNvbmZpZ3VyZV9wbWFjKCkg
aW4gaWdjIHVwZGF0ZXMgYSBuZXcgZmllbGQgYmFzZWQgb24KICAgICAgICAgICAgcG1hY19lbmFi
bGVkLiBEcml2ZXIgdXNlcyB0aGlzIGZpZWxkIGluIGlnY190c25fbmV3X2ZsYWdzKCkKICAgICAg
ICAgICAgdG8gaW5kaWNhdGUgdGhhdCB0aGUgdXNlciBlbmFibGVkL2Rpc2FibGVkIEZQRS4KCSA1
KSBjb25maWd1cmVfcG1hYygpIGluIGlnYyBjYWxscyBpZ2NfdHNuX29mZmxvYWRfYXBwbHkoKSB0
byBjaGVjawogICAgICAgICAgICB3aGV0aGVyIGFuIGFkYXB0ZXIgcmVzZXQgaXMgbmVlZGVkLiBD
YWxscyBleGlzdGluZyBsb2dpYyBpbgogICAgICAgICAgICBpZ2NfdHNuX3dpbGxfdHhfbW9kZV9j
aGFuZ2UoKSBhbmQgaWdjX3Rzbl9uZXdfZmxhZ3MoKS4KCSA2KSBTaW5jZSBwbWFjX2VuYWJsZWQg
aXMgbm93IGRpc2FibGVkIGFuZCBubyBvdGhlciBUU04gZmVhdHVyZQogICAgICAgICAgICBpcyBh
Y3RpdmUsIGlnY190c25fd2lsbF90eF9tb2RlX2NoYW5nZSgpIGV2YWx1YXRlcyB0byB0cnVlCiAg
ICAgICAgICAgIGJlY2F1c2UgVHggbW9kZSB3aWxsIHN3aXRjaCBmcm9tIFRTTiB0byBMZWdhY3ku
CgkgNykgRHJpdmVyIHJlc2V0cyB0aGUgYWRhcHRlci4KCSA4KSBSZWdpc3RlcnMgYXJlIHNldCwg
YW5kIFR4IG1vZGUgc3dpdGNoZXMgdG8gTGVnYWN5LgoJIDkpIFdoZW4gbGluayBwYXJ0bmVyIGlz
IHVwLCBzdGVwcyAz4oCTOCByZXBlYXQsIGJ1dCB0aGlzIHRpbWUKICAgICAgICAgICAgd2l0aCBw
bWFjX2VuYWJsZWQgPSB0cnVlLCByZWFjdGl2YXRpbmcgVFNOLgogICAgICAgICAgICBpZ2NfdHNu
X3dpbGxfdHhfbW9kZV9jaGFuZ2UoKSBldmFsdWF0ZXMgdG8gdHJ1ZSBhZ2FpbiwKICAgICAgICAg
ICAgc2luY2UgVHggbW9kZSB3aWxsIHN3aXRjaCBmcm9tIExlZ2FjeSB0byBUU04uCgkxMCkgRHJp
dmVyIHJlc2V0cyB0aGUgYWRhcHRlci4KCTExKSBSZXN0IGFkYXB0ZXIgY29tcGxldGVzLCByZWdp
c3RlcnMgYXJlIHNldCwgYW5kIFR4IG1vZGUKCSAgICBzd2l0Y2hlcyB0byBUU04uCgogICAgICAg
IE9uIEJvYXJkIEI6CgkxMikgQWRhcHRlciByZXNldCBvbiBCb2FyZCBBIGF0IHN0ZXAgMTAgY2F1
c2VzIGl0IHRvIGRldGVjdCBpdHMKICAgICAgICAgICAgbGluayBwYXJ0bmVyIGFzIGRvd24uCgkx
MykgUmVwZWF0cyBzdGVwcyAz4oCTOC4KCTE0KSBPbmNlIHJlc2V0IGFkYXB0ZXIgb24gQm9hcmQg
QSBpcyBjb21wbGV0ZWQgYXQgc3RlcCAxMSwgaXQKICAgICAgICAgICAgZGV0ZWN0cyBpdHMgbGlu
ayBwYXJ0bmVyIGFzIHVwLgoJMTUpIFJlcGVhdHMgc3RlcHMgOeKAkzExLgoKICAgLSB0aGlzIGN5
Y2xlIHJlcGVhdHMgaW5kZWZpbml0ZWx5LiBUbyBhdm9pZCB0aGlzIGlzc3VlLCBpZ2Mgb25seSB1
c2VzCiAgICAgbW1zdi5wbWFjX2VuYWJsZWQgdG8gdHJhY2sgd2hldGhlciBGUEUgaXMgZW5hYmxl
ZCBvciBkaXNhYmxlZC4KCkNvLWRldmVsb3BlZC1ieTogVmluaWNpdXMgQ29zdGEgR29tZXMgPHZp
bmljaXVzLmdvbWVzQGludGVsLmNvbT4KU2lnbmVkLW9mZi1ieTogVmluaWNpdXMgQ29zdGEgR29t
ZXMgPHZpbmljaXVzLmdvbWVzQGludGVsLmNvbT4KQ28tZGV2ZWxvcGVkLWJ5OiBDaG9vbmcgWW9u
ZyBMaWFuZyA8eW9uZy5saWFuZy5jaG9vbmdAbGludXguaW50ZWwuY29tPgpTaWduZWQtb2ZmLWJ5
OiBDaG9vbmcgWW9uZyBMaWFuZyA8eW9uZy5saWFuZy5jaG9vbmdAbGludXguaW50ZWwuY29tPgpT
aWduZWQtb2ZmLWJ5OiBGYWl6YWwgUmFoaW0gPGZhaXphbC5hYmR1bC5yYWhpbUBsaW51eC5pbnRl
bC5jb20+Ci0tLQogZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnYy5oICAgICAgICAg
fCAgMTIgKy0KIGRyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfYmFzZS5oICAgIHwg
ICAxICsKIGRyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfZGVmaW5lcy5oIHwgICA4
ICstCiBkcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2MvaWdjX2V0aHRvb2wuYyB8ICAyMSAr
KysKIGRyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfbWFpbi5jICAgIHwgIDU0ICsr
KysrKy0KIGRyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfdHNuLmMgICAgIHwgMTU2
ICsrKysrKysrKysrKysrKysrKy0KIGRyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2Nf
dHNuLmggICAgIHwgIDMzICsrKysKIDcgZmlsZXMgY2hhbmdlZCwgMjgwIGluc2VydGlvbnMoKyks
IDUgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEvZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwv
aWdjL2lnYy5oIGIvZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnYy5oCmluZGV4IDIy
ZWNkYWMyNmNmNC4uNzA1YmQ0NzM5ZTNiIDEwMDY0NAotLS0gYS9kcml2ZXJzL25ldC9ldGhlcm5l
dC9pbnRlbC9pZ2MvaWdjLmgKKysrIGIvZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2ln
Yy5oCkBAIC00MCw2ICs0MCwxMCBAQCB2b2lkIGlnY19ldGh0b29sX3NldF9vcHMoc3RydWN0IG5l
dF9kZXZpY2UgKik7CiAKICNkZWZpbmUgSUdDX01BWF9UWF9UU1RBTVBfUkVHUwkJNAogCitzdHJ1
Y3QgZnBlX3QgeworCXN0cnVjdCBldGh0b29sX21tc3YgbW1zdjsKK307CisKIGVudW0gaWdjX21h
Y19maWx0ZXJfdHlwZSB7CiAJSUdDX01BQ19GSUxURVJfVFlQRV9EU1QgPSAwLAogCUlHQ19NQUNf
RklMVEVSX1RZUEVfU1JDCkBAIC0zMzIsNiArMzM2LDggQEAgc3RydWN0IGlnY19hZGFwdGVyIHsK
IAkJc3RydWN0IHRpbWVzcGVjNjQgcGVyaW9kOwogCX0gcGVyb3V0W0lHQ19OX1BFUk9VVF07CiAK
KwlzdHJ1Y3QgZnBlX3QgZnBlOworCiAJLyogTEVEcyAqLwogCXN0cnVjdCBtdXRleCBsZWRfbXV0
ZXg7CiAJc3RydWN0IGlnY19sZWRfY2xhc3NkZXYgKmxlZHM7CkBAIC0zODksMTAgKzM5NSwxMSBA
QCBleHRlcm4gY2hhciBpZ2NfZHJpdmVyX25hbWVbXTsKICNkZWZpbmUgSUdDX0ZMQUdfVFNOX1FC
Vl9FTkFCTEVECUJJVCgxNykKICNkZWZpbmUgSUdDX0ZMQUdfVFNOX1FBVl9FTkFCTEVECUJJVCgx
OCkKICNkZWZpbmUgSUdDX0ZMQUdfVFNOX0xFR0FDWV9FTkFCTEVECUJJVCgxOSkKKyNkZWZpbmUg
SUdDX0ZMQUdfVFNOX1BSRUVNUFRfRU5BQkxFRAlCSVQoMjApCiAKICNkZWZpbmUgSUdDX0ZMQUdf
VFNOX0FOWV9FTkFCTEVECQkJCVwKIAkoSUdDX0ZMQUdfVFNOX1FCVl9FTkFCTEVEIHwgSUdDX0ZM
QUdfVFNOX1FBVl9FTkFCTEVEIHwJXAotCSBJR0NfRkxBR19UU05fTEVHQUNZX0VOQUJMRUQpCisJ
IElHQ19GTEFHX1RTTl9MRUdBQ1lfRU5BQkxFRCB8IElHQ19GTEFHX1RTTl9QUkVFTVBUX0VOQUJM
RUQpCiAKICNkZWZpbmUgSUdDX0ZMQUdfUlNTX0ZJRUxEX0lQVjRfVURQCUJJVCg2KQogI2RlZmlu
ZSBJR0NfRkxBR19SU1NfRklFTERfSVBWNl9VRFAJQklUKDcpCkBAIC03MzYsNyArNzQzLDEwIEBA
IHN0cnVjdCBpZ2NfbmZjX3J1bGUgKmlnY19nZXRfbmZjX3J1bGUoc3RydWN0IGlnY19hZGFwdGVy
ICphZGFwdGVyLAogCQkJCSAgICAgIHUzMiBsb2NhdGlvbik7CiBpbnQgaWdjX2FkZF9uZmNfcnVs
ZShzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIsIHN0cnVjdCBpZ2NfbmZjX3J1bGUgKnJ1bGUp
Owogdm9pZCBpZ2NfZGVsX25mY19ydWxlKHN0cnVjdCBpZ2NfYWRhcHRlciAqYWRhcHRlciwgc3Ry
dWN0IGlnY19uZmNfcnVsZSAqcnVsZSk7Cit2b2lkIGlnY19kaXNhYmxlX2VtcHR5X2FkZHJfcmVj
dihzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIpOworaW50IGlnY19lbmFibGVfZW1wdHlfYWRk
cl9yZWN2KHN0cnVjdCBpZ2NfYWRhcHRlciAqYWRhcHRlcik7CiBzdHJ1Y3QgaWdjX3JpbmcgKmln
Y19nZXRfdHhfcmluZyhzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIsIGludCBjcHUpOwordm9p
ZCBpZ2NfZmx1c2hfdHhfZGVzY3JpcHRvcnMoc3RydWN0IGlnY19yaW5nICpyaW5nKTsKIHZvaWQg
aWdjX3B0cF9pbml0KHN0cnVjdCBpZ2NfYWRhcHRlciAqYWRhcHRlcik7CiB2b2lkIGlnY19wdHBf
cmVzZXQoc3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVyKTsKIHZvaWQgaWdjX3B0cF9zdXNwZW5k
KHN0cnVjdCBpZ2NfYWRhcHRlciAqYWRhcHRlcik7CmRpZmYgLS1naXQgYS9kcml2ZXJzL25ldC9l
dGhlcm5ldC9pbnRlbC9pZ2MvaWdjX2Jhc2UuaCBiL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVs
L2lnYy9pZ2NfYmFzZS5oCmluZGV4IGJmOGNkZmJiYTlmZi4uNjMyMGVhYmI3MmZlIDEwMDY0NAot
LS0gYS9kcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2MvaWdjX2Jhc2UuaAorKysgYi9kcml2
ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2MvaWdjX2Jhc2UuaApAQCAtNDksNiArNDksNyBAQCBz
dHJ1Y3QgaWdjX2Fkdl90eF9jb250ZXh0X2Rlc2MgewogI2RlZmluZSBJR0NfQURWVFhEX0RDTURf
REVYVAkweDIwMDAwMDAwIC8qIERlc2NyaXB0b3IgZXh0ZW5zaW9uICgxPUFkdikgKi8KICNkZWZp
bmUgSUdDX0FEVlRYRF9EQ01EX1ZMRQkweDQwMDAwMDAwIC8qIFZMQU4gcGt0IGVuYWJsZSAqLwog
I2RlZmluZSBJR0NfQURWVFhEX0RDTURfVFNFCTB4ODAwMDAwMDAgLyogVENQIFNlZyBlbmFibGUg
Ki8KKyNkZWZpbmUgSUdDX0FEVlRYRF9QQVlMRU5fTUFTSwkwWEZGRkZDMDAwIC8qIEFkdiBkZXNj
IFBBWUxFTiBtYXNrICovCiAjZGVmaW5lIElHQ19BRFZUWERfUEFZTEVOX1NISUZUCTE0IC8qIEFk
diBkZXNjIFBBWUxFTiBzaGlmdCAqLwogCiAjZGVmaW5lIElHQ19SQVJfRU5UUklFUwkJMTYKZGlm
ZiAtLWdpdCBhL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfZGVmaW5lcy5oIGIv
ZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY19kZWZpbmVzLmgKaW5kZXggYjE5YWM2
ZjMwZGFjLi4yMmRiMWRlMDI5NjQgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvbmV0L2V0aGVybmV0L2lu
dGVsL2lnYy9pZ2NfZGVmaW5lcy5oCisrKyBiL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2ln
Yy9pZ2NfZGVmaW5lcy5oCkBAIC0zMDgsNiArMzA4LDggQEAKICNkZWZpbmUgSUdDX1RYRF9EVFlQ
X0MJCTB4MDAwMDAwMDAgLyogQ29udGV4dCBEZXNjcmlwdG9yICovCiAjZGVmaW5lIElHQ19UWERf
UE9QVFNfSVhTTQkweDAxICAgICAgIC8qIEluc2VydCBJUCBjaGVja3N1bSAqLwogI2RlZmluZSBJ
R0NfVFhEX1BPUFRTX1RYU00JMHgwMiAgICAgICAvKiBJbnNlcnQgVENQL1VEUCBjaGVja3N1bSAq
LworI2RlZmluZSBJR0NfVFhEX1BPUFRTX1NNRF9NQVNLCTB4MzAwMCAgICAgLyogSW5kaWNhdGVz
IHdoZXRoZXIgaXQncyBTTUQtViBvciBTTUQtUiAqLworCiAjZGVmaW5lIElHQ19UWERfQ01EX0VP
UAkJMHgwMTAwMDAwMCAvKiBFbmQgb2YgUGFja2V0ICovCiAjZGVmaW5lIElHQ19UWERfQ01EX0lD
CQkweDA0MDAwMDAwIC8qIEluc2VydCBDaGVja3N1bSAqLwogI2RlZmluZSBJR0NfVFhEX0NNRF9E
RVhUCTB4MjAwMDAwMDAgLyogRGVzYyBleHRlbnNpb24gKDAgPSBsZWdhY3kpICovCkBAIC0zNjMs
NiArMzY1LDggQEAKICNkZWZpbmUgSUdDX1NSUkNUTF9USU1FUjBTRUwodGltZXIpCSgoKHRpbWVy
KSAmIDB4MykgPDwgMTcpCiAKIC8qIFJlY2VpdmUgRGVzY3JpcHRvciBiaXQgZGVmaW5pdGlvbnMg
Ki8KKyNkZWZpbmUgSUdDX1JYRF9TVEFUX1NNRF9UWVBFX1YJMHgwMQkvKiBTTUQtViBQYWNrZXQg
Ki8KKyNkZWZpbmUgSUdDX1JYRF9TVEFUX1NNRF9UWVBFX1IJMHgwMgkvKiBTTUQtUiBQYWNrZXQg
Ki8KICNkZWZpbmUgSUdDX1JYRF9TVEFUX0VPUAkweDAyCS8qIEVuZCBvZiBQYWNrZXQgKi8KICNk
ZWZpbmUgSUdDX1JYRF9TVEFUX0lYU00JMHgwNAkvKiBJZ25vcmUgY2hlY2tzdW0gKi8KICNkZWZp
bmUgSUdDX1JYRF9TVEFUX1VEUENTCTB4MTAJLyogVURQIHhzdW0gY2FsY3VsYXRlZCAqLwpAQCAt
MzcyLDcgKzM3Niw4IEBACiAjZGVmaW5lIElHQ19SWERFWFRfU1RBVEVSUl9MQgkweDAwMDQwMDAw
CiAKIC8qIEFkdmFuY2VkIFJlY2VpdmUgRGVzY3JpcHRvciBiaXQgZGVmaW5pdGlvbnMgKi8KLSNk
ZWZpbmUgSUdDX1JYREFEVl9TVEFUX1RTSVAJMHgwODAwMCAvKiB0aW1lc3RhbXAgaW4gcGFja2V0
ICovCisjZGVmaW5lIElHQ19SWERBRFZfU1RBVF9TTURfVFlQRV9NQVNLCTB4MDYwMDAKKyNkZWZp
bmUgSUdDX1JYREFEVl9TVEFUX1RTSVAJCTB4MDgwMDAgLyogdGltZXN0YW1wIGluIHBhY2tldCAq
LwogCiAjZGVmaW5lIElHQ19SWERFWFRfU1RBVEVSUl9MNEUJCTB4MjAwMDAwMDAKICNkZWZpbmUg
SUdDX1JYREVYVF9TVEFURVJSX0lQRQkJMHg0MDAwMDAwMApAQCAtNTQzLDYgKzU0OCw3IEBACiAK
IC8qIFRyYW5zbWl0IFNjaGVkdWxpbmcgKi8KICNkZWZpbmUgSUdDX1RRQVZDVFJMX1RSQU5TTUlU
X01PREVfVFNOCTB4MDAwMDAwMDEKKyNkZWZpbmUgSUdDX1RRQVZDVFJMX1BSRUVNUFRfRU5BCTB4
MDAwMDAwMDIKICNkZWZpbmUgSUdDX1RRQVZDVFJMX0VOSEFOQ0VEX1FBVgkweDAwMDAwMDA4CiAj
ZGVmaW5lIElHQ19UUUFWQ1RSTF9GVVRTQ0RESVMJCTB4MDAwMDAwODAKIApkaWZmIC0tZ2l0IGEv
ZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY19ldGh0b29sLmMgYi9kcml2ZXJzL25l
dC9ldGhlcm5ldC9pbnRlbC9pZ2MvaWdjX2V0aHRvb2wuYwppbmRleCA4MTc4Mzg2Nzc4MTcuLmUy
YTE0ZWRmNzU1MiAxMDA2NDQKLS0tIGEvZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2ln
Y19ldGh0b29sLmMKKysrIGIvZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY19ldGh0
b29sLmMKQEAgLTgsNiArOCw3IEBACiAKICNpbmNsdWRlICJpZ2MuaCIKICNpbmNsdWRlICJpZ2Nf
ZGlhZy5oIgorI2luY2x1ZGUgImlnY190c24uaCIKIAogLyogZm9yd2FyZCBkZWNsYXJhdGlvbiAq
Lwogc3RydWN0IGlnY19zdGF0cyB7CkBAIC0xNzgxLDYgKzE3ODIsMjUgQEAgc3RhdGljIGludCBp
Z2NfZXRodG9vbF9zZXRfZWVlKHN0cnVjdCBuZXRfZGV2aWNlICpuZXRkZXYsCiAJcmV0dXJuIDA7
CiB9CiAKK3N0YXRpYyBpbnQgaWdjX2V0aHRvb2xfc2V0X21tKHN0cnVjdCBuZXRfZGV2aWNlICpu
ZXRkZXYsCisJCQkgICAgICBzdHJ1Y3QgZXRodG9vbF9tbV9jZmcgKmNtZCwKKwkJCSAgICAgIHN0
cnVjdCBuZXRsaW5rX2V4dF9hY2sgKmV4dGFjaykKK3sKKwlzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFk
YXB0ZXIgPSBuZXRkZXZfcHJpdihuZXRkZXYpOworCXN0cnVjdCBmcGVfdCAqZnBlID0gJmFkYXB0
ZXItPmZwZTsKKworCWlmIChmcGUtPm1tc3YucG1hY19lbmFibGVkICE9IGNtZC0+cG1hY19lbmFi
bGVkKSB7CisJCWlmIChjbWQtPnBtYWNfZW5hYmxlZCkKKwkJCXN0YXRpY19icmFuY2hfaW5jKCZp
Z2NfZnBlX2VuYWJsZWQpOworCQllbHNlCisJCQlzdGF0aWNfYnJhbmNoX2RlYygmaWdjX2ZwZV9l
bmFibGVkKTsKKwl9CisKKwlldGh0b29sX21tc3Zfc2V0X21tKCZmcGUtPm1tc3YsIGNtZCk7CisK
KwlyZXR1cm4gaWdjX3Rzbl9vZmZsb2FkX2FwcGx5KGFkYXB0ZXIpOworfQorCiBzdGF0aWMgaW50
IGlnY19ldGh0b29sX2dldF9saW5rX2tzZXR0aW5ncyhzdHJ1Y3QgbmV0X2RldmljZSAqbmV0ZGV2
LAogCQkJCQkgIHN0cnVjdCBldGh0b29sX2xpbmtfa3NldHRpbmdzICpjbWQpCiB7CkBAIC0yMDY4
LDYgKzIwODgsNyBAQCBzdGF0aWMgY29uc3Qgc3RydWN0IGV0aHRvb2xfb3BzIGlnY19ldGh0b29s
X29wcyA9IHsKIAkuc2V0X3J4ZmgJCT0gaWdjX2V0aHRvb2xfc2V0X3J4ZmgsCiAJLmdldF90c19p
bmZvCQk9IGlnY19ldGh0b29sX2dldF90c19pbmZvLAogCS5nZXRfY2hhbm5lbHMJCT0gaWdjX2V0
aHRvb2xfZ2V0X2NoYW5uZWxzLAorCS5zZXRfbW0JCQk9IGlnY19ldGh0b29sX3NldF9tbSwKIAku
c2V0X2NoYW5uZWxzCQk9IGlnY19ldGh0b29sX3NldF9jaGFubmVscywKIAkuZ2V0X3ByaXZfZmxh
Z3MJCT0gaWdjX2V0aHRvb2xfZ2V0X3ByaXZfZmxhZ3MsCiAJLnNldF9wcml2X2ZsYWdzCQk9IGln
Y19ldGh0b29sX3NldF9wcml2X2ZsYWdzLApkaWZmIC0tZ2l0IGEvZHJpdmVycy9uZXQvZXRoZXJu
ZXQvaW50ZWwvaWdjL2lnY19tYWluLmMgYi9kcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2Mv
aWdjX21haW4uYwppbmRleCA0NGU0ZjkyNTQ5MWYuLjdmZTY4NzVkN2JmNyAxMDA2NDQKLS0tIGEv
ZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY19tYWluLmMKKysrIGIvZHJpdmVycy9u
ZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY19tYWluLmMKQEAgLTI1MjksNyArMjUyOSw3IEBAIHN0
YXRpYyBpbnQgaWdjX3hkcF9ydW5fcHJvZyhzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIsIHN0
cnVjdCB4ZHBfYnVmZiAqeGRwKQogfQogCiAvKiBUaGlzIGZ1bmN0aW9uIGFzc3VtZXMgX19uZXRp
Zl90eF9sb2NrIGlzIGhlbGQgYnkgdGhlIGNhbGxlci4gKi8KLXN0YXRpYyB2b2lkIGlnY19mbHVz
aF90eF9kZXNjcmlwdG9ycyhzdHJ1Y3QgaWdjX3JpbmcgKnJpbmcpCit2b2lkIGlnY19mbHVzaF90
eF9kZXNjcmlwdG9ycyhzdHJ1Y3QgaWdjX3JpbmcgKnJpbmcpCiB7CiAJLyogT25jZSB0YWlsIHBv
aW50ZXIgaXMgdXBkYXRlZCwgaGFyZHdhcmUgY2FuIGZldGNoIHRoZSBkZXNjcmlwdG9ycwogCSAq
IGFueSB0aW1lIHNvIHdlIGlzc3VlIGEgd3JpdGUgbWVtYmFyIGhlcmUgdG8gZW5zdXJlIGFsbCBt
ZW1vcnkKQEAgLTI2MTgsNiArMjYxOCwxNiBAQCBzdGF0aWMgaW50IGlnY19jbGVhbl9yeF9pcnEo
c3RydWN0IGlnY19xX3ZlY3RvciAqcV92ZWN0b3IsIGNvbnN0IGludCBidWRnZXQpCiAJCQlzaXpl
IC09IElHQ19UU19IRFJfTEVOOwogCQl9CiAKKwkJaWYgKHN0YXRpY19icmFuY2hfdW5saWtlbHko
JmlnY19mcGVfZW5hYmxlZCkgJiYKKwkJICAgIGFkYXB0ZXItPmZwZS5tbXN2LnBtYWNfZW5hYmxl
ZCAmJgorCQkgICAgaWdjX2ZwZV9pc192ZXJpZnlfb3JfcmVzcG9uc2UocnhfZGVzYywgc2l6ZSkp
IHsKKwkJCWlnY19mcGVfbHBfZXZlbnRfc3RhdHVzKHJ4X2Rlc2MsICZhZGFwdGVyLT5mcGUubW1z
dik7CisJCQkvKiBBZHZhbmNlIHRoZSByaW5nIG5leHQtdG8tY2xlYW4gKi8KKwkJCWlnY19pc19u
b25fZW9wKHJ4X3JpbmcsIHJ4X2Rlc2MpOworCQkJY2xlYW5lZF9jb3VudCsrOworCQkJY29udGlu
dWU7CisJCX0KKwogCQlpZiAoIXNrYikgewogCQkJeGRwX2luaXRfYnVmZigmY3R4LnhkcCwgdHJ1
ZXNpemUsICZyeF9yaW5nLT54ZHBfcnhxKTsKIAkJCXhkcF9wcmVwYXJlX2J1ZmYoJmN0eC54ZHAs
IHBrdGJ1ZiAtIGlnY19yeF9vZmZzZXQocnhfcmluZyksCkBAIC0zMDY1LDYgKzMwNzUsMTEgQEAg
c3RhdGljIGJvb2wgaWdjX2NsZWFuX3R4X2lycShzdHJ1Y3QgaWdjX3FfdmVjdG9yICpxX3ZlY3Rv
ciwgaW50IG5hcGlfYnVkZ2V0KQogCQlpZiAoIShlb3BfZGVzYy0+d2Iuc3RhdHVzICYgY3B1X3Rv
X2xlMzIoSUdDX1RYRF9TVEFUX0REKSkpCiAJCQlicmVhazsKIAorCQlpZiAoc3RhdGljX2JyYW5j
aF91bmxpa2VseSgmaWdjX2ZwZV9lbmFibGVkKSAmJgorCQkgICAgaWdjX2ZwZV90cmFuc21pdHRl
ZF9zbWRfdih0eF9kZXNjKSkKKwkJCWV0aHRvb2xfbW1zdl9ldmVudF9oYW5kbGUoJmFkYXB0ZXIt
PmZwZS5tbXN2LAorCQkJCQkJICBFVEhUT09MX01NU1ZfTERfU0VOVF9WRVJJRllfTVBBQ0tFVCk7
CisKIAkJLyogSG9sZCB0aGUgY29tcGxldGlvbnMgd2hpbGUgdGhlcmUncyBhIHBlbmRpbmcgdHgg
aGFyZHdhcmUKIAkJICogdGltZXN0YW1wIHJlcXVlc3QgZnJvbSBYRFAgVHggbWV0YWRhdGEuCiAJ
CSAqLwpAQCAtMzk1Niw2ICszOTcxLDMwIEBAIHN0YXRpYyBpbnQgaWdjX3VjX3Vuc3luYyhzdHJ1
Y3QgbmV0X2RldmljZSAqbmV0ZGV2LCBjb25zdCB1bnNpZ25lZCBjaGFyICphZGRyKQogCXJldHVy
biAwOwogfQogCisvKioKKyAqIGlnY19lbmFibGVfZW1wdHlfYWRkcl9yZWN2IC0gRW5hYmxlIHJ4
IG9mIHBhY2tldHMgd2l0aCBhbGwtemVyb2VzIE1BQyBhZGRyZXNzCisgKiBAYWRhcHRlcjogUG9p
bnRlciB0byB0aGUgaWdjX2FkYXB0ZXIgc3RydWN0dXJlLgorICoKKyAqIEZyYW1lIHByZWVtcHRp
b24gdmVyaWZpY2F0aW9uIHJlcXVpcmVzIHRoYXQgcGFja2V0cyB3aXRoIHRoZSBhbGwtemVyb2Vz
CisgKiBNQUMgYWRkcmVzcyBhcmUgYWxsb3dlZCB0byBiZSByZWNlaXZlZCBieSBJR0MuIFRoaXMg
ZnVuY3Rpb24gYWRkcyB0aGUKKyAqIGFsbC16ZXJvZXMgZGVzdGluYXRpb24gYWRkcmVzcyB0byB0
aGUgbGlzdCBvZiBhY2NlcHRhYmxlIGFkZHJlc3Nlcy4KKyAqCisgKiBSZXR1cm46IDAgb24gc3Vj
Y2VzcywgbmVnYXRpdmUgdmFsdWUgb3RoZXJ3aXNlLgorICovCitpbnQgaWdjX2VuYWJsZV9lbXB0
eV9hZGRyX3JlY3Yoc3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVyKQoreworCXU4IGVtcHR5W0VU
SF9BTEVOXSA9IHsgfTsKKworCXJldHVybiBpZ2NfYWRkX21hY19maWx0ZXIoYWRhcHRlciwgSUdD
X01BQ19GSUxURVJfVFlQRV9EU1QsIGVtcHR5LCAtMSk7Cit9CisKK3ZvaWQgaWdjX2Rpc2FibGVf
ZW1wdHlfYWRkcl9yZWN2KHN0cnVjdCBpZ2NfYWRhcHRlciAqYWRhcHRlcikKK3sKKwl1OCBlbXB0
eVtFVEhfQUxFTl0gPSB7IH07CisKKwlpZ2NfZGVsX21hY19maWx0ZXIoYWRhcHRlciwgSUdDX01B
Q19GSUxURVJfVFlQRV9EU1QsIGVtcHR5KTsKK30KKwogLyoqCiAgKiBpZ2Nfc2V0X3J4X21vZGUg
LSBTZWNvbmRhcnkgVW5pY2FzdCwgTXVsdGljYXN0IGFuZCBQcm9taXNjdW91cyBtb2RlIHNldAog
ICogQG5ldGRldjogbmV0d29yayBpbnRlcmZhY2UgZGV2aWNlIHN0cnVjdHVyZQpAQCAtNTIzMSw2
ICs1MjcwLDkgQEAgdm9pZCBpZ2NfZG93bihzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIpCiAJ
aWdjX2Rpc2FibGVfYWxsX3R4X3JpbmdzX2h3KGFkYXB0ZXIpOwogCWlnY19jbGVhbl9hbGxfdHhf
cmluZ3MoYWRhcHRlcik7CiAJaWdjX2NsZWFuX2FsbF9yeF9yaW5ncyhhZGFwdGVyKTsKKworCWlm
IChhZGFwdGVyLT5mcGUubW1zdi5wbWFjX2VuYWJsZWQpCisJCWV0aHRvb2xfbW1zdl9zdG9wKCZh
ZGFwdGVyLT5mcGUubW1zdik7CiB9CiAKIHZvaWQgaWdjX3JlaW5pdF9sb2NrZWQoc3RydWN0IGln
Y19hZGFwdGVyICphZGFwdGVyKQpAQCAtNTc1NSw2ICs1Nzk3LDEwIEBAIHN0YXRpYyB2b2lkIGln
Y193YXRjaGRvZ190YXNrKHN0cnVjdCB3b3JrX3N0cnVjdCAqd29yaykKIAkJCSAqLwogCQkJaWdj
X3Rzbl9hZGp1c3RfdHh0aW1lX29mZnNldChhZGFwdGVyKTsKIAorCQkJaWYgKGFkYXB0ZXItPmZw
ZS5tbXN2LnBtYWNfZW5hYmxlZCkKKwkJCQlldGh0b29sX21tc3ZfbGlua19zdGF0ZV9oYW5kbGUo
JmFkYXB0ZXItPmZwZS5tbXN2LAorCQkJCQkJCSAgICAgICB0cnVlKTsKKwogCQkJaWYgKGFkYXB0
ZXItPmxpbmtfc3BlZWQgIT0gU1BFRURfMTAwMCkKIAkJCQlnb3RvIG5vX3dhaXQ7CiAKQEAgLTU3
OTAsNiArNTgzNiwxMCBAQCBzdGF0aWMgdm9pZCBpZ2Nfd2F0Y2hkb2dfdGFzayhzdHJ1Y3Qgd29y
a19zdHJ1Y3QgKndvcmspCiAJCQluZXRkZXZfaW5mbyhuZXRkZXYsICJOSUMgTGluayBpcyBEb3du
XG4iKTsKIAkJCW5ldGlmX2NhcnJpZXJfb2ZmKG5ldGRldik7CiAKKwkJCWlmIChhZGFwdGVyLT5m
cGUubW1zdi5wbWFjX2VuYWJsZWQpCisJCQkJZXRodG9vbF9tbXN2X2xpbmtfc3RhdGVfaGFuZGxl
KCZhZGFwdGVyLT5mcGUubW1zdiwKKwkJCQkJCQkgICAgICAgZmFsc2UpOworCiAJCQkvKiBsaW5r
IHN0YXRlIGhhcyBjaGFuZ2VkLCBzY2hlZHVsZSBwaHkgaW5mbyB1cGRhdGUgKi8KIAkJCWlmICgh
dGVzdF9iaXQoX19JR0NfRE9XTiwgJmFkYXB0ZXItPnN0YXRlKSkKIAkJCQltb2RfdGltZXIoJmFk
YXB0ZXItPnBoeV9pbmZvX3RpbWVyLApAQCAtNzExMCw2ICs3MTYwLDggQEAgc3RhdGljIGludCBp
Z2NfcHJvYmUoc3RydWN0IHBjaV9kZXYgKnBkZXYsCiAKIAlpZ2NfdHNuX2NsZWFyX3NjaGVkdWxl
KGFkYXB0ZXIpOwogCisJaWdjX2ZwZV9pbml0KGFkYXB0ZXIpOworCiAJLyogcmVzZXQgdGhlIGhh
cmR3YXJlIHdpdGggdGhlIG5ldyBzZXR0aW5ncyAqLwogCWlnY19yZXNldChhZGFwdGVyKTsKIApk
aWZmIC0tZ2l0IGEvZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY190c24uYyBiL2Ry
aXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfdHNuLmMKaW5kZXggZjAyMTNjZmNlMDdk
Li5kYzM1ZDQwOTU1YzkgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2ln
Yy9pZ2NfdHNuLmMKKysrIGIvZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY190c24u
YwpAQCAtMSwxMCArMSwxNDkgQEAKIC8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBHUEwtMi4w
CiAvKiBDb3B5cmlnaHQgKGMpICAyMDE5IEludGVsIENvcnBvcmF0aW9uICovCiAKKyNpbmNsdWRl
IDxsaW51eC9rZXJuZWwuaD4KICNpbmNsdWRlICJpZ2MuaCIKKyNpbmNsdWRlICJpZ2NfYmFzZS5o
IgogI2luY2x1ZGUgImlnY19ody5oIgogI2luY2x1ZGUgImlnY190c24uaCIKIAorZW51bSBpZ2Nf
dHhkX3BvcHRzX3R5cGUgeworCVNNRF9WID0gMHgwMSwKKwlTTURfUiA9IDB4MDIKK307CisKK0RF
RklORV9TVEFUSUNfS0VZX0ZBTFNFKGlnY19mcGVfZW5hYmxlZCk7CisKK3N0YXRpYyBpbnQgaWdj
X2ZwZV9pbml0X3NtZF9mcmFtZShzdHJ1Y3QgaWdjX3JpbmcgKnJpbmcsCisJCQkJICBzdHJ1Y3Qg
aWdjX3R4X2J1ZmZlciAqYnVmZmVyLAorCQkJCSAgc3RydWN0IHNrX2J1ZmYgKnNrYikKK3sKKwlk
bWFfYWRkcl90IGRtYSA9IGRtYV9tYXBfc2luZ2xlKHJpbmctPmRldiwgc2tiLT5kYXRhLCBza2It
PmxlbiwKKwkJCQkJRE1BX1RPX0RFVklDRSk7CisKKwlpZiAoZG1hX21hcHBpbmdfZXJyb3Iocmlu
Zy0+ZGV2LCBkbWEpKSB7CisJCW5ldGRldl9lcnJfb25jZShyaW5nLT5uZXRkZXYsICJGYWlsZWQg
dG8gbWFwIERNQSBmb3IgVFhcbiIpOworCQlyZXR1cm4gLUVOT01FTTsKKwl9CisKKwlidWZmZXIt
PnNrYiA9IHNrYjsKKwlidWZmZXItPnByb3RvY29sID0gMDsKKwlidWZmZXItPmJ5dGVjb3VudCA9
IHNrYi0+bGVuOworCWJ1ZmZlci0+Z3NvX3NlZ3MgPSAxOworCWJ1ZmZlci0+dGltZV9zdGFtcCA9
IGppZmZpZXM7CisJZG1hX3VubWFwX2xlbl9zZXQoYnVmZmVyLCBsZW4sIHNrYi0+bGVuKTsKKwlk
bWFfdW5tYXBfYWRkcl9zZXQoYnVmZmVyLCBkbWEsIGRtYSk7CisKKwlyZXR1cm4gMDsKK30KKwor
c3RhdGljIGludCBpZ2NfZnBlX2luaXRfdHhfZGVzY3JpcHRvcihzdHJ1Y3QgaWdjX3JpbmcgKnJp
bmcsCisJCQkJICAgICAgc3RydWN0IHNrX2J1ZmYgKnNrYiwKKwkJCQkgICAgICBlbnVtIGlnY190
eGRfcG9wdHNfdHlwZSB0eXBlKQoreworCXUzMiBjbWRfdHlwZSwgb2xpbmZvX3N0YXR1cyA9IDA7
CisJc3RydWN0IGlnY190eF9idWZmZXIgKmJ1ZmZlcjsKKwl1bmlvbiBpZ2NfYWR2X3R4X2Rlc2Mg
KmRlc2M7CisJaW50IGVycjsKKworCWlmICghaWdjX2Rlc2NfdW51c2VkKHJpbmcpKQorCQlyZXR1
cm4gLUVCVVNZOworCisJYnVmZmVyID0gJnJpbmctPnR4X2J1ZmZlcl9pbmZvW3JpbmctPm5leHRf
dG9fdXNlXTsKKwllcnIgPSBpZ2NfZnBlX2luaXRfc21kX2ZyYW1lKHJpbmcsIGJ1ZmZlciwgc2ti
KTsKKwlpZiAoZXJyKQorCQlyZXR1cm4gZXJyOworCisJY21kX3R5cGUgPSBJR0NfQURWVFhEX0RU
WVBfREFUQSB8IElHQ19BRFZUWERfRENNRF9ERVhUIHwKKwkJICAgSUdDX0FEVlRYRF9EQ01EX0lG
Q1MgfCBJR0NfVFhEX0RDTUQgfAorCQkgICBidWZmZXItPmJ5dGVjb3VudDsKKworCW9saW5mb19z
dGF0dXMgfD0gRklFTERfUFJFUChJR0NfQURWVFhEX1BBWUxFTl9NQVNLLCBidWZmZXItPmJ5dGVj
b3VudCk7CisKKwlzd2l0Y2ggKHR5cGUpIHsKKwljYXNlIFNNRF9WOgorCWNhc2UgU01EX1I6CisJ
CW9saW5mb19zdGF0dXMgfD0gRklFTERfUFJFUChJR0NfVFhEX1BPUFRTX1NNRF9NQVNLLCB0eXBl
KTsKKwkJYnJlYWs7CisJfQorCisJZGVzYyA9IElHQ19UWF9ERVNDKHJpbmcsIHJpbmctPm5leHRf
dG9fdXNlKTsKKwlkZXNjLT5yZWFkLmNtZF90eXBlX2xlbiA9IGNwdV90b19sZTMyKGNtZF90eXBl
KTsKKwlkZXNjLT5yZWFkLm9saW5mb19zdGF0dXMgPSBjcHVfdG9fbGUzMihvbGluZm9fc3RhdHVz
KTsKKwlkZXNjLT5yZWFkLmJ1ZmZlcl9hZGRyID0gY3B1X3RvX2xlNjQoZG1hX3VubWFwX2FkZHIo
YnVmZmVyLCBkbWEpKTsKKworCW5ldGRldl90eF9zZW50X3F1ZXVlKHR4cmluZ190eHEocmluZyks
IHNrYi0+bGVuKTsKKworCWJ1ZmZlci0+bmV4dF90b193YXRjaCA9IGRlc2M7CisJcmluZy0+bmV4
dF90b191c2UgPSAocmluZy0+bmV4dF90b191c2UgKyAxKSAlIHJpbmctPmNvdW50OworCisJcmV0
dXJuIDA7Cit9CisKK2Jvb2wgaWdjX2ZwZV90cmFuc21pdHRlZF9zbWRfdih1bmlvbiBpZ2NfYWR2
X3R4X2Rlc2MgKnR4X2Rlc2MpCit7CisJdTggc21kID0gRklFTERfR0VUKElHQ19UWERfUE9QVFNf
U01EX01BU0ssIHR4X2Rlc2MtPnJlYWQub2xpbmZvX3N0YXR1cyk7CisKKwlyZXR1cm4gc21kID09
IFNNRF9WOworfQorCitzdGF0aWMgaW50IGlnY19mcGVfeG1pdF9zbWRfZnJhbWUoc3RydWN0IGln
Y19hZGFwdGVyICphZGFwdGVyLAorCQkJCSAgZW51bSBpZ2NfdHhkX3BvcHRzX3R5cGUgdHlwZSkK
K3sKKwlpbnQgY3B1ID0gc21wX3Byb2Nlc3Nvcl9pZCgpOworCXN0cnVjdCBuZXRkZXZfcXVldWUg
Km5xOworCXN0cnVjdCBpZ2NfcmluZyAqcmluZzsKKwlzdHJ1Y3Qgc2tfYnVmZiAqc2tiOworCWlu
dCBlcnI7CisKKwlyaW5nID0gaWdjX2dldF90eF9yaW5nKGFkYXB0ZXIsIGNwdSk7CisJbnEgPSB0
eHJpbmdfdHhxKHJpbmcpOworCisJc2tiID0gYWxsb2Nfc2tiKFNNRF9GUkFNRV9TSVpFLCBHRlBf
S0VSTkVMKTsKKwlpZiAoIXNrYikKKwkJcmV0dXJuIC1FTk9NRU07CisKKwlza2JfcHV0X3plcm8o
c2tiLCBTTURfRlJBTUVfU0laRSk7CisKKwlfX25ldGlmX3R4X2xvY2sobnEsIGNwdSk7CisKKwll
cnIgPSBpZ2NfZnBlX2luaXRfdHhfZGVzY3JpcHRvcihyaW5nLCBza2IsIHR5cGUpOworCWlnY19m
bHVzaF90eF9kZXNjcmlwdG9ycyhyaW5nKTsKKworCV9fbmV0aWZfdHhfdW5sb2NrKG5xKTsKKwor
CXJldHVybiBlcnI7Cit9CisKK3N0YXRpYyB2b2lkIGlnY19mcGVfc2VuZF9tcGFja2V0KHN0cnVj
dCBldGh0b29sX21tc3YgKm1tc3YsCisJCQkJIGVudW0gZXRodG9vbF9tcGFja2V0IHR5cGUpCit7
CisJc3RydWN0IGZwZV90ICpmcGUgPSBjb250YWluZXJfb2YobW1zdiwgc3RydWN0IGZwZV90LCBt
bXN2KTsKKwlzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXI7CisJaW50IGVycjsKKworCWFkYXB0
ZXIgPSBjb250YWluZXJfb2YoZnBlLCBzdHJ1Y3QgaWdjX2FkYXB0ZXIsIGZwZSk7CisKKwlpZiAo
dHlwZSA9PSBFVEhUT09MX01QQUNLRVRfVkVSSUZZKSB7CisJCWVyciA9IGlnY19mcGVfeG1pdF9z
bWRfZnJhbWUoYWRhcHRlciwgU01EX1YpOworCQlpZiAoZXJyICYmIG5ldF9yYXRlbGltaXQoKSkK
KwkJCW5ldGRldl9lcnIoYWRhcHRlci0+bmV0ZGV2LCAiRXJyb3Igc2VuZGluZyBTTUQtVlxuIik7
CisJfSBlbHNlIGlmICh0eXBlID09IEVUSFRPT0xfTVBBQ0tFVF9SRVNQT05TRSkgeworCQllcnIg
PSBpZ2NfZnBlX3htaXRfc21kX2ZyYW1lKGFkYXB0ZXIsIFNNRF9SKTsKKwkJaWYgKGVyciAmJiBu
ZXRfcmF0ZWxpbWl0KCkpCisJCQluZXRkZXZfZXJyKGFkYXB0ZXItPm5ldGRldiwgIkVycm9yIHNl
bmRpbmcgU01ELVIgZnJhbWVcbiIpOworCX0KK30KKworc3RhdGljIGNvbnN0IHN0cnVjdCBldGh0
b29sX21tc3Zfb3BzIGlnY19tbXN2X29wcyA9IHsKKwkuc2VuZF9tcGFja2V0ID0gaWdjX2ZwZV9z
ZW5kX21wYWNrZXQsCit9OworCit2b2lkIGlnY19mcGVfaW5pdChzdHJ1Y3QgaWdjX2FkYXB0ZXIg
KmFkYXB0ZXIpCit7CisJZXRodG9vbF9tbXN2X2luaXQoJmFkYXB0ZXItPmZwZS5tbXN2LCBhZGFw
dGVyLT5uZXRkZXYsICZpZ2NfbW1zdl9vcHMpOworfQorCiBzdGF0aWMgYm9vbCBpc19hbnlfbGF1
bmNodGltZShzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIpCiB7CiAJaW50IGk7CkBAIC00OSw2
ICsxODgsOSBAQCBzdGF0aWMgdW5zaWduZWQgaW50IGlnY190c25fbmV3X2ZsYWdzKHN0cnVjdCBp
Z2NfYWRhcHRlciAqYWRhcHRlcikKIAlpZiAoYWRhcHRlci0+c3RyaWN0X3ByaW9yaXR5X2VuYWJs
ZSkKIAkJbmV3X2ZsYWdzIHw9IElHQ19GTEFHX1RTTl9MRUdBQ1lfRU5BQkxFRDsKIAorCWlmIChh
ZGFwdGVyLT5mcGUubW1zdi5wbWFjX2VuYWJsZWQpCisJCW5ld19mbGFncyB8PSBJR0NfRkxBR19U
U05fUFJFRU1QVF9FTkFCTEVEOworCiAJcmV0dXJuIG5ld19mbGFnczsKIH0KIApAQCAtMTQ4LDcg
KzI5MCw4IEBAIHN0YXRpYyBpbnQgaWdjX3Rzbl9kaXNhYmxlX29mZmxvYWQoc3RydWN0IGlnY19h
ZGFwdGVyICphZGFwdGVyKQogCiAJdHFhdmN0cmwgPSByZDMyKElHQ19UUUFWQ1RSTCk7CiAJdHFh
dmN0cmwgJj0gfihJR0NfVFFBVkNUUkxfVFJBTlNNSVRfTU9ERV9UU04gfAotCQkgICAgICBJR0Nf
VFFBVkNUUkxfRU5IQU5DRURfUUFWIHwgSUdDX1RRQVZDVFJMX0ZVVFNDRERJUyk7CisJCSAgICAg
IElHQ19UUUFWQ1RSTF9FTkhBTkNFRF9RQVYgfCBJR0NfVFFBVkNUUkxfRlVUU0NERElTIHwKKwkJ
ICAgICAgSUdDX1RRQVZDVFJMX1BSRUVNUFRfRU5BKTsKIAogCXdyMzIoSUdDX1RRQVZDVFJMLCB0
cWF2Y3RybCk7CiAKQEAgLTM3MCwxMCArNTEzLDE0IEBAIHN0YXRpYyBpbnQgaWdjX3Rzbl9lbmFi
bGVfb2ZmbG9hZChzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIpCiAJCXdyMzIoSUdDX1RYUUNU
TChpKSwgdHhxY3RsKTsKIAl9CiAKLQl0cWF2Y3RybCA9IHJkMzIoSUdDX1RRQVZDVFJMKSAmIH5J
R0NfVFFBVkNUUkxfRlVUU0NERElTOworCXRxYXZjdHJsID0gcmQzMihJR0NfVFFBVkNUUkwpICYg
fihJR0NfVFFBVkNUUkxfRlVUU0NERElTIHwKKwkJICAgSUdDX1RRQVZDVFJMX1BSRUVNUFRfRU5B
KTsKIAogCXRxYXZjdHJsIHw9IElHQ19UUUFWQ1RSTF9UUkFOU01JVF9NT0RFX1RTTiB8IElHQ19U
UUFWQ1RSTF9FTkhBTkNFRF9RQVY7CiAKKwlpZiAoYWRhcHRlci0+ZnBlLm1tc3YucG1hY19lbmFi
bGVkKQorCQl0cWF2Y3RybCB8PSBJR0NfVFFBVkNUUkxfUFJFRU1QVF9FTkE7CisKIAlhZGFwdGVy
LT5xYnZfY291bnQrKzsKIAogCWN5Y2xlID0gYWRhcHRlci0+Y3ljbGVfdGltZTsKQEAgLTQzNCw2
ICs1ODEsMTEgQEAgaW50IGlnY190c25fcmVzZXQoc3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVy
KQogCXVuc2lnbmVkIGludCBuZXdfZmxhZ3M7CiAJaW50IGVyciA9IDA7CiAKKwlpZiAoYWRhcHRl
ci0+ZnBlLm1tc3YucG1hY19lbmFibGVkKQorCQlpZ2NfZW5hYmxlX2VtcHR5X2FkZHJfcmVjdihh
ZGFwdGVyKTsKKwllbHNlCisJCWlnY19kaXNhYmxlX2VtcHR5X2FkZHJfcmVjdihhZGFwdGVyKTsK
KwogCW5ld19mbGFncyA9IGlnY190c25fbmV3X2ZsYWdzKGFkYXB0ZXIpOwogCiAJaWYgKCEobmV3
X2ZsYWdzICYgSUdDX0ZMQUdfVFNOX0FOWV9FTkFCTEVEKSkKZGlmZiAtLWdpdCBhL2RyaXZlcnMv
bmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfdHNuLmggYi9kcml2ZXJzL25ldC9ldGhlcm5ldC9p
bnRlbC9pZ2MvaWdjX3Rzbi5oCmluZGV4IDk4ZWM4NDVhODZiZi4uODg5ZDcwYzZkODI3IDEwMDY0
NAotLS0gYS9kcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2MvaWdjX3Rzbi5oCisrKyBiL2Ry
aXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfdHNuLmgKQEAgLTQsOSArNCw0MiBAQAog
I2lmbmRlZiBfSUdDX1RTTl9IXwogI2RlZmluZSBfSUdDX1RTTl9IXwogCisjZGVmaW5lIFNNRF9G
UkFNRV9TSVpFCQkJNjAKKworREVDTEFSRV9TVEFUSUNfS0VZX0ZBTFNFKGlnY19mcGVfZW5hYmxl
ZCk7CisKK3ZvaWQgaWdjX2ZwZV9pbml0KHN0cnVjdCBpZ2NfYWRhcHRlciAqYWRhcHRlcik7Cit1
MzIgaWdjX2ZwZV9nZXRfc3VwcG9ydGVkX2ZyYWdfc2l6ZSh1MzIgdXNlcl9mcmFnX3NpemUpOwor
Ym9vbCBpZ2NfZnBlX3RyYW5zbWl0dGVkX3NtZF92KHVuaW9uIGlnY19hZHZfdHhfZGVzYyAqdHhf
ZGVzYyk7CiBpbnQgaWdjX3Rzbl9vZmZsb2FkX2FwcGx5KHN0cnVjdCBpZ2NfYWRhcHRlciAqYWRh
cHRlcik7CiBpbnQgaWdjX3Rzbl9yZXNldChzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIpOwog
dm9pZCBpZ2NfdHNuX2FkanVzdF90eHRpbWVfb2Zmc2V0KHN0cnVjdCBpZ2NfYWRhcHRlciAqYWRh
cHRlcik7CiBib29sIGlnY190c25faXNfdGFwcmlvX2FjdGl2YXRlZF9ieV91c2VyKHN0cnVjdCBp
Z2NfYWRhcHRlciAqYWRhcHRlcik7CiAKK3N0YXRpYyBpbmxpbmUgdm9pZCBpZ2NfZnBlX2xwX2V2
ZW50X3N0YXR1cyh1bmlvbiBpZ2NfYWR2X3J4X2Rlc2MgKnJ4X2Rlc2MsCisJCQkJCSAgIHN0cnVj
dCBldGh0b29sX21tc3YgKm1tc3YpCit7CisJX19sZTMyIHN0YXR1c19lcnJvciA9IGxlMzJfdG9f
Y3B1KHJ4X2Rlc2MtPndiLnVwcGVyLnN0YXR1c19lcnJvcik7CisJaW50IHNtZDsKKworCXNtZCA9
IEZJRUxEX0dFVChJR0NfUlhEQURWX1NUQVRfU01EX1RZUEVfTUFTSywgc3RhdHVzX2Vycm9yKTsK
KworCWlmIChzbWQgPT0gSUdDX1JYRF9TVEFUX1NNRF9UWVBFX1YpCisJCWV0aHRvb2xfbW1zdl9l
dmVudF9oYW5kbGUobW1zdiwgRVRIVE9PTF9NTVNWX0xQX1NFTlRfVkVSSUZZX01QQUNLRVQpOwor
CWVsc2UgaWYgKHNtZCA9PSBJR0NfUlhEX1NUQVRfU01EX1RZUEVfUikKKwkJZXRodG9vbF9tbXN2
X2V2ZW50X2hhbmRsZShtbXN2LCBFVEhUT09MX01NU1ZfTFBfU0VOVF9SRVNQT05TRV9NUEFDS0VU
KTsKK30KKworc3RhdGljIGlubGluZSBib29sIGlnY19mcGVfaXNfdmVyaWZ5X29yX3Jlc3BvbnNl
KHVuaW9uIGlnY19hZHZfcnhfZGVzYyAqcnhfZGVzYywKKwkJCQkJCSB1bnNpZ25lZCBpbnQgc2l6
ZSkKK3sKKwlfX2xlMzIgc3RhdHVzX2Vycm9yID0gbGUzMl90b19jcHUocnhfZGVzYy0+d2IudXBw
ZXIuc3RhdHVzX2Vycm9yKTsKKwlpbnQgc21kOworCisJc21kID0gRklFTERfR0VUKElHQ19SWERB
RFZfU1RBVF9TTURfVFlQRV9NQVNLLCBzdGF0dXNfZXJyb3IpOworCisJcmV0dXJuICgoc21kID09
IElHQ19SWERfU1RBVF9TTURfVFlQRV9WIHx8IHNtZCA9PSBJR0NfUlhEX1NUQVRfU01EX1RZUEVf
UikgJiYKKwkJc2l6ZSA9PSBTTURfRlJBTUVfU0laRSk7Cit9CisKICNlbmRpZiAvKiBfSUdDX0JB
U0VfSCAqLwotLSAKMi4zNC4xCgpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fXwpMaW51eC1zdG0zMiBtYWlsaW5nIGxpc3QKTGludXgtc3RtMzJAc3QtbWQtbWFp
bG1hbi5zdG9ybXJlcGx5LmNvbQpodHRwczovL3N0LW1kLW1haWxtYW4uc3Rvcm1yZXBseS5jb20v
bWFpbG1hbi9saXN0aW5mby9saW51eC1zdG0zMgo=
