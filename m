Return-Path: <linux-stm32-bounces@st-md-mailman.stormreply.com>
X-Original-To: lists+linux-stm32@lfdr.de
Delivered-To: lists+linux-stm32@lfdr.de
Received: from stm-ict-prod-mailman-01.stormreply.prv (st-md-mailman.stormreply.com [52.209.6.89])
	by mail.lfdr.de (Postfix) with ESMTPS id 8F793A4FF5D
	for <lists+linux-stm32@lfdr.de>; Wed,  5 Mar 2025 14:01:56 +0100 (CET)
Received: from ip-172-31-3-47.eu-west-1.compute.internal (localhost [127.0.0.1])
	by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTP id 51835C78F81;
	Wed,  5 Mar 2025 13:01:56 +0000 (UTC)
Received: from mgamail.intel.com (mgamail.intel.com [198.175.65.15])
 (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTPS id 7C443C78F68
 for <linux-stm32@st-md-mailman.stormreply.com>;
 Wed,  5 Mar 2025 13:01:54 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
 d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
 t=1741179715; x=1772715715;
 h=from:to:subject:date:message-id:in-reply-to:references:
 mime-version:content-transfer-encoding;
 bh=zcxgSBkKHxa2+00t9lfQbgQitNoMBZ7z4cQWmyXjxkE=;
 b=iRdiW9YEy+8uhZe0Qz+Jb5z65LMdsuxrQH/sUEDTaZhVM44a8beNRs7d
 UxhXQpbsRK6AFFEsAQ6GTSQdXXn1J8A2wOBnt8A0LROBgo61/b2qECWaS
 6MH/hIh0kKW/tRLhdBOmb5QMBduOX0GFMMc/FYjR3r1Wu+gpwhgoBB24j
 d4IHjs0loNT/KJbl5TuNuCG0Oi5edGWGhEim0P8cXU89VKYyS9HfXSEjY
 g+VgprCG9Gs88CxGxS5KSPxJUGPDO81OB8JBwGazBL+G1TTp+j12LfqxJ
 AQZtr7Bu0hvhMbKWo1FLq4Pq2KstuaTMIHrHn5b+Qj1j8KA/TqP6h2dAn A==;
X-CSE-ConnectionGUID: BCEOYVABT8ikXVvG050oVw==
X-CSE-MsgGUID: lAmX++OARV2PmbIPXpqZ6g==
X-IronPort-AV: E=McAfee;i="6700,10204,11363"; a="45795087"
X-IronPort-AV: E=Sophos;i="6.14,223,1736841600"; d="scan'208";a="45795087"
Received: from fmviesa005.fm.intel.com ([10.60.135.145])
 by orvoesa107.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384;
 05 Mar 2025 05:01:53 -0800
X-CSE-ConnectionGUID: MQ0+ct9UQB+TkO86xLAnBQ==
X-CSE-MsgGUID: fnarx/B0RH+KDO0WILpGeg==
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="6.14,223,1736841600"; d="scan'208";a="123277095"
Received: from mohdfai2-ilbpg12-1.png.intel.com ([10.88.227.73])
 by fmviesa005.fm.intel.com with ESMTP; 05 Mar 2025 05:01:45 -0800
From: Faizal Rahim <faizal.abdul.rahim@linux.intel.com>
To: Tony Nguyen <anthony.l.nguyen@intel.com>,
 Przemek Kitszel <przemyslaw.kitszel@intel.com>,
 Andrew Lunn <andrew+netdev@lunn.ch>,
 "David S . Miller" <davem@davemloft.net>,
 Eric Dumazet <edumazet@google.com>, Jakub Kicinski <kuba@kernel.org>,
 Paolo Abeni <pabeni@redhat.com>,
 Maxime Coquelin <mcoquelin.stm32@gmail.com>,
 Alexandre Torgue <alexandre.torgue@foss.st.com>,
 Simon Horman <horms@kernel.org>, Russell King <linux@armlinux.org.uk>,
 Alexei Starovoitov <ast@kernel.org>,
 Daniel Borkmann <daniel@iogearbox.net>,
 Jesper Dangaard Brouer <hawk@kernel.org>,
 John Fastabend <john.fastabend@gmail.com>, Furong Xu <0x1207@gmail.com>,
 Russell King <rmk+kernel@armlinux.org.uk>,
 Vladimir Oltean <vladimir.oltean@nxp.com>,
 Serge Semin <fancer.lancer@gmail.com>,
 Xiaolei Wang <xiaolei.wang@windriver.com>,
 Suraj Jaiswal <quic_jsuraj@quicinc.com>,
 Kory Maincent <kory.maincent@bootlin.com>, Gal Pressman <gal@nvidia.com>,
 Jesper Nilsson <jesper.nilsson@axis.com>,
 Choong Yong Liang <yong.liang.choong@linux.intel.com>,
 Chwee-Lin Choong <chwee.lin.choong@intel.com>,
 Faizal Rahim <faizal.abdul.rahim@linux.intel.com>,
 Kunihiko Hayashi <hayashi.kunihiko@socionext.com>,
 Vinicius Costa Gomes <vinicius.gomes@intel.com>,
 intel-wired-lan@lists.osuosl.org, netdev@vger.kernel.org,
 linux-kernel@vger.kernel.org, linux-stm32@st-md-mailman.stormreply.com,
 linux-arm-kernel@lists.infradead.org, bpf@vger.kernel.org
Date: Wed,  5 Mar 2025 08:00:22 -0500
Message-Id: <20250305130026.642219-8-faizal.abdul.rahim@linux.intel.com>
X-Mailer: git-send-email 2.34.1
In-Reply-To: <20250305130026.642219-1-faizal.abdul.rahim@linux.intel.com>
References: <20250305130026.642219-1-faizal.abdul.rahim@linux.intel.com>
MIME-Version: 1.0
Subject: [Linux-stm32] [PATCH iwl-next v8 07/11] igc: add support for frame
	preemption verification
X-BeenThere: linux-stm32@st-md-mailman.stormreply.com
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: <linux-stm32.st-md-mailman.stormreply.com>
List-Unsubscribe: <https://st-md-mailman.stormreply.com/mailman/options/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=unsubscribe>
List-Archive: <http://st-md-mailman.stormreply.com/pipermail/linux-stm32/>
List-Post: <mailto:linux-stm32@st-md-mailman.stormreply.com>
List-Help: <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=help>
List-Subscribe: <https://st-md-mailman.stormreply.com/mailman/listinfo/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: linux-stm32-bounces@st-md-mailman.stormreply.com
Sender: "Linux-stm32" <linux-stm32-bounces@st-md-mailman.stormreply.com>

VGhpcyBwYXRjaCBpbXBsZW1lbnRzIHRoZSAiZXRodG9vbCAtLXNldC1tbSIgY2FsbGJhY2sgdG8g
dHJpZ2dlciB0aGUKZnJhbWUgcHJlZW1wdGlvbiB2ZXJpZmljYXRpb24gaGFuZHNoYWtlLgoKVXNl
cyB0aGUgTUFDIE1lcmdlIFNvZnR3YXJlIFZlcmlmaWNhdGlvbiAobW1zdikgbWVjaGFuaXNtIGlu
IGV0aHRvb2wKdG8gcGVyZm9ybSB0aGUgdmVyaWZpY2F0aW9uIGhhbmRzaGFrZSBmb3IgaWdjLgpU
aGUgc3RydWN0dXJlIGZwZS5tbXN2IGlzIHNldCBieSBtbXN2IGluIGV0aHRvb2wgYW5kIHNob3Vs
ZCByZW1haW4KcmVhZC1vbmx5IGZvciB0aGUgZHJpdmVyLgoKT3RoZXIgbW1zdiBjYWxsYmFja3M6
CmEpIGNvbmZpZ3VyZV90eCgpIC0+IG5vdCB1c2VkIHlldCBhdCB0aGlzIHBvaW50CiAgIC0gaWdj
IGxhY2tzIHJlZ2lzdGVycyB0byBjb25maWd1cmUgRlBFIGluIHRoZSB0cmFuc21pdCBkaXJlY3Rp
b24sIHNvCiAgICAgdGhpcyBBUEkgaXMgbm90IHV0aWxpemVkIGZvciBub3cuIEEgZnV0dXJlIHBh
dGNoIHdpbGwgdXNlIGl0IHRvCiAgICAgY29udHJvbCBwcmVlbXB0aWJsZSBxdWV1ZSBjb25maWcu
CgpiKSBjb25maWd1cmVfcG1hYygpIC0+IG5vdCB1c2VkCiAgIC0gdGhpcyBjYWxsYmFjayBkeW5h
bWljYWxseSBjb250cm9scyBwbWFjX2VuYWJsZWQgYXQgcnVudGltZS4gRm9yCiAgICAgZXhhbXBs
ZSwgbW1zdiBjYWxscyBjb25maWd1cmVfcG1hYygpIGFuZCBkaXNhYmxlcyBwbWFjX2VuYWJsZWQg
d2hlbgogICAgIHRoZSBsaW5rIHBhcnRuZXIgZ29lcyBkb3duLCBldmVuIGlmIHRoZSB1c2VyIHBy
ZXZpb3VzbHkgZW5hYmxlZCBpdC4KICAgICBUaGUgaW50ZW50aW9uIGlzIHRvIHNhdmUgcG93ZXIg
YnV0IGl0IGlzIG5vdCBmZWFzaWJsZSBpbiBpZ2MKICAgICBiZWNhdXNlIGl0IGNhdXNlcyBhbiBl
bmRsZXNzIGFkYXB0ZXIgcmVzZXQgbG9vcDoKCiAgIDEpIEJvYXJkIEEgYW5kIEJvYXJkIEIgY29t
cGxldGUgdGhlIHZlcmlmaWNhdGlvbiBoYW5kc2hha2UuIFR4IG1vZGUKICAgICAgcmVnaXN0ZXIg
Zm9yIGJvdGggYm9hcmRzIGFyZSBpbiBUU04gbW9kZS4KICAgMikgQm9hcmQgQiBsaW5rIGdvZXMg
ZG93bi4KCiAgIE9uIEJvYXJkIEE6CiAgIDMpIG1tc3YgY2FsbHMgY29uZmlndXJlX3BtYWMoKSB3
aXRoIHBtYWNfZW5hYmxlZCA9IGZhbHNlLgogICA0KSBjb25maWd1cmVfcG1hYygpIGluIGlnYyB1
cGRhdGVzIGEgbmV3IGZpZWxkIGJhc2VkIG9uIHBtYWNfZW5hYmxlZC4KICAgICAgRHJpdmVyIHVz
ZXMgdGhpcyBmaWVsZCBpbiBpZ2NfdHNuX25ld19mbGFncygpIHRvIGluZGljYXRlIHRoYXQgdGhl
CiAgICAgIHVzZXIgZW5hYmxlZC9kaXNhYmxlZCBGUEUuCiAgIDUpIGNvbmZpZ3VyZV9wbWFjKCkg
aW4gaWdjIGNhbGxzIGlnY190c25fb2ZmbG9hZF9hcHBseSgpIHRvIGNoZWNrCiAgICAgIHdoZXRo
ZXIgYW4gYWRhcHRlciByZXNldCBpcyBuZWVkZWQuIENhbGxzIGV4aXN0aW5nIGxvZ2ljIGluCiAg
ICAgIGlnY190c25fd2lsbF90eF9tb2RlX2NoYW5nZSgpIGFuZCBpZ2NfdHNuX25ld19mbGFncygp
LgogICA2KSBTaW5jZSBwbWFjX2VuYWJsZWQgaXMgbm93IGRpc2FibGVkIGFuZCBubyBvdGhlciBU
U04gZmVhdHVyZSBpcwogICAgICBhY3RpdmUsIGlnY190c25fd2lsbF90eF9tb2RlX2NoYW5nZSgp
IGV2YWx1YXRlcyB0byB0cnVlIGJlY2F1c2UgVHgKICAgICAgbW9kZSB3aWxsIHN3aXRjaCBmcm9t
IFRTTiB0byBMZWdhY3kuCiAgIDcpIERyaXZlciByZXNldHMgdGhlIGFkYXB0ZXIuCiAgIDgpIFJl
Z2lzdGVycyBhcmUgc2V0LCBhbmQgVHggbW9kZSBzd2l0Y2hlcyB0byBMZWdhY3kuCiAgIDkpIFdo
ZW4gbGluayBwYXJ0bmVyIGlzIHVwLCBzdGVwcyAz4oCTOCByZXBlYXQsIGJ1dCB0aGlzIHRpbWUg
d2l0aAogICAgICBwbWFjX2VuYWJsZWQgPSB0cnVlLCByZWFjdGl2YXRpbmcgVFNOLgogICAgICBp
Z2NfdHNuX3dpbGxfdHhfbW9kZV9jaGFuZ2UoKSBldmFsdWF0ZXMgdG8gdHJ1ZSBhZ2Fpbiwgc2lu
Y2UgVHgKICAgICAgbW9kZSB3aWxsIHN3aXRjaCBmcm9tIExlZ2FjeSB0byBUU04uCiAgMTApIERy
aXZlciByZXNldHMgdGhlIGFkYXB0ZXIuCiAgMTEpIFJlc3QgYWRhcHRlciBjb21wbGV0ZXMsIHJl
Z2lzdGVycyBhcmUgc2V0LCBhbmQgVHggbW9kZSBzd2l0Y2hlcyB0bwogICAgICBUU04uCgogIE9u
IEJvYXJkIEI6CiAgMTIpIEFkYXB0ZXIgcmVzZXQgb24gQm9hcmQgQSBhdCBzdGVwIDEwIGNhdXNl
cyBpdCB0byBkZXRlY3QgaXRzIGxpbmsKICAgICAgcGFydG5lciBhcyBkb3duLgogIDEzKSBSZXBl
YXRzIHN0ZXBzIDPigJM4LgogIDE0KSBPbmNlIHJlc2V0IGFkYXB0ZXIgb24gQm9hcmQgQSBpcyBj
b21wbGV0ZWQgYXQgc3RlcCAxMSwgaXQgZGV0ZWN0cwogICAgICBpdHMgbGluayBwYXJ0bmVyIGFz
IHVwLgogIDE1KSBSZXBlYXRzIHN0ZXBzIDnigJMxMS4KCiAgIC0gdGhpcyBjeWNsZSByZXBlYXRz
IGluZGVmaW5pdGVseS4gVG8gYXZvaWQgdGhpcyBpc3N1ZSwgaWdjIG9ubHkgdXNlcwogICAgIG1t
c3YucG1hY19lbmFibGVkIHRvIHRyYWNrIHdoZXRoZXIgRlBFIGlzIGVuYWJsZWQgb3IgZGlzYWJs
ZWQuCgpDby1kZXZlbG9wZWQtYnk6IFZpbmljaXVzIENvc3RhIEdvbWVzIDx2aW5pY2l1cy5nb21l
c0BpbnRlbC5jb20+ClNpZ25lZC1vZmYtYnk6IFZpbmljaXVzIENvc3RhIEdvbWVzIDx2aW5pY2l1
cy5nb21lc0BpbnRlbC5jb20+CkNvLWRldmVsb3BlZC1ieTogQ2hvb25nIFlvbmcgTGlhbmcgPHlv
bmcubGlhbmcuY2hvb25nQGxpbnV4LmludGVsLmNvbT4KU2lnbmVkLW9mZi1ieTogQ2hvb25nIFlv
bmcgTGlhbmcgPHlvbmcubGlhbmcuY2hvb25nQGxpbnV4LmludGVsLmNvbT4KQ28tZGV2ZWxvcGVk
LWJ5OiBDaHdlZS1MaW4gQ2hvb25nIDxjaHdlZS5saW4uY2hvb25nQGludGVsLmNvbT4KU2lnbmVk
LW9mZi1ieTogQ2h3ZWUtTGluIENob29uZyA8Y2h3ZWUubGluLmNob29uZ0BpbnRlbC5jb20+ClNp
Z25lZC1vZmYtYnk6IEZhaXphbCBSYWhpbSA8ZmFpemFsLmFiZHVsLnJhaGltQGxpbnV4LmludGVs
LmNvbT4KLS0tCiBkcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2MvaWdjLmggICAgICAgICB8
ICAxMiArLQogZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY19iYXNlLmggICAgfCAg
IDEgKwogZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY19kZWZpbmVzLmggfCAgIDgg
Ky0KIGRyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfZXRodG9vbC5jIHwgIDIxICsr
KwogZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY19tYWluLmMgICAgfCAgNTMgKysr
KysrLQogZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY190c24uYyAgICAgfCAxNDYg
KysrKysrKysrKysrKysrKysrLQogZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY190
c24uaCAgICAgfCAgNTMgKysrKysrKwogNyBmaWxlcyBjaGFuZ2VkLCAyODkgaW5zZXJ0aW9ucygr
KSwgNSBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9kcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRl
bC9pZ2MvaWdjLmggYi9kcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2MvaWdjLmgKaW5kZXgg
MjJlY2RhYzI2Y2Y0Li5kOWVjYjdjZjgwYzkgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvbmV0L2V0aGVy
bmV0L2ludGVsL2lnYy9pZ2MuaAorKysgYi9kcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2Mv
aWdjLmgKQEAgLTQwLDYgKzQwLDEwIEBAIHZvaWQgaWdjX2V0aHRvb2xfc2V0X29wcyhzdHJ1Y3Qg
bmV0X2RldmljZSAqKTsKIAogI2RlZmluZSBJR0NfTUFYX1RYX1RTVEFNUF9SRUdTCQk0CiAKK3N0
cnVjdCBpZ2NfZnBlX3QgeworCXN0cnVjdCBldGh0b29sX21tc3YgbW1zdjsKK307CisKIGVudW0g
aWdjX21hY19maWx0ZXJfdHlwZSB7CiAJSUdDX01BQ19GSUxURVJfVFlQRV9EU1QgPSAwLAogCUlH
Q19NQUNfRklMVEVSX1RZUEVfU1JDCkBAIC0zMzIsNiArMzM2LDggQEAgc3RydWN0IGlnY19hZGFw
dGVyIHsKIAkJc3RydWN0IHRpbWVzcGVjNjQgcGVyaW9kOwogCX0gcGVyb3V0W0lHQ19OX1BFUk9V
VF07CiAKKwlzdHJ1Y3QgaWdjX2ZwZV90IGZwZTsKKwogCS8qIExFRHMgKi8KIAlzdHJ1Y3QgbXV0
ZXggbGVkX211dGV4OwogCXN0cnVjdCBpZ2NfbGVkX2NsYXNzZGV2ICpsZWRzOwpAQCAtMzg5LDEw
ICszOTUsMTEgQEAgZXh0ZXJuIGNoYXIgaWdjX2RyaXZlcl9uYW1lW107CiAjZGVmaW5lIElHQ19G
TEFHX1RTTl9RQlZfRU5BQkxFRAlCSVQoMTcpCiAjZGVmaW5lIElHQ19GTEFHX1RTTl9RQVZfRU5B
QkxFRAlCSVQoMTgpCiAjZGVmaW5lIElHQ19GTEFHX1RTTl9MRUdBQ1lfRU5BQkxFRAlCSVQoMTkp
CisjZGVmaW5lIElHQ19GTEFHX1RTTl9QUkVFTVBUX0VOQUJMRUQJQklUKDIwKQogCiAjZGVmaW5l
IElHQ19GTEFHX1RTTl9BTllfRU5BQkxFRAkJCQlcCiAJKElHQ19GTEFHX1RTTl9RQlZfRU5BQkxF
RCB8IElHQ19GTEFHX1RTTl9RQVZfRU5BQkxFRCB8CVwKLQkgSUdDX0ZMQUdfVFNOX0xFR0FDWV9F
TkFCTEVEKQorCSBJR0NfRkxBR19UU05fTEVHQUNZX0VOQUJMRUQgfCBJR0NfRkxBR19UU05fUFJF
RU1QVF9FTkFCTEVEKQogCiAjZGVmaW5lIElHQ19GTEFHX1JTU19GSUVMRF9JUFY0X1VEUAlCSVQo
NikKICNkZWZpbmUgSUdDX0ZMQUdfUlNTX0ZJRUxEX0lQVjZfVURQCUJJVCg3KQpAQCAtNzM2LDcg
Kzc0MywxMCBAQCBzdHJ1Y3QgaWdjX25mY19ydWxlICppZ2NfZ2V0X25mY19ydWxlKHN0cnVjdCBp
Z2NfYWRhcHRlciAqYWRhcHRlciwKIAkJCQkgICAgICB1MzIgbG9jYXRpb24pOwogaW50IGlnY19h
ZGRfbmZjX3J1bGUoc3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVyLCBzdHJ1Y3QgaWdjX25mY19y
dWxlICpydWxlKTsKIHZvaWQgaWdjX2RlbF9uZmNfcnVsZShzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFk
YXB0ZXIsIHN0cnVjdCBpZ2NfbmZjX3J1bGUgKnJ1bGUpOwordm9pZCBpZ2NfZGlzYWJsZV9lbXB0
eV9hZGRyX3JlY3Yoc3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVyKTsKK2ludCBpZ2NfZW5hYmxl
X2VtcHR5X2FkZHJfcmVjdihzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIpOwogc3RydWN0IGln
Y19yaW5nICppZ2NfZ2V0X3R4X3Jpbmcoc3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVyLCBpbnQg
Y3B1KTsKK3ZvaWQgaWdjX2ZsdXNoX3R4X2Rlc2NyaXB0b3JzKHN0cnVjdCBpZ2NfcmluZyAqcmlu
Zyk7CiB2b2lkIGlnY19wdHBfaW5pdChzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIpOwogdm9p
ZCBpZ2NfcHRwX3Jlc2V0KHN0cnVjdCBpZ2NfYWRhcHRlciAqYWRhcHRlcik7CiB2b2lkIGlnY19w
dHBfc3VzcGVuZChzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIpOwpkaWZmIC0tZ2l0IGEvZHJp
dmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY19iYXNlLmggYi9kcml2ZXJzL25ldC9ldGhl
cm5ldC9pbnRlbC9pZ2MvaWdjX2Jhc2UuaAppbmRleCBiZjhjZGZiYmE5ZmYuLjYzMjBlYWJiNzJm
ZSAxMDA2NDQKLS0tIGEvZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY19iYXNlLmgK
KysrIGIvZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY19iYXNlLmgKQEAgLTQ5LDYg
KzQ5LDcgQEAgc3RydWN0IGlnY19hZHZfdHhfY29udGV4dF9kZXNjIHsKICNkZWZpbmUgSUdDX0FE
VlRYRF9EQ01EX0RFWFQJMHgyMDAwMDAwMCAvKiBEZXNjcmlwdG9yIGV4dGVuc2lvbiAoMT1BZHYp
ICovCiAjZGVmaW5lIElHQ19BRFZUWERfRENNRF9WTEUJMHg0MDAwMDAwMCAvKiBWTEFOIHBrdCBl
bmFibGUgKi8KICNkZWZpbmUgSUdDX0FEVlRYRF9EQ01EX1RTRQkweDgwMDAwMDAwIC8qIFRDUCBT
ZWcgZW5hYmxlICovCisjZGVmaW5lIElHQ19BRFZUWERfUEFZTEVOX01BU0sJMFhGRkZGQzAwMCAv
KiBBZHYgZGVzYyBQQVlMRU4gbWFzayAqLwogI2RlZmluZSBJR0NfQURWVFhEX1BBWUxFTl9TSElG
VAkxNCAvKiBBZHYgZGVzYyBQQVlMRU4gc2hpZnQgKi8KIAogI2RlZmluZSBJR0NfUkFSX0VOVFJJ
RVMJCTE2CmRpZmYgLS1naXQgYS9kcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2MvaWdjX2Rl
ZmluZXMuaCBiL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfZGVmaW5lcy5oCmlu
ZGV4IGIxOWFjNmYzMGRhYy4uMjJkYjFkZTAyOTY0IDEwMDY0NAotLS0gYS9kcml2ZXJzL25ldC9l
dGhlcm5ldC9pbnRlbC9pZ2MvaWdjX2RlZmluZXMuaAorKysgYi9kcml2ZXJzL25ldC9ldGhlcm5l
dC9pbnRlbC9pZ2MvaWdjX2RlZmluZXMuaApAQCAtMzA4LDYgKzMwOCw4IEBACiAjZGVmaW5lIElH
Q19UWERfRFRZUF9DCQkweDAwMDAwMDAwIC8qIENvbnRleHQgRGVzY3JpcHRvciAqLwogI2RlZmlu
ZSBJR0NfVFhEX1BPUFRTX0lYU00JMHgwMSAgICAgICAvKiBJbnNlcnQgSVAgY2hlY2tzdW0gKi8K
ICNkZWZpbmUgSUdDX1RYRF9QT1BUU19UWFNNCTB4MDIgICAgICAgLyogSW5zZXJ0IFRDUC9VRFAg
Y2hlY2tzdW0gKi8KKyNkZWZpbmUgSUdDX1RYRF9QT1BUU19TTURfTUFTSwkweDMwMDAgICAgIC8q
IEluZGljYXRlcyB3aGV0aGVyIGl0J3MgU01ELVYgb3IgU01ELVIgKi8KKwogI2RlZmluZSBJR0Nf
VFhEX0NNRF9FT1AJCTB4MDEwMDAwMDAgLyogRW5kIG9mIFBhY2tldCAqLwogI2RlZmluZSBJR0Nf
VFhEX0NNRF9JQwkJMHgwNDAwMDAwMCAvKiBJbnNlcnQgQ2hlY2tzdW0gKi8KICNkZWZpbmUgSUdD
X1RYRF9DTURfREVYVAkweDIwMDAwMDAwIC8qIERlc2MgZXh0ZW5zaW9uICgwID0gbGVnYWN5KSAq
LwpAQCAtMzYzLDYgKzM2NSw4IEBACiAjZGVmaW5lIElHQ19TUlJDVExfVElNRVIwU0VMKHRpbWVy
KQkoKCh0aW1lcikgJiAweDMpIDw8IDE3KQogCiAvKiBSZWNlaXZlIERlc2NyaXB0b3IgYml0IGRl
ZmluaXRpb25zICovCisjZGVmaW5lIElHQ19SWERfU1RBVF9TTURfVFlQRV9WCTB4MDEJLyogU01E
LVYgUGFja2V0ICovCisjZGVmaW5lIElHQ19SWERfU1RBVF9TTURfVFlQRV9SCTB4MDIJLyogU01E
LVIgUGFja2V0ICovCiAjZGVmaW5lIElHQ19SWERfU1RBVF9FT1AJMHgwMgkvKiBFbmQgb2YgUGFj
a2V0ICovCiAjZGVmaW5lIElHQ19SWERfU1RBVF9JWFNNCTB4MDQJLyogSWdub3JlIGNoZWNrc3Vt
ICovCiAjZGVmaW5lIElHQ19SWERfU1RBVF9VRFBDUwkweDEwCS8qIFVEUCB4c3VtIGNhbGN1bGF0
ZWQgKi8KQEAgLTM3Miw3ICszNzYsOCBAQAogI2RlZmluZSBJR0NfUlhERVhUX1NUQVRFUlJfTEIJ
MHgwMDA0MDAwMAogCiAvKiBBZHZhbmNlZCBSZWNlaXZlIERlc2NyaXB0b3IgYml0IGRlZmluaXRp
b25zICovCi0jZGVmaW5lIElHQ19SWERBRFZfU1RBVF9UU0lQCTB4MDgwMDAgLyogdGltZXN0YW1w
IGluIHBhY2tldCAqLworI2RlZmluZSBJR0NfUlhEQURWX1NUQVRfU01EX1RZUEVfTUFTSwkweDA2
MDAwCisjZGVmaW5lIElHQ19SWERBRFZfU1RBVF9UU0lQCQkweDA4MDAwIC8qIHRpbWVzdGFtcCBp
biBwYWNrZXQgKi8KIAogI2RlZmluZSBJR0NfUlhERVhUX1NUQVRFUlJfTDRFCQkweDIwMDAwMDAw
CiAjZGVmaW5lIElHQ19SWERFWFRfU1RBVEVSUl9JUEUJCTB4NDAwMDAwMDAKQEAgLTU0Myw2ICs1
NDgsNyBAQAogCiAvKiBUcmFuc21pdCBTY2hlZHVsaW5nICovCiAjZGVmaW5lIElHQ19UUUFWQ1RS
TF9UUkFOU01JVF9NT0RFX1RTTgkweDAwMDAwMDAxCisjZGVmaW5lIElHQ19UUUFWQ1RSTF9QUkVF
TVBUX0VOQQkweDAwMDAwMDAyCiAjZGVmaW5lIElHQ19UUUFWQ1RSTF9FTkhBTkNFRF9RQVYJMHgw
MDAwMDAwOAogI2RlZmluZSBJR0NfVFFBVkNUUkxfRlVUU0NERElTCQkweDAwMDAwMDgwCiAKZGlm
ZiAtLWdpdCBhL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfZXRodG9vbC5jIGIv
ZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY19ldGh0b29sLmMKaW5kZXggODE3ODM4
Njc3ODE3Li5iNjRkNWM2YzFkMjAgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvbmV0L2V0aGVybmV0L2lu
dGVsL2lnYy9pZ2NfZXRodG9vbC5jCisrKyBiL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2ln
Yy9pZ2NfZXRodG9vbC5jCkBAIC04LDYgKzgsNyBAQAogCiAjaW5jbHVkZSAiaWdjLmgiCiAjaW5j
bHVkZSAiaWdjX2RpYWcuaCIKKyNpbmNsdWRlICJpZ2NfdHNuLmgiCiAKIC8qIGZvcndhcmQgZGVj
bGFyYXRpb24gKi8KIHN0cnVjdCBpZ2Nfc3RhdHMgewpAQCAtMTc4MSw2ICsxNzgyLDI1IEBAIHN0
YXRpYyBpbnQgaWdjX2V0aHRvb2xfc2V0X2VlZShzdHJ1Y3QgbmV0X2RldmljZSAqbmV0ZGV2LAog
CXJldHVybiAwOwogfQogCitzdGF0aWMgaW50IGlnY19ldGh0b29sX3NldF9tbShzdHJ1Y3QgbmV0
X2RldmljZSAqbmV0ZGV2LAorCQkJICAgICAgc3RydWN0IGV0aHRvb2xfbW1fY2ZnICpjbWQsCisJ
CQkgICAgICBzdHJ1Y3QgbmV0bGlua19leHRfYWNrICpleHRhY2spCit7CisJc3RydWN0IGlnY19h
ZGFwdGVyICphZGFwdGVyID0gbmV0ZGV2X3ByaXYobmV0ZGV2KTsKKwlzdHJ1Y3QgaWdjX2ZwZV90
ICpmcGUgPSAmYWRhcHRlci0+ZnBlOworCisJaWYgKGZwZS0+bW1zdi5wbWFjX2VuYWJsZWQgIT0g
Y21kLT5wbWFjX2VuYWJsZWQpIHsKKwkJaWYgKGNtZC0+cG1hY19lbmFibGVkKQorCQkJc3RhdGlj
X2JyYW5jaF9pbmMoJmlnY19mcGVfZW5hYmxlZCk7CisJCWVsc2UKKwkJCXN0YXRpY19icmFuY2hf
ZGVjKCZpZ2NfZnBlX2VuYWJsZWQpOworCX0KKworCWV0aHRvb2xfbW1zdl9zZXRfbW0oJmZwZS0+
bW1zdiwgY21kKTsKKworCXJldHVybiBpZ2NfdHNuX29mZmxvYWRfYXBwbHkoYWRhcHRlcik7Cit9
CisKIHN0YXRpYyBpbnQgaWdjX2V0aHRvb2xfZ2V0X2xpbmtfa3NldHRpbmdzKHN0cnVjdCBuZXRf
ZGV2aWNlICpuZXRkZXYsCiAJCQkJCSAgc3RydWN0IGV0aHRvb2xfbGlua19rc2V0dGluZ3MgKmNt
ZCkKIHsKQEAgLTIwNzYsNiArMjA5Niw3IEBAIHN0YXRpYyBjb25zdCBzdHJ1Y3QgZXRodG9vbF9v
cHMgaWdjX2V0aHRvb2xfb3BzID0gewogCS5nZXRfbGlua19rc2V0dGluZ3MJPSBpZ2NfZXRodG9v
bF9nZXRfbGlua19rc2V0dGluZ3MsCiAJLnNldF9saW5rX2tzZXR0aW5ncwk9IGlnY19ldGh0b29s
X3NldF9saW5rX2tzZXR0aW5ncywKIAkuc2VsZl90ZXN0CQk9IGlnY19ldGh0b29sX2RpYWdfdGVz
dCwKKwkuc2V0X21tCQkJPSBpZ2NfZXRodG9vbF9zZXRfbW0sCiB9OwogCiB2b2lkIGlnY19ldGh0
b29sX3NldF9vcHMoc3RydWN0IG5ldF9kZXZpY2UgKm5ldGRldikKZGlmZiAtLWdpdCBhL2RyaXZl
cnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfbWFpbi5jIGIvZHJpdmVycy9uZXQvZXRoZXJu
ZXQvaW50ZWwvaWdjL2lnY19tYWluLmMKaW5kZXggZGI0YTM2YWZjZWM2Li5hOWY0MGZmZmM0ZmQg
MTAwNjQ0Ci0tLSBhL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfbWFpbi5jCisr
KyBiL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfbWFpbi5jCkBAIC0yNTI4LDcg
KzI1MjgsNyBAQCBzdGF0aWMgaW50IGlnY194ZHBfcnVuX3Byb2coc3RydWN0IGlnY19hZGFwdGVy
ICphZGFwdGVyLCBzdHJ1Y3QgeGRwX2J1ZmYgKnhkcCkKIH0KIAogLyogVGhpcyBmdW5jdGlvbiBh
c3N1bWVzIF9fbmV0aWZfdHhfbG9jayBpcyBoZWxkIGJ5IHRoZSBjYWxsZXIuICovCi1zdGF0aWMg
dm9pZCBpZ2NfZmx1c2hfdHhfZGVzY3JpcHRvcnMoc3RydWN0IGlnY19yaW5nICpyaW5nKQordm9p
ZCBpZ2NfZmx1c2hfdHhfZGVzY3JpcHRvcnMoc3RydWN0IGlnY19yaW5nICpyaW5nKQogewogCS8q
IE9uY2UgdGFpbCBwb2ludGVyIGlzIHVwZGF0ZWQsIGhhcmR3YXJlIGNhbiBmZXRjaCB0aGUgZGVz
Y3JpcHRvcnMKIAkgKiBhbnkgdGltZSBzbyB3ZSBpc3N1ZSBhIHdyaXRlIG1lbWJhciBoZXJlIHRv
IGVuc3VyZSBhbGwgbWVtb3J5CkBAIC0yNjE3LDYgKzI2MTcsMTUgQEAgc3RhdGljIGludCBpZ2Nf
Y2xlYW5fcnhfaXJxKHN0cnVjdCBpZ2NfcV92ZWN0b3IgKnFfdmVjdG9yLCBjb25zdCBpbnQgYnVk
Z2V0KQogCQkJc2l6ZSAtPSBJR0NfVFNfSERSX0xFTjsKIAkJfQogCisJCWlmIChpZ2NfZnBlX2lz
X3BtYWNfZW5hYmxlZChhZGFwdGVyKSAmJgorCQkgICAgaWdjX2ZwZV9pc192ZXJpZnlfb3JfcmVz
cG9uc2UocnhfZGVzYywgc2l6ZSwgcGt0YnVmKSkgeworCQkJaWdjX2ZwZV9scF9ldmVudF9zdGF0
dXMocnhfZGVzYywgJmFkYXB0ZXItPmZwZS5tbXN2KTsKKwkJCS8qIEFkdmFuY2UgdGhlIHJpbmcg
bmV4dC10by1jbGVhbiAqLworCQkJaWdjX2lzX25vbl9lb3AocnhfcmluZywgcnhfZGVzYyk7CisJ
CQljbGVhbmVkX2NvdW50Kys7CisJCQljb250aW51ZTsKKwkJfQorCiAJCWlmICghc2tiKSB7CiAJ
CQl4ZHBfaW5pdF9idWZmKCZjdHgueGRwLCB0cnVlc2l6ZSwgJnJ4X3JpbmctPnhkcF9yeHEpOwog
CQkJeGRwX3ByZXBhcmVfYnVmZigmY3R4LnhkcCwgcGt0YnVmIC0gaWdjX3J4X29mZnNldChyeF9y
aW5nKSwKQEAgLTMwNjQsNiArMzA3MywxMSBAQCBzdGF0aWMgYm9vbCBpZ2NfY2xlYW5fdHhfaXJx
KHN0cnVjdCBpZ2NfcV92ZWN0b3IgKnFfdmVjdG9yLCBpbnQgbmFwaV9idWRnZXQpCiAJCWlmICgh
KGVvcF9kZXNjLT53Yi5zdGF0dXMgJiBjcHVfdG9fbGUzMihJR0NfVFhEX1NUQVRfREQpKSkKIAkJ
CWJyZWFrOwogCisJCWlmIChpZ2NfZnBlX2lzX3BtYWNfZW5hYmxlZChhZGFwdGVyKSAmJgorCQkg
ICAgaWdjX2ZwZV90cmFuc21pdHRlZF9zbWRfdih0eF9kZXNjKSkKKwkJCWV0aHRvb2xfbW1zdl9l
dmVudF9oYW5kbGUoJmFkYXB0ZXItPmZwZS5tbXN2LAorCQkJCQkJICBFVEhUT09MX01NU1ZfTERf
U0VOVF9WRVJJRllfTVBBQ0tFVCk7CisKIAkJLyogSG9sZCB0aGUgY29tcGxldGlvbnMgd2hpbGUg
dGhlcmUncyBhIHBlbmRpbmcgdHggaGFyZHdhcmUKIAkJICogdGltZXN0YW1wIHJlcXVlc3QgZnJv
bSBYRFAgVHggbWV0YWRhdGEuCiAJCSAqLwpAQCAtMzk1NSw2ICszOTY5LDMwIEBAIHN0YXRpYyBp
bnQgaWdjX3VjX3Vuc3luYyhzdHJ1Y3QgbmV0X2RldmljZSAqbmV0ZGV2LCBjb25zdCB1bnNpZ25l
ZCBjaGFyICphZGRyKQogCXJldHVybiAwOwogfQogCisvKioKKyAqIGlnY19lbmFibGVfZW1wdHlf
YWRkcl9yZWN2IC0gRW5hYmxlIFJ4IG9mIHBhY2tldHMgd2l0aCBhbGwtemVyb2VzIE1BQyBhZGRy
ZXNzCisgKiBAYWRhcHRlcjogUG9pbnRlciB0byB0aGUgaWdjX2FkYXB0ZXIgc3RydWN0dXJlLgor
ICoKKyAqIEZyYW1lIHByZWVtcHRpb24gdmVyaWZpY2F0aW9uIHJlcXVpcmVzIHRoYXQgcGFja2V0
cyB3aXRoIHRoZSBhbGwtemVyb2VzCisgKiBNQUMgYWRkcmVzcyBhcmUgYWxsb3dlZCB0byBiZSBy
ZWNlaXZlZCBieSB0aGUgZHJpdmVyLiBUaGlzIGZ1bmN0aW9uIGFkZHMgdGhlCisgKiBhbGwtemVy
b2VzIGRlc3RpbmF0aW9uIGFkZHJlc3MgdG8gdGhlIGxpc3Qgb2YgYWNjZXB0YWJsZSBhZGRyZXNz
ZXMuCisgKgorICogUmV0dXJuOiAwIG9uIHN1Y2Nlc3MsIG5lZ2F0aXZlIHZhbHVlIG90aGVyd2lz
ZS4KKyAqLworaW50IGlnY19lbmFibGVfZW1wdHlfYWRkcl9yZWN2KHN0cnVjdCBpZ2NfYWRhcHRl
ciAqYWRhcHRlcikKK3sKKwl1OCBlbXB0eVtFVEhfQUxFTl0gPSB7fTsKKworCXJldHVybiBpZ2Nf
YWRkX21hY19maWx0ZXIoYWRhcHRlciwgSUdDX01BQ19GSUxURVJfVFlQRV9EU1QsIGVtcHR5LCAt
MSk7Cit9CisKK3ZvaWQgaWdjX2Rpc2FibGVfZW1wdHlfYWRkcl9yZWN2KHN0cnVjdCBpZ2NfYWRh
cHRlciAqYWRhcHRlcikKK3sKKwl1OCBlbXB0eVtFVEhfQUxFTl0gPSB7fTsKKworCWlnY19kZWxf
bWFjX2ZpbHRlcihhZGFwdGVyLCBJR0NfTUFDX0ZJTFRFUl9UWVBFX0RTVCwgZW1wdHkpOworfQor
CiAvKioKICAqIGlnY19zZXRfcnhfbW9kZSAtIFNlY29uZGFyeSBVbmljYXN0LCBNdWx0aWNhc3Qg
YW5kIFByb21pc2N1b3VzIG1vZGUgc2V0CiAgKiBAbmV0ZGV2OiBuZXR3b3JrIGludGVyZmFjZSBk
ZXZpY2Ugc3RydWN0dXJlCkBAIC01MjMwLDYgKzUyNjgsOSBAQCB2b2lkIGlnY19kb3duKHN0cnVj
dCBpZ2NfYWRhcHRlciAqYWRhcHRlcikKIAlpZ2NfZGlzYWJsZV9hbGxfdHhfcmluZ3NfaHcoYWRh
cHRlcik7CiAJaWdjX2NsZWFuX2FsbF90eF9yaW5ncyhhZGFwdGVyKTsKIAlpZ2NfY2xlYW5fYWxs
X3J4X3JpbmdzKGFkYXB0ZXIpOworCisJaWYgKGFkYXB0ZXItPmZwZS5tbXN2LnBtYWNfZW5hYmxl
ZCkKKwkJZXRodG9vbF9tbXN2X3N0b3AoJmFkYXB0ZXItPmZwZS5tbXN2KTsKIH0KIAogdm9pZCBp
Z2NfcmVpbml0X2xvY2tlZChzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIpCkBAIC01NzU0LDYg
KzU3OTUsMTAgQEAgc3RhdGljIHZvaWQgaWdjX3dhdGNoZG9nX3Rhc2soc3RydWN0IHdvcmtfc3Ry
dWN0ICp3b3JrKQogCQkJICovCiAJCQlpZ2NfdHNuX2FkanVzdF90eHRpbWVfb2Zmc2V0KGFkYXB0
ZXIpOwogCisJCQlpZiAoYWRhcHRlci0+ZnBlLm1tc3YucG1hY19lbmFibGVkKQorCQkJCWV0aHRv
b2xfbW1zdl9saW5rX3N0YXRlX2hhbmRsZSgmYWRhcHRlci0+ZnBlLm1tc3YsCisJCQkJCQkJICAg
ICAgIHRydWUpOworCiAJCQlpZiAoYWRhcHRlci0+bGlua19zcGVlZCAhPSBTUEVFRF8xMDAwKQog
CQkJCWdvdG8gbm9fd2FpdDsKIApAQCAtNTc4OSw2ICs1ODM0LDEwIEBAIHN0YXRpYyB2b2lkIGln
Y193YXRjaGRvZ190YXNrKHN0cnVjdCB3b3JrX3N0cnVjdCAqd29yaykKIAkJCW5ldGRldl9pbmZv
KG5ldGRldiwgIk5JQyBMaW5rIGlzIERvd25cbiIpOwogCQkJbmV0aWZfY2Fycmllcl9vZmYobmV0
ZGV2KTsKIAorCQkJaWYgKGFkYXB0ZXItPmZwZS5tbXN2LnBtYWNfZW5hYmxlZCkKKwkJCQlldGh0
b29sX21tc3ZfbGlua19zdGF0ZV9oYW5kbGUoJmFkYXB0ZXItPmZwZS5tbXN2LAorCQkJCQkJCSAg
ICAgICBmYWxzZSk7CisKIAkJCS8qIGxpbmsgc3RhdGUgaGFzIGNoYW5nZWQsIHNjaGVkdWxlIHBo
eSBpbmZvIHVwZGF0ZSAqLwogCQkJaWYgKCF0ZXN0X2JpdChfX0lHQ19ET1dOLCAmYWRhcHRlci0+
c3RhdGUpKQogCQkJCW1vZF90aW1lcigmYWRhcHRlci0+cGh5X2luZm9fdGltZXIsCkBAIC03MTA5
LDYgKzcxNTgsOCBAQCBzdGF0aWMgaW50IGlnY19wcm9iZShzdHJ1Y3QgcGNpX2RldiAqcGRldiwK
IAogCWlnY190c25fY2xlYXJfc2NoZWR1bGUoYWRhcHRlcik7CiAKKwlpZ2NfZnBlX2luaXQoYWRh
cHRlcik7CisKIAkvKiByZXNldCB0aGUgaGFyZHdhcmUgd2l0aCB0aGUgbmV3IHNldHRpbmdzICov
CiAJaWdjX3Jlc2V0KGFkYXB0ZXIpOwogCmRpZmYgLS1naXQgYS9kcml2ZXJzL25ldC9ldGhlcm5l
dC9pbnRlbC9pZ2MvaWdjX3Rzbi5jIGIvZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2ln
Y190c24uYwppbmRleCBmMDIxM2NmY2UwN2QuLjBhMmM3NDdmZGUyZCAxMDA2NDQKLS0tIGEvZHJp
dmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY190c24uYworKysgYi9kcml2ZXJzL25ldC9l
dGhlcm5ldC9pbnRlbC9pZ2MvaWdjX3Rzbi5jCkBAIC0yLDkgKzIsMTM1IEBACiAvKiBDb3B5cmln
aHQgKGMpICAyMDE5IEludGVsIENvcnBvcmF0aW9uICovCiAKICNpbmNsdWRlICJpZ2MuaCIKKyNp
bmNsdWRlICJpZ2NfYmFzZS5oIgogI2luY2x1ZGUgImlnY19ody5oIgogI2luY2x1ZGUgImlnY190
c24uaCIKIAorREVGSU5FX1NUQVRJQ19LRVlfRkFMU0UoaWdjX2ZwZV9lbmFibGVkKTsKKworc3Rh
dGljIGludCBpZ2NfZnBlX2luaXRfc21kX2ZyYW1lKHN0cnVjdCBpZ2NfcmluZyAqcmluZywKKwkJ
CQkgIHN0cnVjdCBpZ2NfdHhfYnVmZmVyICpidWZmZXIsCisJCQkJICBzdHJ1Y3Qgc2tfYnVmZiAq
c2tiKQoreworCWRtYV9hZGRyX3QgZG1hID0gZG1hX21hcF9zaW5nbGUocmluZy0+ZGV2LCBza2It
PmRhdGEsIHNrYi0+bGVuLAorCQkJCQlETUFfVE9fREVWSUNFKTsKKworCWlmIChkbWFfbWFwcGlu
Z19lcnJvcihyaW5nLT5kZXYsIGRtYSkpIHsKKwkJbmV0ZGV2X2Vycl9vbmNlKHJpbmctPm5ldGRl
diwgIkZhaWxlZCB0byBtYXAgRE1BIGZvciBUWFxuIik7CisJCXJldHVybiAtRU5PTUVNOworCX0K
KworCWJ1ZmZlci0+c2tiID0gc2tiOworCWJ1ZmZlci0+cHJvdG9jb2wgPSAwOworCWJ1ZmZlci0+
Ynl0ZWNvdW50ID0gc2tiLT5sZW47CisJYnVmZmVyLT5nc29fc2VncyA9IDE7CisJYnVmZmVyLT50
aW1lX3N0YW1wID0gamlmZmllczsKKwlkbWFfdW5tYXBfbGVuX3NldChidWZmZXIsIGxlbiwgc2ti
LT5sZW4pOworCWRtYV91bm1hcF9hZGRyX3NldChidWZmZXIsIGRtYSwgZG1hKTsKKworCXJldHVy
biAwOworfQorCitzdGF0aWMgaW50IGlnY19mcGVfaW5pdF90eF9kZXNjcmlwdG9yKHN0cnVjdCBp
Z2NfcmluZyAqcmluZywKKwkJCQkgICAgICBzdHJ1Y3Qgc2tfYnVmZiAqc2tiLAorCQkJCSAgICAg
IGVudW0gaWdjX3R4ZF9wb3B0c190eXBlIHR5cGUpCit7CisJdTMyIGNtZF90eXBlLCBvbGluZm9f
c3RhdHVzID0gMDsKKwlzdHJ1Y3QgaWdjX3R4X2J1ZmZlciAqYnVmZmVyOworCXVuaW9uIGlnY19h
ZHZfdHhfZGVzYyAqZGVzYzsKKwlpbnQgZXJyOworCisJaWYgKCFpZ2NfZGVzY191bnVzZWQocmlu
ZykpCisJCXJldHVybiAtRUJVU1k7CisKKwlidWZmZXIgPSAmcmluZy0+dHhfYnVmZmVyX2luZm9b
cmluZy0+bmV4dF90b191c2VdOworCWVyciA9IGlnY19mcGVfaW5pdF9zbWRfZnJhbWUocmluZywg
YnVmZmVyLCBza2IpOworCWlmIChlcnIpCisJCXJldHVybiBlcnI7CisKKwljbWRfdHlwZSA9IElH
Q19BRFZUWERfRFRZUF9EQVRBIHwgSUdDX0FEVlRYRF9EQ01EX0RFWFQgfAorCQkgICBJR0NfQURW
VFhEX0RDTURfSUZDUyB8IElHQ19UWERfRENNRCB8CisJCSAgIGJ1ZmZlci0+Ynl0ZWNvdW50Owor
CisJb2xpbmZvX3N0YXR1cyB8PSBGSUVMRF9QUkVQKElHQ19BRFZUWERfUEFZTEVOX01BU0ssIGJ1
ZmZlci0+Ynl0ZWNvdW50KTsKKworCXN3aXRjaCAodHlwZSkgeworCWNhc2UgU01EX1Y6CisJY2Fz
ZSBTTURfUjoKKwkJb2xpbmZvX3N0YXR1cyB8PSBGSUVMRF9QUkVQKElHQ19UWERfUE9QVFNfU01E
X01BU0ssIHR5cGUpOworCQlicmVhazsKKwl9CisKKwlkZXNjID0gSUdDX1RYX0RFU0MocmluZywg
cmluZy0+bmV4dF90b191c2UpOworCWRlc2MtPnJlYWQuY21kX3R5cGVfbGVuID0gY3B1X3RvX2xl
MzIoY21kX3R5cGUpOworCWRlc2MtPnJlYWQub2xpbmZvX3N0YXR1cyA9IGNwdV90b19sZTMyKG9s
aW5mb19zdGF0dXMpOworCWRlc2MtPnJlYWQuYnVmZmVyX2FkZHIgPSBjcHVfdG9fbGU2NChkbWFf
dW5tYXBfYWRkcihidWZmZXIsIGRtYSkpOworCisJbmV0ZGV2X3R4X3NlbnRfcXVldWUodHhyaW5n
X3R4cShyaW5nKSwgc2tiLT5sZW4pOworCisJYnVmZmVyLT5uZXh0X3RvX3dhdGNoID0gZGVzYzsK
KwlyaW5nLT5uZXh0X3RvX3VzZSA9IChyaW5nLT5uZXh0X3RvX3VzZSArIDEpICUgcmluZy0+Y291
bnQ7CisKKwlyZXR1cm4gMDsKK30KKworc3RhdGljIGludCBpZ2NfZnBlX3htaXRfc21kX2ZyYW1l
KHN0cnVjdCBpZ2NfYWRhcHRlciAqYWRhcHRlciwKKwkJCQkgIGVudW0gaWdjX3R4ZF9wb3B0c190
eXBlIHR5cGUpCit7CisJaW50IGNwdSA9IHNtcF9wcm9jZXNzb3JfaWQoKTsKKwlzdHJ1Y3QgbmV0
ZGV2X3F1ZXVlICpucTsKKwlzdHJ1Y3QgaWdjX3JpbmcgKnJpbmc7CisJc3RydWN0IHNrX2J1ZmYg
KnNrYjsKKwlpbnQgZXJyOworCisJcmluZyA9IGlnY19nZXRfdHhfcmluZyhhZGFwdGVyLCBjcHUp
OworCW5xID0gdHhyaW5nX3R4cShyaW5nKTsKKworCXNrYiA9IGFsbG9jX3NrYihTTURfRlJBTUVf
U0laRSwgR0ZQX0FUT01JQyk7CisJaWYgKCFza2IpCisJCXJldHVybiAtRU5PTUVNOworCisJc2ti
X3B1dF96ZXJvKHNrYiwgU01EX0ZSQU1FX1NJWkUpOworCisJX19uZXRpZl90eF9sb2NrKG5xLCBj
cHUpOworCisJZXJyID0gaWdjX2ZwZV9pbml0X3R4X2Rlc2NyaXB0b3IocmluZywgc2tiLCB0eXBl
KTsKKwlpZ2NfZmx1c2hfdHhfZGVzY3JpcHRvcnMocmluZyk7CisKKwlfX25ldGlmX3R4X3VubG9j
ayhucSk7CisKKwlyZXR1cm4gZXJyOworfQorCitzdGF0aWMgdm9pZCBpZ2NfZnBlX3NlbmRfbXBh
Y2tldChzdHJ1Y3QgZXRodG9vbF9tbXN2ICptbXN2LAorCQkJCSBlbnVtIGV0aHRvb2xfbXBhY2tl
dCB0eXBlKQoreworCXN0cnVjdCBpZ2NfZnBlX3QgKmZwZSA9IGNvbnRhaW5lcl9vZihtbXN2LCBz
dHJ1Y3QgaWdjX2ZwZV90LCBtbXN2KTsKKwlzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXI7CisJ
aW50IGVycjsKKworCWFkYXB0ZXIgPSBjb250YWluZXJfb2YoZnBlLCBzdHJ1Y3QgaWdjX2FkYXB0
ZXIsIGZwZSk7CisKKwlpZiAodHlwZSA9PSBFVEhUT09MX01QQUNLRVRfVkVSSUZZKSB7CisJCWVy
ciA9IGlnY19mcGVfeG1pdF9zbWRfZnJhbWUoYWRhcHRlciwgU01EX1YpOworCQlpZiAoZXJyICYm
IG5ldF9yYXRlbGltaXQoKSkKKwkJCW5ldGRldl9lcnIoYWRhcHRlci0+bmV0ZGV2LCAiRXJyb3Ig
c2VuZGluZyBTTUQtVlxuIik7CisJfSBlbHNlIGlmICh0eXBlID09IEVUSFRPT0xfTVBBQ0tFVF9S
RVNQT05TRSkgeworCQllcnIgPSBpZ2NfZnBlX3htaXRfc21kX2ZyYW1lKGFkYXB0ZXIsIFNNRF9S
KTsKKwkJaWYgKGVyciAmJiBuZXRfcmF0ZWxpbWl0KCkpCisJCQluZXRkZXZfZXJyKGFkYXB0ZXIt
Pm5ldGRldiwgIkVycm9yIHNlbmRpbmcgU01ELVIgZnJhbWVcbiIpOworCX0KK30KKworc3RhdGlj
IGNvbnN0IHN0cnVjdCBldGh0b29sX21tc3Zfb3BzIGlnY19tbXN2X29wcyA9IHsKKwkuc2VuZF9t
cGFja2V0ID0gaWdjX2ZwZV9zZW5kX21wYWNrZXQsCit9OworCit2b2lkIGlnY19mcGVfaW5pdChz
dHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIpCit7CisJZXRodG9vbF9tbXN2X2luaXQoJmFkYXB0
ZXItPmZwZS5tbXN2LCBhZGFwdGVyLT5uZXRkZXYsICZpZ2NfbW1zdl9vcHMpOworfQorCiBzdGF0
aWMgYm9vbCBpc19hbnlfbGF1bmNodGltZShzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIpCiB7
CiAJaW50IGk7CkBAIC00OSw2ICsxNzUsOSBAQCBzdGF0aWMgdW5zaWduZWQgaW50IGlnY190c25f
bmV3X2ZsYWdzKHN0cnVjdCBpZ2NfYWRhcHRlciAqYWRhcHRlcikKIAlpZiAoYWRhcHRlci0+c3Ry
aWN0X3ByaW9yaXR5X2VuYWJsZSkKIAkJbmV3X2ZsYWdzIHw9IElHQ19GTEFHX1RTTl9MRUdBQ1lf
RU5BQkxFRDsKIAorCWlmIChhZGFwdGVyLT5mcGUubW1zdi5wbWFjX2VuYWJsZWQpCisJCW5ld19m
bGFncyB8PSBJR0NfRkxBR19UU05fUFJFRU1QVF9FTkFCTEVEOworCiAJcmV0dXJuIG5ld19mbGFn
czsKIH0KIApAQCAtMTQ4LDcgKzI3Nyw4IEBAIHN0YXRpYyBpbnQgaWdjX3Rzbl9kaXNhYmxlX29m
ZmxvYWQoc3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVyKQogCiAJdHFhdmN0cmwgPSByZDMyKElH
Q19UUUFWQ1RSTCk7CiAJdHFhdmN0cmwgJj0gfihJR0NfVFFBVkNUUkxfVFJBTlNNSVRfTU9ERV9U
U04gfAotCQkgICAgICBJR0NfVFFBVkNUUkxfRU5IQU5DRURfUUFWIHwgSUdDX1RRQVZDVFJMX0ZV
VFNDRERJUyk7CisJCSAgICAgIElHQ19UUUFWQ1RSTF9FTkhBTkNFRF9RQVYgfCBJR0NfVFFBVkNU
UkxfRlVUU0NERElTIHwKKwkJICAgICAgSUdDX1RRQVZDVFJMX1BSRUVNUFRfRU5BKTsKIAogCXdy
MzIoSUdDX1RRQVZDVFJMLCB0cWF2Y3RybCk7CiAKQEAgLTM3MCwxMCArNTAwLDE0IEBAIHN0YXRp
YyBpbnQgaWdjX3Rzbl9lbmFibGVfb2ZmbG9hZChzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIp
CiAJCXdyMzIoSUdDX1RYUUNUTChpKSwgdHhxY3RsKTsKIAl9CiAKLQl0cWF2Y3RybCA9IHJkMzIo
SUdDX1RRQVZDVFJMKSAmIH5JR0NfVFFBVkNUUkxfRlVUU0NERElTOworCXRxYXZjdHJsID0gcmQz
MihJR0NfVFFBVkNUUkwpICYgfihJR0NfVFFBVkNUUkxfRlVUU0NERElTIHwKKwkJICAgSUdDX1RR
QVZDVFJMX1BSRUVNUFRfRU5BKTsKIAogCXRxYXZjdHJsIHw9IElHQ19UUUFWQ1RSTF9UUkFOU01J
VF9NT0RFX1RTTiB8IElHQ19UUUFWQ1RSTF9FTkhBTkNFRF9RQVY7CiAKKwlpZiAoYWRhcHRlci0+
ZnBlLm1tc3YucG1hY19lbmFibGVkKQorCQl0cWF2Y3RybCB8PSBJR0NfVFFBVkNUUkxfUFJFRU1Q
VF9FTkE7CisKIAlhZGFwdGVyLT5xYnZfY291bnQrKzsKIAogCWN5Y2xlID0gYWRhcHRlci0+Y3lj
bGVfdGltZTsKQEAgLTQzNCw2ICs1NjgsMTQgQEAgaW50IGlnY190c25fcmVzZXQoc3RydWN0IGln
Y19hZGFwdGVyICphZGFwdGVyKQogCXVuc2lnbmVkIGludCBuZXdfZmxhZ3M7CiAJaW50IGVyciA9
IDA7CiAKKwlpZiAoYWRhcHRlci0+ZnBlLm1tc3YucG1hY19lbmFibGVkKSB7CisJCWVyciA9IGln
Y19lbmFibGVfZW1wdHlfYWRkcl9yZWN2KGFkYXB0ZXIpOworCQlpZiAoZXJyICYmIG5ldF9yYXRl
bGltaXQoKSkKKwkJCW5ldGRldl9lcnIoYWRhcHRlci0+bmV0ZGV2LCAiRXJyb3IgYWRkaW5nIGVt
cHR5IGFkZHJlc3MgdG8gTUFDIGZpbHRlclxuIik7CisJfSBlbHNlIHsKKwkJaWdjX2Rpc2FibGVf
ZW1wdHlfYWRkcl9yZWN2KGFkYXB0ZXIpOworCX0KKwogCW5ld19mbGFncyA9IGlnY190c25fbmV3
X2ZsYWdzKGFkYXB0ZXIpOwogCiAJaWYgKCEobmV3X2ZsYWdzICYgSUdDX0ZMQUdfVFNOX0FOWV9F
TkFCTEVEKSkKZGlmZiAtLWdpdCBhL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2Nf
dHNuLmggYi9kcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2MvaWdjX3Rzbi5oCmluZGV4IDk4
ZWM4NDVhODZiZi4uYTI1MzQyMjhjYzBlIDEwMDY0NAotLS0gYS9kcml2ZXJzL25ldC9ldGhlcm5l
dC9pbnRlbC9pZ2MvaWdjX3Rzbi5oCisrKyBiL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2ln
Yy9pZ2NfdHNuLmgKQEAgLTQsOSArNCw2MiBAQAogI2lmbmRlZiBfSUdDX1RTTl9IXwogI2RlZmlu
ZSBfSUdDX1RTTl9IXwogCisjZGVmaW5lIFNNRF9GUkFNRV9TSVpFCQkJNjAKKworZW51bSBpZ2Nf
dHhkX3BvcHRzX3R5cGUgeworCVNNRF9WID0gMHgwMSwKKwlTTURfUiA9IDB4MDIsCit9OworCitE
RUNMQVJFX1NUQVRJQ19LRVlfRkFMU0UoaWdjX2ZwZV9lbmFibGVkKTsKKwordm9pZCBpZ2NfZnBl
X2luaXQoc3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVyKTsKK3UzMiBpZ2NfZnBlX2dldF9zdXBw
b3J0ZWRfZnJhZ19zaXplKHUzMiB1c2VyX2ZyYWdfc2l6ZSk7CiBpbnQgaWdjX3Rzbl9vZmZsb2Fk
X2FwcGx5KHN0cnVjdCBpZ2NfYWRhcHRlciAqYWRhcHRlcik7CiBpbnQgaWdjX3Rzbl9yZXNldChz
dHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIpOwogdm9pZCBpZ2NfdHNuX2FkanVzdF90eHRpbWVf
b2Zmc2V0KHN0cnVjdCBpZ2NfYWRhcHRlciAqYWRhcHRlcik7CiBib29sIGlnY190c25faXNfdGFw
cmlvX2FjdGl2YXRlZF9ieV91c2VyKHN0cnVjdCBpZ2NfYWRhcHRlciAqYWRhcHRlcik7CiAKK3N0
YXRpYyBpbmxpbmUgYm9vbCBpZ2NfZnBlX2lzX3BtYWNfZW5hYmxlZChzdHJ1Y3QgaWdjX2FkYXB0
ZXIgKmFkYXB0ZXIpCit7CisJcmV0dXJuIHN0YXRpY19icmFuY2hfdW5saWtlbHkoJmlnY19mcGVf
ZW5hYmxlZCkgJiYKKwkgICAgICAgYWRhcHRlci0+ZnBlLm1tc3YucG1hY19lbmFibGVkOworfQor
CitzdGF0aWMgaW5saW5lIGJvb2wgaWdjX2ZwZV9pc192ZXJpZnlfb3JfcmVzcG9uc2UodW5pb24g
aWdjX2Fkdl9yeF9kZXNjICpyeF9kZXNjLAorCQkJCQkJIHVuc2lnbmVkIGludCBzaXplLCB2b2lk
ICpwa3RidWYpCit7CisJdTMyIHN0YXR1c19lcnJvciA9IGxlMzJfdG9fY3B1KHJ4X2Rlc2MtPndi
LnVwcGVyLnN0YXR1c19lcnJvcik7CisJc3RhdGljIGNvbnN0IHU4IHplcm9fcGF5bG9hZFtTTURf
RlJBTUVfU0laRV0gPSB7MH07CisJaW50IHNtZDsKKworCXNtZCA9IEZJRUxEX0dFVChJR0NfUlhE
QURWX1NUQVRfU01EX1RZUEVfTUFTSywgc3RhdHVzX2Vycm9yKTsKKworCXJldHVybiAoc21kID09
IElHQ19SWERfU1RBVF9TTURfVFlQRV9WIHx8IHNtZCA9PSBJR0NfUlhEX1NUQVRfU01EX1RZUEVf
UikgJiYKKwkJc2l6ZSA9PSBTTURfRlJBTUVfU0laRSAmJgorCQkhbWVtY21wKHBrdGJ1ZiwgemVy
b19wYXlsb2FkLCBTTURfRlJBTUVfU0laRSk7IC8qIEJ1ZmZlciBpcyBhbGwgemVyb3MgKi8KK30K
Kworc3RhdGljIGlubGluZSB2b2lkIGlnY19mcGVfbHBfZXZlbnRfc3RhdHVzKHVuaW9uIGlnY19h
ZHZfcnhfZGVzYyAqcnhfZGVzYywKKwkJCQkJICAgc3RydWN0IGV0aHRvb2xfbW1zdiAqbW1zdikK
K3sKKwl1MzIgc3RhdHVzX2Vycm9yID0gbGUzMl90b19jcHUocnhfZGVzYy0+d2IudXBwZXIuc3Rh
dHVzX2Vycm9yKTsKKwlpbnQgc21kOworCisJc21kID0gRklFTERfR0VUKElHQ19SWERBRFZfU1RB
VF9TTURfVFlQRV9NQVNLLCBzdGF0dXNfZXJyb3IpOworCisJaWYgKHNtZCA9PSBJR0NfUlhEX1NU
QVRfU01EX1RZUEVfVikKKwkJZXRodG9vbF9tbXN2X2V2ZW50X2hhbmRsZShtbXN2LCBFVEhUT09M
X01NU1ZfTFBfU0VOVF9WRVJJRllfTVBBQ0tFVCk7CisJZWxzZSBpZiAoc21kID09IElHQ19SWERf
U1RBVF9TTURfVFlQRV9SKQorCQlldGh0b29sX21tc3ZfZXZlbnRfaGFuZGxlKG1tc3YsIEVUSFRP
T0xfTU1TVl9MUF9TRU5UX1JFU1BPTlNFX01QQUNLRVQpOworfQorCitzdGF0aWMgaW5saW5lIGJv
b2wgaWdjX2ZwZV90cmFuc21pdHRlZF9zbWRfdih1bmlvbiBpZ2NfYWR2X3R4X2Rlc2MgKnR4X2Rl
c2MpCit7CisJdTMyIG9saW5mb19zdGF0dXMgPSBsZTMyX3RvX2NwdSh0eF9kZXNjLT5yZWFkLm9s
aW5mb19zdGF0dXMpOworCXU4IHNtZCA9IEZJRUxEX0dFVChJR0NfVFhEX1BPUFRTX1NNRF9NQVNL
LCBvbGluZm9fc3RhdHVzKTsKKworCXJldHVybiBzbWQgPT0gU01EX1Y7Cit9CisKICNlbmRpZiAv
KiBfSUdDX0JBU0VfSCAqLwotLSAKMi4zNC4xCgpfX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fXwpMaW51eC1zdG0zMiBtYWlsaW5nIGxpc3QKTGludXgtc3RtMzJA
c3QtbWQtbWFpbG1hbi5zdG9ybXJlcGx5LmNvbQpodHRwczovL3N0LW1kLW1haWxtYW4uc3Rvcm1y
ZXBseS5jb20vbWFpbG1hbi9saXN0aW5mby9saW51eC1zdG0zMgo=
