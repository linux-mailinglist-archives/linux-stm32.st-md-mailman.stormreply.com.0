Return-Path: <linux-stm32-bounces@st-md-mailman.stormreply.com>
X-Original-To: lists+linux-stm32@lfdr.de
Delivered-To: lists+linux-stm32@lfdr.de
Received: from stm-ict-prod-mailman-01.stormreply.prv (st-md-mailman.stormreply.com [52.209.6.89])
	by mail.lfdr.de (Postfix) with ESMTPS id 32A83345F11
	for <lists+linux-stm32@lfdr.de>; Tue, 23 Mar 2021 14:11:43 +0100 (CET)
Received: from ip-172-31-3-76.eu-west-1.compute.internal (localhost [127.0.0.1])
	by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTP id BF5D2C57B5A;
	Tue, 23 Mar 2021 13:11:42 +0000 (UTC)
Received: from mga02.intel.com (mga02.intel.com [134.134.136.20])
 (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTPS id 3DAA7C3FAD6
 for <linux-stm32@st-md-mailman.stormreply.com>;
 Tue, 23 Mar 2021 11:03:27 +0000 (UTC)
IronPort-SDR: uZilP+1H9RZijIrrfQ3klIh9mNV7PMT7OwMRBVXtk2l4NnD6g1vmOdWfn3Fi2jt1Q9gehJziTJ
 k3Q8p4BGFaSg==
X-IronPort-AV: E=McAfee;i="6000,8403,9931"; a="177578269"
X-IronPort-AV: E=Sophos;i="5.81,271,1610438400"; d="scan'208";a="177578269"
Received: from fmsmga007.fm.intel.com ([10.253.24.52])
 by orsmga101.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384;
 23 Mar 2021 04:03:24 -0700
IronPort-SDR: 2o/Vm+yTIIzIDuKJWZ1unTTJuOR3VX5RqP3tunNTe5IhWB0lhYnles4+0yJOm7EIed3mSNQDR8
 iSKeV7FT2dhA==
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.81,271,1610438400"; d="scan'208";a="381318391"
Received: from linux.intel.com ([10.54.29.200])
 by fmsmga007.fm.intel.com with ESMTP; 23 Mar 2021 04:03:23 -0700
Received: from glass.png.intel.com (glass.png.intel.com [10.158.65.59])
 by linux.intel.com (Postfix) with ESMTP id 3F513580718;
 Tue, 23 Mar 2021 04:03:20 -0700 (PDT)
From: Wong Vee Khee <vee.khee.wong@linux.intel.com>
To: Giuseppe Cavallaro <peppe.cavallaro@st.com>,
 Alexandre Torgue <alexandre.torgue@st.com>,
 Jose Abreu <joabreu@synopsys.com>,
 "David S . Miller" <davem@davemloft.net>, Jakub Kicinski <kuba@kernel.org>,
 Maxime Coquelin <mcoquelin.stm32@gmail.com>
Date: Tue, 23 Mar 2021 19:07:34 +0800
Message-Id: <20210323110734.3800-1-vee.khee.wong@linux.intel.com>
X-Mailer: git-send-email 2.25.1
MIME-Version: 1.0
X-Mailman-Approved-At: Tue, 23 Mar 2021 13:11:41 +0000
Cc: Voon Wei Feng <weifeng.voon@intel.com>, netdev@vger.kernel.org,
 linux-kernel@vger.kernel.org, Ong Boon Leong <boon.leong.ong@intel.com>,
 linux-stm32@st-md-mailman.stormreply.com, linux-arm-kernel@lists.infradead.org
Subject: [Linux-stm32] [PATCH net-next 1/1] net: stmmac: Add hardware
	supported cross-timestamp
X-BeenThere: linux-stm32@st-md-mailman.stormreply.com
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: <linux-stm32.st-md-mailman.stormreply.com>
List-Unsubscribe: <https://st-md-mailman.stormreply.com/mailman/options/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=unsubscribe>
List-Archive: <http://st-md-mailman.stormreply.com/pipermail/linux-stm32/>
List-Post: <mailto:linux-stm32@st-md-mailman.stormreply.com>
List-Help: <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=help>
List-Subscribe: <https://st-md-mailman.stormreply.com/mailman/listinfo/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: linux-stm32-bounces@st-md-mailman.stormreply.com
Sender: "Linux-stm32" <linux-stm32-bounces@st-md-mailman.stormreply.com>

RnJvbTogVGFuIFRlZSBNaW4gPHRlZS5taW4udGFuQGludGVsLmNvbT4KCkNyb3NzIHRpbWVzdGFt
cGluZyBpcyBzdXBwb3J0ZWQgb24gSW50ZWdyYXRlZCBFdGhlcm5ldCBDb250cm9sbGVyIGluCklu
dGVsIFNvQyBzdWNoIGFzIEVITCBhbmQgVEdMIHdpdGggQWx3YXlzIFJ1bm5pbmcgVGltZXIuCgpU
aGUgaGFyZHdhcmUgY3Jvc3MtdGltZXN0YW1wIHJlc3VsdCBpcyBtYWRlIGF2YWlsYWJsZSB0bwph
cHBsaWNhdGlvbnMgdGhyb3VnaCB0aGUgUFRQX1NZU19PRkZTRVRfUFJFQ0lTRSBpb2N0bCB3aGlj
aCBjYWxscwpzdG1tYWNfZ2V0Y3Jvc3N0c3RhbXAoKS4KCkRldmljZSB0aW1lIGlzIHN0b3JlZCBp
biB0aGUgTUFDIEF1eGlsaWFyeSByZWdpc3Rlci4gVGhlIDY0LWJpdCBTeXN0ZW0KdGltZSAoQVJU
IHRpbWVzdGFtcCkgaXMgc3RvcmVkIGluIHJlZ2lzdGVycyB0aGF0IGFyZSBvbmx5IGFkZHJlc3Nh
YmxlCmJ5IHVzaW5nIE1ESU8gc3BhY2UuCgpTaWduZWQtb2ZmLWJ5OiBUYW4gVGVlIE1pbiA8dGVl
Lm1pbi50YW5AaW50ZWwuY29tPgpDby1kZXZlbG9wZWQtYnk6IFdvbmcgVmVlIEtoZWUgPHZlZS5r
aGVlLndvbmdAbGludXguaW50ZWwuY29tPgpTaWduZWQtb2ZmLWJ5OiBXb25nIFZlZSBLaGVlIDx2
ZWUua2hlZS53b25nQGxpbnV4LmludGVsLmNvbT4KLS0tCiBkcml2ZXJzL25ldC9ldGhlcm5ldC9z
dG1pY3JvL3N0bW1hYy9jb21tb24uaCAgfCAgIDIgKwogLi4uL25ldC9ldGhlcm5ldC9zdG1pY3Jv
L3N0bW1hYy9kd21hYy1pbnRlbC5jIHwgMTA4ICsrKysrKysrKysrKysrKysrKwogZHJpdmVycy9u
ZXQvZXRoZXJuZXQvc3RtaWNyby9zdG1tYWMvZHdtYWM0LmggIHwgICA4ICsrCiAuLi4vbmV0L2V0
aGVybmV0L3N0bWljcm8vc3RtbWFjL2R3bWFjNF9kbWEuYyAgfCAgIDIgKwogZHJpdmVycy9uZXQv
ZXRoZXJuZXQvc3RtaWNyby9zdG1tYWMvaHdpZi5oICAgIHwgICAzICsKIC4uLi9ldGhlcm5ldC9z
dG1pY3JvL3N0bW1hYy9zdG1tYWNfaHd0c3RhbXAuYyB8ICAxMSArKwogLi4uL25ldC9ldGhlcm5l
dC9zdG1pY3JvL3N0bW1hYy9zdG1tYWNfcHRwLmMgIHwgIDMyICsrKysrKwogLi4uL25ldC9ldGhl
cm5ldC9zdG1pY3JvL3N0bW1hYy9zdG1tYWNfcHRwLmggIHwgIDIzICsrKysKIGluY2x1ZGUvbGlu
dXgvc3RtbWFjLmggICAgICAgICAgICAgICAgICAgICAgICB8ICAgNCArCiA5IGZpbGVzIGNoYW5n
ZWQsIDE5MyBpbnNlcnRpb25zKCspCgpkaWZmIC0tZ2l0IGEvZHJpdmVycy9uZXQvZXRoZXJuZXQv
c3RtaWNyby9zdG1tYWMvY29tbW9uLmggYi9kcml2ZXJzL25ldC9ldGhlcm5ldC9zdG1pY3JvL3N0
bW1hYy9jb21tb24uaAppbmRleCAxYzBjNjBiZGY4NTQuLjk1NDY5MDU5ZGNhMSAxMDA2NDQKLS0t
IGEvZHJpdmVycy9uZXQvZXRoZXJuZXQvc3RtaWNyby9zdG1tYWMvY29tbW9uLmgKKysrIGIvZHJp
dmVycy9uZXQvZXRoZXJuZXQvc3RtaWNyby9zdG1tYWMvY29tbW9uLmgKQEAgLTM4OCw2ICszODgs
OCBAQCBzdHJ1Y3QgZG1hX2ZlYXR1cmVzIHsKIAl1bnNpZ25lZCBpbnQgZXN0c2VsOwogCXVuc2ln
bmVkIGludCBmcGVzZWw7CiAJdW5zaWduZWQgaW50IHRic3NlbDsKKwkvKiBOdW1iZXJzIG9mIEF1
eGlsaWFyeSBTbmFwc2hvdCBJbnB1dHMgKi8KKwl1bnNpZ25lZCBpbnQgYXV4X3NuYXBzaG90X247
CiB9OwogCiAvKiBSWCBCdWZmZXIgc2l6ZSBtdXN0IGJlIG11bHRpcGxlIG9mIDQvOC8xNiBieXRl
cyAqLwpkaWZmIC0tZ2l0IGEvZHJpdmVycy9uZXQvZXRoZXJuZXQvc3RtaWNyby9zdG1tYWMvZHdt
YWMtaW50ZWwuYyBiL2RyaXZlcnMvbmV0L2V0aGVybmV0L3N0bWljcm8vc3RtbWFjL2R3bWFjLWlu
dGVsLmMKaW5kZXggNzYzYjU0OWUzYzJkLi45OTIyOTRkMjU3MDYgMTAwNjQ0Ci0tLSBhL2RyaXZl
cnMvbmV0L2V0aGVybmV0L3N0bWljcm8vc3RtbWFjL2R3bWFjLWludGVsLmMKKysrIGIvZHJpdmVy
cy9uZXQvZXRoZXJuZXQvc3RtaWNyby9zdG1tYWMvZHdtYWMtaW50ZWwuYwpAQCAtOCw2ICs4LDcg
QEAKICNpbmNsdWRlICJkd21hYy1pbnRlbC5oIgogI2luY2x1ZGUgImR3bWFjNC5oIgogI2luY2x1
ZGUgInN0bW1hYy5oIgorI2luY2x1ZGUgInN0bW1hY19wdHAuaCIKIAogI2RlZmluZSBJTlRFTF9N
R0JFX0FESE9DX0FERFIJMHgxNQogI2RlZmluZSBJTlRFTF9NR0JFX1hQQ1NfQUREUgkweDE2CkBA
IC0yNDAsNiArMjQxLDEwOCBAQCBzdGF0aWMgdm9pZCBpbnRlbF9tZ2JlX3B0cF9jbGtfZnJlcV9j
b25maWcodm9pZCAqbnByaXYpCiAJd3JpdGVsKGdwaW9fdmFsdWUsIHByaXYtPmlvYWRkciArIEdN
QUNfR1BJT19TVEFUVVMpOwogfQogCitzdGF0aWMgdm9pZCBnZXRfYXJ0dGltZShzdHJ1Y3QgbWlp
X2J1cyAqbWlpLCBpbnQgaW50ZWxfYWRob2NfYWRkciwKKwkJCXU2NCAqYXJ0X3RpbWUpCit7CisJ
dTY0IG5zOworCisJbnMgPSBtZGlvYnVzX3JlYWQobWlpLCBpbnRlbF9hZGhvY19hZGRyLCBQTUNf
QVJUX1ZBTFVFMyk7CisJbnMgPDw9IEdNQUM0X0FSVF9USU1FX1NISUZUOworCW5zIHw9IG1kaW9i
dXNfcmVhZChtaWksIGludGVsX2FkaG9jX2FkZHIsIFBNQ19BUlRfVkFMVUUyKTsKKwlucyA8PD0g
R01BQzRfQVJUX1RJTUVfU0hJRlQ7CisJbnMgfD0gbWRpb2J1c19yZWFkKG1paSwgaW50ZWxfYWRo
b2NfYWRkciwgUE1DX0FSVF9WQUxVRTEpOworCW5zIDw8PSBHTUFDNF9BUlRfVElNRV9TSElGVDsK
KwlucyB8PSBtZGlvYnVzX3JlYWQobWlpLCBpbnRlbF9hZGhvY19hZGRyLCBQTUNfQVJUX1ZBTFVF
MCk7CisKKwkqYXJ0X3RpbWUgPSBuczsKK30KKworc3RhdGljIGludCBpbnRlbF9jcm9zc3RzdGFt
cChrdGltZV90ICpkZXZpY2UsCisJCQkgICAgIHN0cnVjdCBzeXN0ZW1fY291bnRlcnZhbF90ICpz
eXN0ZW0sCisJCQkgICAgIHZvaWQgKmN0eCkKK3sKKwlzdHJ1Y3QgaW50ZWxfcHJpdl9kYXRhICpp
bnRlbF9wcml2OworCisJc3RydWN0IHN0bW1hY19wcml2ICpwcml2ID0gKHN0cnVjdCBzdG1tYWNf
cHJpdiAqKWN0eDsKKwl2b2lkIF9faW9tZW0gKnB0cGFkZHIgPSBwcml2LT5wdHBhZGRyOworCXZv
aWQgX19pb21lbSAqaW9hZGRyID0gcHJpdi0+aHctPnBjc3I7CisJdW5zaWduZWQgbG9uZyBmbGFn
czsKKwl1NjQgYXJ0X3RpbWUgPSAwOworCXU2NCBwdHBfdGltZSA9IDA7CisJdTMyIG51bV9zbmFw
c2hvdDsKKwl1MzIgZ3Bpb192YWx1ZTsKKwl1MzIgYWNyX3ZhbHVlOworCWludCByZXQ7CisJdTMy
IHY7CisJaW50IGk7CisKKwlpZiAoIWJvb3RfY3B1X2hhcyhYODZfRkVBVFVSRV9BUlQpKQorCQly
ZXR1cm4gLUVPUE5PVFNVUFA7CisKKwlpbnRlbF9wcml2ID0gcHJpdi0+cGxhdC0+YnNwX3ByaXY7
CisKKwkvKiBFbmFibGUgSW50ZXJuYWwgc25hcHNob3QgdHJpZ2dlciAqLworCWFjcl92YWx1ZSA9
IHJlYWRsKHB0cGFkZHIgKyBQVFBfQUNSKTsKKwlhY3JfdmFsdWUgJj0gflBUUF9BQ1JfTUFTSzsK
Kwlzd2l0Y2ggKHByaXYtPnBsYXQtPmludF9zbmFwc2hvdF9udW0pIHsKKwljYXNlIEFVWF9TTkFQ
U0hPVDA6CisJCWFjcl92YWx1ZSB8PSBQVFBfQUNSX0FUU0VOMDsKKwkJYnJlYWs7CisJY2FzZSBB
VVhfU05BUFNIT1QxOgorCQlhY3JfdmFsdWUgfD0gUFRQX0FDUl9BVFNFTjE7CisJCWJyZWFrOwor
CWNhc2UgQVVYX1NOQVBTSE9UMjoKKwkJYWNyX3ZhbHVlIHw9IFBUUF9BQ1JfQVRTRU4yOworCQli
cmVhazsKKwljYXNlIEFVWF9TTkFQU0hPVDM6CisJCWFjcl92YWx1ZSB8PSBQVFBfQUNSX0FUU0VO
MzsKKwkJYnJlYWs7CisJZGVmYXVsdDoKKwkJcmV0dXJuIC1FSU5WQUw7CisJfQorCXdyaXRlbChh
Y3JfdmFsdWUsIHB0cGFkZHIgKyBQVFBfQUNSKTsKKworCS8qIENsZWFyIEZJRk8gKi8KKwlhY3Jf
dmFsdWUgPSByZWFkbChwdHBhZGRyICsgUFRQX0FDUik7CisJYWNyX3ZhbHVlIHw9IFBUUF9BQ1Jf
QVRTRkM7CisJd3JpdGVsKGFjcl92YWx1ZSwgcHRwYWRkciArIFBUUF9BQ1IpOworCisJLyogVHJp
Z2dlciBJbnRlcm5hbCBzbmFwc2hvdCBzaWduYWwKKwkgKiBDcmVhdGUgYSByaXNpbmcgZWRnZSBi
eSBqdXN0IHRvZ2dsZSB0aGUgR1BPMSB0byBsb3cKKwkgKiBhbmQgYmFjayB0byBoaWdoLgorCSAq
LworCWdwaW9fdmFsdWUgPSByZWFkbChpb2FkZHIgKyBHTUFDX0dQSU9fU1RBVFVTKTsKKwlncGlv
X3ZhbHVlICY9IH5HTUFDX0dQTzE7CisJd3JpdGVsKGdwaW9fdmFsdWUsIGlvYWRkciArIEdNQUNf
R1BJT19TVEFUVVMpOworCWdwaW9fdmFsdWUgfD0gR01BQ19HUE8xOworCXdyaXRlbChncGlvX3Zh
bHVlLCBpb2FkZHIgKyBHTUFDX0dQSU9fU1RBVFVTKTsKKworCS8qIFBvbGwgZm9yIHRpbWUgc3lu
YyBvcGVyYXRpb24gZG9uZSAqLworCXJldCA9IHJlYWRsX3BvbGxfdGltZW91dChwcml2LT5pb2Fk
ZHIgKyBHTUFDX0lOVF9TVEFUVVMsIHYsCisJCQkJICh2ICYgR01BQ19JTlRfVFNJRSksIDEwMCwg
MTAwMDApOworCisJaWYgKHJldCA9PSAtRVRJTUVET1VUKSB7CisJCXByX2VycigiJXM6IFdhaXQg
Zm9yIHRpbWUgc3luYyBvcGVyYXRpb24gdGltZW91dFxuIiwgX19mdW5jX18pOworCQlyZXR1cm4g
cmV0OworCX0KKworCW51bV9zbmFwc2hvdCA9IChyZWFkbChpb2FkZHIgKyBHTUFDX1RJTUVTVEFN
UF9TVEFUVVMpICYKKwkJCUdNQUNfVElNRVNUQU1QX0FUU05TX01BU0spID4+CisJCQlHTUFDX1RJ
TUVTVEFNUF9BVFNOU19TSElGVDsKKworCS8qIFJlcGVhdCB1bnRpbCB0aGUgdGltZXN0YW1wcyBh
cmUgZnJvbSB0aGUgRklGTyBsYXN0IHNlZ21lbnQgKi8KKwlmb3IgKGkgPSAwOyBpIDwgbnVtX3Nu
YXBzaG90OyBpKyspIHsKKwkJc3Bpbl9sb2NrX2lycXNhdmUoJnByaXYtPnB0cF9sb2NrLCBmbGFn
cyk7CisJCXN0bW1hY19nZXRfcHRwdGltZShwcml2LCBwdHBhZGRyLCAmcHRwX3RpbWUpOworCQkq
ZGV2aWNlID0gbnNfdG9fa3RpbWUocHRwX3RpbWUpOworCQlzcGluX3VubG9ja19pcnFyZXN0b3Jl
KCZwcml2LT5wdHBfbG9jaywgZmxhZ3MpOworCQlnZXRfYXJ0dGltZShwcml2LT5taWksIGludGVs
X3ByaXYtPm1kaW9fYWRob2NfYWRkciwgJmFydF90aW1lKTsKKwkJKnN5c3RlbSA9IGNvbnZlcnRf
YXJ0X3RvX3RzYyhhcnRfdGltZSk7CisJfQorCisJcmV0dXJuIDA7Cit9CisKIHN0YXRpYyB2b2lk
IGNvbW1vbl9kZWZhdWx0X2RhdGEoc3RydWN0IHBsYXRfc3RtbWFjZW5ldF9kYXRhICpwbGF0KQog
ewogCXBsYXQtPmNsa19jc3IgPSAyOwkvKiBjbGtfY3NyX2kgPSAyMC0zNU1IeiAmIE1EQyA9IGNs
a19jc3JfaS8xNiAqLwpAQCAtMzg0LDYgKzQ4NywxMSBAQCBzdGF0aWMgaW50IGludGVsX21nYmVf
Y29tbW9uX2RhdGEoc3RydWN0IHBjaV9kZXYgKnBkZXYsCiAJcGxhdC0+bWRpb19idXNfZGF0YS0+
cGh5X21hc2sgPSAxIDw8IElOVEVMX01HQkVfQURIT0NfQUREUjsKIAlwbGF0LT5tZGlvX2J1c19k
YXRhLT5waHlfbWFzayB8PSAxIDw8IElOVEVMX01HQkVfWFBDU19BRERSOwogCisJcGxhdC0+aW50
X3NuYXBzaG90X251bSA9IEFVWF9TTkFQU0hPVDE7CisKKwlwbGF0LT5oYXNfY3Jvc3N0cyA9IHRy
dWU7CisJcGxhdC0+Y3Jvc3N0c3RhbXAgPSBpbnRlbF9jcm9zc3RzdGFtcDsKKwogCXJldHVybiAw
OwogfQogCmRpZmYgLS1naXQgYS9kcml2ZXJzL25ldC9ldGhlcm5ldC9zdG1pY3JvL3N0bW1hYy9k
d21hYzQuaCBiL2RyaXZlcnMvbmV0L2V0aGVybmV0L3N0bWljcm8vc3RtbWFjL2R3bWFjNC5oCmlu
ZGV4IGVmODUwMmQyYjZlNi4uNDYyY2E3ZWQwOTVhIDEwMDY0NAotLS0gYS9kcml2ZXJzL25ldC9l
dGhlcm5ldC9zdG1pY3JvL3N0bW1hYy9kd21hYzQuaAorKysgYi9kcml2ZXJzL25ldC9ldGhlcm5l
dC9zdG1pY3JvL3N0bW1hYy9kd21hYzQuaApAQCAtNTAsNiArNTAsNyBAQAogI2RlZmluZSBHTUFD
X0w0X0FERFIocmVnKQkJKDB4OTA0ICsgKHJlZykgKiAweDMwKQogI2RlZmluZSBHTUFDX0wzX0FE
RFIwKHJlZykJCSgweDkxMCArIChyZWcpICogMHgzMCkKICNkZWZpbmUgR01BQ19MM19BRERSMShy
ZWcpCQkoMHg5MTQgKyAocmVnKSAqIDB4MzApCisjZGVmaW5lIEdNQUNfVElNRVNUQU1QX1NUQVRV
UwkJMHgwMDAwMGIyMAogCiAvKiBSWCBRdWV1ZXMgUm91dGluZyAqLwogI2RlZmluZSBHTUFDX1JY
UUNUUkxfQVZDUFFfTUFTSwkJR0VOTUFTSygyLCAwKQpAQCAtMTQ0LDYgKzE0NSw3IEBACiAjZGVm
aW5lIEdNQUNfSU5UX1BDU19QSFlJUwkJQklUKDMpCiAjZGVmaW5lIEdNQUNfSU5UX1BNVF9FTgkJ
CUJJVCg0KQogI2RlZmluZSBHTUFDX0lOVF9MUElfRU4JCQlCSVQoNSkKKyNkZWZpbmUgR01BQ19J
TlRfVFNJRQkJCUJJVCgxMikKIAogI2RlZmluZQlHTUFDX1BDU19JUlFfREVGQVVMVAkoR01BQ19J
TlRfUkdTTUlJUyB8IEdNQUNfSU5UX1BDU19MSU5LIHwJXAogCQkJCSBHTUFDX0lOVF9QQ1NfQU5F
KQpAQCAtMjYwLDYgKzI2Miw3IEBAIGVudW0gcG93ZXJfZXZlbnQgewogI2RlZmluZSBHTUFDX0hX
X1JYRklGT1NJWkUJCUdFTk1BU0soNCwgMCkKIAogLyogTUFDIEhXIGZlYXR1cmVzMiBiaXRtYXAg
Ki8KKyNkZWZpbmUgR01BQ19IV19GRUFUX0FVWFNOQVBOVU0JCUdFTk1BU0soMzAsIDI4KQogI2Rl
ZmluZSBHTUFDX0hXX0ZFQVRfUFBTT1VUTlVNCQlHRU5NQVNLKDI2LCAyNCkKICNkZWZpbmUgR01B
Q19IV19GRUFUX1RYQ0hDTlQJCUdFTk1BU0soMjEsIDE4KQogI2RlZmluZSBHTUFDX0hXX0ZFQVRf
UlhDSENOVAkJR0VOTUFTSygxNSwgMTIpCkBAIC0zMDUsNiArMzA4LDExIEBAIGVudW0gcG93ZXJf
ZXZlbnQgewogI2RlZmluZSBHTUFDX0w0RFAwX1NISUZUCQkxNgogI2RlZmluZSBHTUFDX0w0U1Aw
CQkJR0VOTUFTSygxNSwgMCkKIAorLyogTUFDIFRpbWVzdGFtcCBTdGF0dXMgKi8KKyNkZWZpbmUg
R01BQ19USU1FU1RBTVBfQVVYVFNUUklHCUJJVCgyKQorI2RlZmluZSBHTUFDX1RJTUVTVEFNUF9B
VFNOU19NQVNLCUdFTk1BU0soMjksIDI1KQorI2RlZmluZSBHTUFDX1RJTUVTVEFNUF9BVFNOU19T
SElGVAkyNQorCiAvKiAgTVRMIHJlZ2lzdGVycyAqLwogI2RlZmluZSBNVExfT1BFUkFUSU9OX01P
REUJCTB4MDAwMDBjMDAKICNkZWZpbmUgTVRMX0ZSUEUJCQlCSVQoMTUpCmRpZmYgLS1naXQgYS9k
cml2ZXJzL25ldC9ldGhlcm5ldC9zdG1pY3JvL3N0bW1hYy9kd21hYzRfZG1hLmMgYi9kcml2ZXJz
L25ldC9ldGhlcm5ldC9zdG1pY3JvL3N0bW1hYy9kd21hYzRfZG1hLmMKaW5kZXggODk1ODc3OGQx
NmI3Li44OTU0Yjg1ZWI4NTAgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvbmV0L2V0aGVybmV0L3N0bWlj
cm8vc3RtbWFjL2R3bWFjNF9kbWEuYworKysgYi9kcml2ZXJzL25ldC9ldGhlcm5ldC9zdG1pY3Jv
L3N0bW1hYy9kd21hYzRfZG1hLmMKQEAgLTQxMiw2ICs0MTIsOCBAQCBzdGF0aWMgdm9pZCBkd21h
YzRfZ2V0X2h3X2ZlYXR1cmUodm9pZCBfX2lvbWVtICppb2FkZHIsCiAKIAkvKiBJRUVFIDE1ODgt
MjAwMiAqLwogCWRtYV9jYXAtPnRpbWVfc3RhbXAgPSAwOworCS8qIE51bWJlciBvZiBBdXhpbGlh
cnkgU25hcHNob3QgSW5wdXRzICovCisJZG1hX2NhcC0+YXV4X3NuYXBzaG90X24gPSAoaHdfY2Fw
ICYgR01BQ19IV19GRUFUX0FVWFNOQVBOVU0pID4+IDI4OwogCiAJLyogTUFDIEhXIGZlYXR1cmUz
ICovCiAJaHdfY2FwID0gcmVhZGwoaW9hZGRyICsgR01BQ19IV19GRUFUVVJFMyk7CmRpZmYgLS1n
aXQgYS9kcml2ZXJzL25ldC9ldGhlcm5ldC9zdG1pY3JvL3N0bW1hYy9od2lmLmggYi9kcml2ZXJz
L25ldC9ldGhlcm5ldC9zdG1pY3JvL3N0bW1hYy9od2lmLmgKaW5kZXggNjkyNTQxYzdiNDE5Li41
OWJmNzA3OGE3NTQgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvbmV0L2V0aGVybmV0L3N0bWljcm8vc3Rt
bWFjL2h3aWYuaAorKysgYi9kcml2ZXJzL25ldC9ldGhlcm5ldC9zdG1pY3JvL3N0bW1hYy9od2lm
LmgKQEAgLTUwOCw2ICs1MDgsNyBAQCBzdHJ1Y3Qgc3RtbWFjX2h3dGltZXN0YW1wIHsKIAlpbnQg
KCphZGp1c3Rfc3lzdGltZSkgKHZvaWQgX19pb21lbSAqaW9hZGRyLCB1MzIgc2VjLCB1MzIgbnNl
YywKIAkJCSAgICAgICBpbnQgYWRkX3N1YiwgaW50IGdtYWM0KTsKIAl2b2lkICgqZ2V0X3N5c3Rp
bWUpICh2b2lkIF9faW9tZW0gKmlvYWRkciwgdTY0ICpzeXN0aW1lKTsKKwl2b2lkICgqZ2V0X3B0
cHRpbWUpKHZvaWQgX19pb21lbSAqaW9hZGRyLCB1NjQgKnB0cF90aW1lKTsKIH07CiAKICNkZWZp
bmUgc3RtbWFjX2NvbmZpZ19od190c3RhbXBpbmcoX19wcml2LCBfX2FyZ3MuLi4pIFwKQEAgLTUy
Miw2ICs1MjMsOCBAQCBzdHJ1Y3Qgc3RtbWFjX2h3dGltZXN0YW1wIHsKIAlzdG1tYWNfZG9fY2Fs
bGJhY2soX19wcml2LCBwdHAsIGFkanVzdF9zeXN0aW1lLCBfX2FyZ3MpCiAjZGVmaW5lIHN0bW1h
Y19nZXRfc3lzdGltZShfX3ByaXYsIF9fYXJncy4uLikgXAogCXN0bW1hY19kb192b2lkX2NhbGxi
YWNrKF9fcHJpdiwgcHRwLCBnZXRfc3lzdGltZSwgX19hcmdzKQorI2RlZmluZSBzdG1tYWNfZ2V0
X3B0cHRpbWUoX19wcml2LCBfX2FyZ3MuLi4pIFwKKwlzdG1tYWNfZG9fdm9pZF9jYWxsYmFjayhf
X3ByaXYsIHB0cCwgZ2V0X3B0cHRpbWUsIF9fYXJncykKIAogLyogSGVscGVycyB0byBtYW5hZ2Ug
dGhlIGRlc2NyaXB0b3JzIGZvciBjaGFpbiBhbmQgcmluZyBtb2RlcyAqLwogc3RydWN0IHN0bW1h
Y19tb2RlX29wcyB7CmRpZmYgLS1naXQgYS9kcml2ZXJzL25ldC9ldGhlcm5ldC9zdG1pY3JvL3N0
bW1hYy9zdG1tYWNfaHd0c3RhbXAuYyBiL2RyaXZlcnMvbmV0L2V0aGVybmV0L3N0bWljcm8vc3Rt
bWFjL3N0bW1hY19od3RzdGFtcC5jCmluZGV4IGQyOTE2MTJlZWFmYi4uMTEzYzUxYmNjMGI1IDEw
MDY0NAotLS0gYS9kcml2ZXJzL25ldC9ldGhlcm5ldC9zdG1pY3JvL3N0bW1hYy9zdG1tYWNfaHd0
c3RhbXAuYworKysgYi9kcml2ZXJzL25ldC9ldGhlcm5ldC9zdG1pY3JvL3N0bW1hYy9zdG1tYWNf
aHd0c3RhbXAuYwpAQCAtMTUzLDYgKzE1MywxNiBAQCBzdGF0aWMgdm9pZCBnZXRfc3lzdGltZSh2
b2lkIF9faW9tZW0gKmlvYWRkciwgdTY0ICpzeXN0aW1lKQogCQkqc3lzdGltZSA9IG5zOwogfQog
CitzdGF0aWMgdm9pZCBnZXRfcHRwdGltZSh2b2lkIF9faW9tZW0gKnB0cGFkZHIsIHU2NCAqcHRw
X3RpbWUpCit7CisJdTY0IG5zOworCisJbnMgPSByZWFkbChwdHBhZGRyICsgUFRQX0FUTlIpOwor
CW5zICs9IHJlYWRsKHB0cGFkZHIgKyBQVFBfQVRTUikgKiBOU0VDX1BFUl9TRUM7CisKKwkqcHRw
X3RpbWUgPSBuczsKK30KKwogY29uc3Qgc3RydWN0IHN0bW1hY19od3RpbWVzdGFtcCBzdG1tYWNf
cHRwID0gewogCS5jb25maWdfaHdfdHN0YW1waW5nID0gY29uZmlnX2h3X3RzdGFtcGluZywKIAku
aW5pdF9zeXN0aW1lID0gaW5pdF9zeXN0aW1lLApAQCAtMTYwLDQgKzE3MCw1IEBAIGNvbnN0IHN0
cnVjdCBzdG1tYWNfaHd0aW1lc3RhbXAgc3RtbWFjX3B0cCA9IHsKIAkuY29uZmlnX2FkZGVuZCA9
IGNvbmZpZ19hZGRlbmQsCiAJLmFkanVzdF9zeXN0aW1lID0gYWRqdXN0X3N5c3RpbWUsCiAJLmdl
dF9zeXN0aW1lID0gZ2V0X3N5c3RpbWUsCisJLmdldF9wdHB0aW1lID0gZ2V0X3B0cHRpbWUsCiB9
OwpkaWZmIC0tZ2l0IGEvZHJpdmVycy9uZXQvZXRoZXJuZXQvc3RtaWNyby9zdG1tYWMvc3RtbWFj
X3B0cC5jIGIvZHJpdmVycy9uZXQvZXRoZXJuZXQvc3RtaWNyby9zdG1tYWMvc3RtbWFjX3B0cC5j
CmluZGV4IDhiMTBmZDEwNDQ2Zi4uYjE2NGFlMjJlMzVmIDEwMDY0NAotLS0gYS9kcml2ZXJzL25l
dC9ldGhlcm5ldC9zdG1pY3JvL3N0bW1hYy9zdG1tYWNfcHRwLmMKKysrIGIvZHJpdmVycy9uZXQv
ZXRoZXJuZXQvc3RtaWNyby9zdG1tYWMvc3RtbWFjX3B0cC5jCkBAIC05LDYgKzksNyBAQAogKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKi8KICNpbmNsdWRlICJzdG1tYWMuaCIKICNpbmNsdWRlICJzdG1t
YWNfcHRwLmgiCisjaW5jbHVkZSAiZHdtYWM0LmgiCiAKIC8qKgogICogc3RtbWFjX2FkanVzdF9m
cmVxCkBAIC0xNjUsNiArMTY2LDM2IEBAIHN0YXRpYyBpbnQgc3RtbWFjX2VuYWJsZShzdHJ1Y3Qg
cHRwX2Nsb2NrX2luZm8gKnB0cCwKIAlyZXR1cm4gcmV0OwogfQogCisvKioKKyAqIHN0bW1hY19n
ZXRfc3luY2RldmljZXRpbWUKKyAqIEBkZXZpY2U6IGN1cnJlbnQgZGV2aWNlIHRpbWUKKyAqIEBz
eXN0ZW06IHN5c3RlbSBjb3VudGVyIHZhbHVlIHJlYWQgc3luY2hyb25vdXNseSB3aXRoIGRldmlj
ZSB0aW1lCisgKiBAY3R4OiBjb250ZXh0IHByb3ZpZGVkIGJ5IHRpbWVrZWVwaW5nIGNvZGUKKyAq
IERlc2NyaXB0aW9uOiBSZWFkIGRldmljZSBhbmQgc3lzdGVtIGNsb2NrIHNpbXVsdGFuZW91c2x5
IGFuZCByZXR1cm4gdGhlCisgKiBjb3JyZWN0ZWQgY2xvY2sgdmFsdWVzIGluIG5zLgorICoqLwor
c3RhdGljIGludCBzdG1tYWNfZ2V0X3N5bmNkZXZpY2V0aW1lKGt0aW1lX3QgKmRldmljZSwKKwkJ
CQkgICAgIHN0cnVjdCBzeXN0ZW1fY291bnRlcnZhbF90ICpzeXN0ZW0sCisJCQkJICAgICB2b2lk
ICpjdHgpCit7CisJc3RydWN0IHN0bW1hY19wcml2ICpwcml2ID0gKHN0cnVjdCBzdG1tYWNfcHJp
diAqKWN0eDsKKworCWlmIChwcml2LT5wbGF0LT5jcm9zc3RzdGFtcCkKKwkJcmV0dXJuIHByaXYt
PnBsYXQtPmNyb3NzdHN0YW1wKGRldmljZSwgc3lzdGVtLCBjdHgpOworCWVsc2UKKwkJcmV0dXJu
IC1FT1BOT1RTVVBQOworfQorCitzdGF0aWMgaW50IHN0bW1hY19nZXRjcm9zc3RzdGFtcChzdHJ1
Y3QgcHRwX2Nsb2NrX2luZm8gKnB0cCwKKwkJCQkgc3RydWN0IHN5c3RlbV9kZXZpY2VfY3Jvc3N0
c3RhbXAgKnh0c3RhbXApCit7CisJc3RydWN0IHN0bW1hY19wcml2ICpwcml2ID0KKwkJY29udGFp
bmVyX29mKHB0cCwgc3RydWN0IHN0bW1hY19wcml2LCBwdHBfY2xvY2tfb3BzKTsKKworCXJldHVy
biBnZXRfZGV2aWNlX3N5c3RlbV9jcm9zc3RzdGFtcChzdG1tYWNfZ2V0X3N5bmNkZXZpY2V0aW1l
LAorCQkJCQkgICAgIHByaXYsIE5VTEwsIHh0c3RhbXApOworfQorCiAvKiBzdHJ1Y3R1cmUgZGVz
Y3JpYmluZyBhIFBUUCBoYXJkd2FyZSBjbG9jayAqLwogc3RhdGljIHN0cnVjdCBwdHBfY2xvY2tf
aW5mbyBzdG1tYWNfcHRwX2Nsb2NrX29wcyA9IHsKIAkub3duZXIgPSBUSElTX01PRFVMRSwKQEAg
LTE4MCw2ICsyMTEsNyBAQCBzdGF0aWMgc3RydWN0IHB0cF9jbG9ja19pbmZvIHN0bW1hY19wdHBf
Y2xvY2tfb3BzID0gewogCS5nZXR0aW1lNjQgPSBzdG1tYWNfZ2V0X3RpbWUsCiAJLnNldHRpbWU2
NCA9IHN0bW1hY19zZXRfdGltZSwKIAkuZW5hYmxlID0gc3RtbWFjX2VuYWJsZSwKKwkuZ2V0Y3Jv
c3N0c3RhbXAgPSBzdG1tYWNfZ2V0Y3Jvc3N0c3RhbXAsCiB9OwogCiAvKioKZGlmZiAtLWdpdCBh
L2RyaXZlcnMvbmV0L2V0aGVybmV0L3N0bWljcm8vc3RtbWFjL3N0bW1hY19wdHAuaCBiL2RyaXZl
cnMvbmV0L2V0aGVybmV0L3N0bWljcm8vc3RtbWFjL3N0bW1hY19wdHAuaAppbmRleCA3YWJiMWQ0
N2U3ZGEuLmY4ODcyN2NlNGQzMCAxMDA2NDQKLS0tIGEvZHJpdmVycy9uZXQvZXRoZXJuZXQvc3Rt
aWNyby9zdG1tYWMvc3RtbWFjX3B0cC5oCisrKyBiL2RyaXZlcnMvbmV0L2V0aGVybmV0L3N0bWlj
cm8vc3RtbWFjL3N0bW1hY19wdHAuaApAQCAtMjMsNiArMjMsOSBAQAogI2RlZmluZQlQVFBfU1RT
VVIJMHgxMAkvKiBTeXN0ZW0gVGltZSDigJMgU2Vjb25kcyBVcGRhdGUgUmVnICovCiAjZGVmaW5l
CVBUUF9TVE5TVVIJMHgxNAkvKiBTeXN0ZW0gVGltZSDigJMgTmFub3NlY29uZHMgVXBkYXRlIFJl
ZyAqLwogI2RlZmluZQlQVFBfVEFSCQkweDE4CS8qIFRpbWVzdGFtcCBBZGRlbmQgUmVnICovCisj
ZGVmaW5lCVBUUF9BQ1IJCTB4NDAJLyogQXV4aWxpYXJ5IENvbnRyb2wgUmVnICovCisjZGVmaW5l
CVBUUF9BVE5SCTB4NDgJLyogQXV4aWxpYXJ5IFRpbWVzdGFtcCAtIE5hbm9zZWNvbmRzIFJlZyAq
LworI2RlZmluZQlQVFBfQVRTUgkweDRjCS8qIEF1eGlsaWFyeSBUaW1lc3RhbXAgLSBTZWNvbmRz
IFJlZyAqLwogCiAjZGVmaW5lCVBUUF9TVE5TVVJfQUREU1VCX1NISUZUCTMxCiAjZGVmaW5lCVBU
UF9ESUdJVEFMX1JPTExPVkVSX01PREUJMHgzQjlBQ0EwMAkvKiAxMGU5LTEgbnMgKi8KQEAgLTY0
LDQgKzY3LDI0IEBACiAjZGVmaW5lCVBUUF9TU0lSX1NTSU5DX01BU0sJCTB4ZmYKICNkZWZpbmUJ
R01BQzRfUFRQX1NTSVJfU1NJTkNfU0hJRlQJMTYKIAorLyogQXV4aWxpYXJ5IENvbnRyb2wgZGVm
aW5lcyAqLworI2RlZmluZQlQVFBfQUNSX0FUU0ZDCQlCSVQoMCkJLyogQXV4aWxpYXJ5IFNuYXBz
aG90IEZJRk8gQ2xlYXIgKi8KKyNkZWZpbmUJUFRQX0FDUl9BVFNFTjAJCUJJVCg0KQkvKiBBdXhp
bGlhcnkgU25hcHNob3QgMCBFbmFibGUgKi8KKyNkZWZpbmUJUFRQX0FDUl9BVFNFTjEJCUJJVCg1
KQkvKiBBdXhpbGlhcnkgU25hcHNob3QgMSBFbmFibGUgKi8KKyNkZWZpbmUJUFRQX0FDUl9BVFNF
TjIJCUJJVCg2KQkvKiBBdXhpbGlhcnkgU25hcHNob3QgMiBFbmFibGUgKi8KKyNkZWZpbmUJUFRQ
X0FDUl9BVFNFTjMJCUJJVCg3KQkvKiBBdXhpbGlhcnkgU25hcHNob3QgMyBFbmFibGUgKi8KKyNk
ZWZpbmUJUFRQX0FDUl9NQVNLCQlHRU5NQVNLKDcsIDQpCS8qIEF1eCBTbmFwc2hvdCBNYXNrICov
CisjZGVmaW5lCVBNQ19BUlRfVkFMVUUwCQkweDAxCS8qIFBNQ19BUlRbMTU6MF0gdGltZXIgdmFs
dWUgKi8KKyNkZWZpbmUJUE1DX0FSVF9WQUxVRTEJCTB4MDIJLyogUE1DX0FSVFszMToxNl0gdGlt
ZXIgdmFsdWUgKi8KKyNkZWZpbmUJUE1DX0FSVF9WQUxVRTIJCTB4MDMJLyogUE1DX0FSVFs0Nzoz
Ml0gdGltZXIgdmFsdWUgKi8KKyNkZWZpbmUJUE1DX0FSVF9WQUxVRTMJCTB4MDQJLyogUE1DX0FS
VFs2Mzo0OF0gdGltZXIgdmFsdWUgKi8KKyNkZWZpbmUJR01BQzRfQVJUX1RJTUVfU0hJRlQJMTYJ
LyogQVJUIFRJTUUgMTYtYml0cyBzaGlmdCAqLworCitlbnVtIGF1eF9zbmFwc2hvdCB7CisJQVVY
X1NOQVBTSE9UMCA9IDB4MTAsCisJQVVYX1NOQVBTSE9UMSA9IDB4MjAsCisJQVVYX1NOQVBTSE9U
MiA9IDB4NDAsCisJQVVYX1NOQVBTSE9UMyA9IDB4ODAsCit9OworCiAjZW5kaWYJLyogX19TVE1N
QUNfUFRQX0hfXyAqLwpkaWZmIC0tZ2l0IGEvaW5jbHVkZS9saW51eC9zdG1tYWMuaCBiL2luY2x1
ZGUvbGludXgvc3RtbWFjLmgKaW5kZXggMTBhYmM4MGI2MDFlLi41MTM0ZTgwMmYzOWEgMTAwNjQ0
Ci0tLSBhL2luY2x1ZGUvbGludXgvc3RtbWFjLmgKKysrIGIvaW5jbHVkZS9saW51eC9zdG1tYWMu
aApAQCAtMTg2LDYgKzE4Niw4IEBAIHN0cnVjdCBwbGF0X3N0bW1hY2VuZXRfZGF0YSB7CiAJdm9p
ZCAoKmV4aXQpKHN0cnVjdCBwbGF0Zm9ybV9kZXZpY2UgKnBkZXYsIHZvaWQgKnByaXYpOwogCXN0
cnVjdCBtYWNfZGV2aWNlX2luZm8gKigqc2V0dXApKHZvaWQgKnByaXYpOwogCWludCAoKmNsa3Nf
Y29uZmlnKSh2b2lkICpwcml2LCBib29sIGVuYWJsZWQpOworCWludCAoKmNyb3NzdHN0YW1wKShr
dGltZV90ICpkZXZpY2UsIHN0cnVjdCBzeXN0ZW1fY291bnRlcnZhbF90ICpzeXN0ZW0sCisJCQkg
ICB2b2lkICpjdHgpOwogCXZvaWQgKmJzcF9wcml2OwogCXN0cnVjdCBjbGsgKnN0bW1hY19jbGs7
CiAJc3RydWN0IGNsayAqcGNsazsKQEAgLTIwNiw1ICsyMDgsNyBAQCBzdHJ1Y3QgcGxhdF9zdG1t
YWNlbmV0X2RhdGEgewogCXU4IHZsYW5fZmFpbF9xOwogCXVuc2lnbmVkIGludCBlZWVfdXNlY3Nf
cmF0ZTsKIAlzdHJ1Y3QgcGNpX2RldiAqcGRldjsKKwlib29sIGhhc19jcm9zc3RzOworCWludCBp
bnRfc25hcHNob3RfbnVtOwogfTsKICNlbmRpZgotLSAKMi4yNS4xCgpfX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpMaW51eC1zdG0zMiBtYWlsaW5nIGxpc3QK
TGludXgtc3RtMzJAc3QtbWQtbWFpbG1hbi5zdG9ybXJlcGx5LmNvbQpodHRwczovL3N0LW1kLW1h
aWxtYW4uc3Rvcm1yZXBseS5jb20vbWFpbG1hbi9saXN0aW5mby9saW51eC1zdG0zMgo=
