Return-Path: <linux-stm32-bounces@st-md-mailman.stormreply.com>
X-Original-To: lists+linux-stm32@lfdr.de
Delivered-To: lists+linux-stm32@lfdr.de
Received: from stm-ict-prod-mailman-01.stormreply.prv (st-md-mailman.stormreply.com [52.209.6.89])
	by mail.lfdr.de (Postfix) with ESMTPS id 6E1B5AC4BF2
	for <lists+linux-stm32@lfdr.de>; Tue, 27 May 2025 12:06:15 +0200 (CEST)
Received: from ip-172-31-3-47.eu-west-1.compute.internal (localhost [127.0.0.1])
	by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTP id 319C3C36B1F;
	Tue, 27 May 2025 10:06:15 +0000 (UTC)
Received: from relay3-d.mail.gandi.net (relay3-d.mail.gandi.net
 [217.70.183.195])
 (using TLSv1.2 with cipher ADH-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTPS id A17EFC36B1E
 for <linux-stm32@st-md-mailman.stormreply.com>;
 Tue, 27 May 2025 10:06:14 +0000 (UTC)
Received: by mail.gandi.net (Postfix) with ESMTPSA id C53C31FD76;
 Tue, 27 May 2025 10:06:12 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=bootlin.com; s=gm1;
 t=1748340374;
 h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
 to:to:cc:cc:mime-version:mime-version:content-type:content-type:
 content-transfer-encoding:content-transfer-encoding:
 in-reply-to:in-reply-to:references:references;
 bh=Z957RjxT4uqf0nNlE4qCnpWpXPKWGLktP1f/MgOjYv0=;
 b=Mg+ytl/avkiTiO1VcoKFkXaSfcJNp/E54w4FnddhUS3f8R3jwudafVAr4HIAIeZnxjkPBM
 yo4EVIJoieuK/v44IS1jKogIydNZAXKPn7Yz8fl4f7hYt1+zsI6KZrS7saZYM+T3y1ytnG
 hlaVIu3rRReJQ8utzQAu/ZTKH/dNqt6wcA7wN7Lg3e+VqrvgCBKqnqwp1iXS3c93jYExSf
 BtWa6+11t8fMsg4aaFEGzq2Rmhr/FJSbkn//V3m61+DWJcQekqIfsNAuuAQn3aWBYx2Q5p
 kamCSY8nDGAtu+xLtI6ZR5ACp1ztqL7rqCZ+eezkQ10FQ7V57lgm4yJTsFrJSQ==
From: =?utf-8?q?Alexis_Lothor=C3=A9?= <alexis.lothore@bootlin.com>
Date: Tue, 27 May 2025 12:06:03 +0200
MIME-Version: 1.0
Message-Id: <20250527-many_args_arm64-v3-1-3faf7bb8e4a2@bootlin.com>
References: <20250527-many_args_arm64-v3-0-3faf7bb8e4a2@bootlin.com>
In-Reply-To: <20250527-many_args_arm64-v3-0-3faf7bb8e4a2@bootlin.com>
To: Alexei Starovoitov <ast@kernel.org>, 
 Daniel Borkmann <daniel@iogearbox.net>, 
 John Fastabend <john.fastabend@gmail.com>, 
 Andrii Nakryiko <andrii@kernel.org>, 
 Martin KaFai Lau <martin.lau@linux.dev>, 
 Eduard Zingerman <eddyz87@gmail.com>, Song Liu <song@kernel.org>, 
 Yonghong Song <yonghong.song@linux.dev>, KP Singh <kpsingh@kernel.org>, 
 Stanislav Fomichev <sdf@fomichev.me>, Hao Luo <haoluo@google.com>, 
 Jiri Olsa <jolsa@kernel.org>, Puranjay Mohan <puranjay@kernel.org>, 
 Xu Kuohai <xukuohai@huaweicloud.com>, 
 Catalin Marinas <catalin.marinas@arm.com>, Will Deacon <will@kernel.org>, 
 Mykola Lysenko <mykolal@fb.com>, Shuah Khan <shuah@kernel.org>, 
 Maxime Coquelin <mcoquelin.stm32@gmail.com>, 
 Alexandre Torgue <alexandre.torgue@foss.st.com>, 
 Florent Revest <revest@chromium.org>
X-Mailer: b4 0.14.2
X-GND-State: clean
X-GND-Score: -100
X-GND-Cause: gggruggvucftvghtrhhoucdtuddrgeeffedrtddtgddvtddtleculddtuddrgeefvddrtddtmdcutefuodetggdotefrodftvfcurfhrohhfihhlvgemucfitefpfffkpdcuggftfghnshhusghstghrihgsvgenuceurghilhhouhhtmecufedtudenucesvcftvggtihhpihgvnhhtshculddquddttddmnecujfgurhephfffufggtgfgkfhfjgfvvefosehtkeertdertdejnecuhfhrohhmpeetlhgvgihishcunfhothhhohhrrocuoegrlhgvgihishdrlhhothhhohhrvgessghoohhtlhhinhdrtghomheqnecuggftrfgrthhtvghrnhepgeevgefhteffuefhheekkeelffffvdeugffgveejffdtvdffudehtedtieevteetnecukfhppedvrgdtvdemkeegvdekmehfleegtgemvgdttdemmeguieehnecuvehluhhsthgvrhfuihiivgeptdenucfrrghrrghmpehinhgvthepvdgrtddvmeekgedvkeemfhelgegtmegvtddtmeemugeihedphhgvlhhopegludelvddrudeikedruddrudeljegnpdhmrghilhhfrhhomheprghlvgigihhsrdhlohhthhhorhgvsegsohhothhlihhnrdgtohhmpdhnsggprhgtphhtthhopeefuddprhgtphhtthhopehsohhngheskhgvrhhnvghlrdhorhhgpdhrtghpthhtohephhgrohhluhhosehgohhoghhlvgdrtghomhdprhgtphhtthhopehthhhomhgrshdrphgvthgriiiiohhnihessghoohhtlhhinhdrtghomhdprhgtphhtthhopehsughfsehfohhmihgthhgvvhdrmhgvpdhrt
 ghpthhtohepsghpfhesvhhgvghrrdhkvghrnhgvlhdrohhrghdprhgtphhtthhopehjohhlshgrsehkvghrnhgvlhdrohhrghdprhgtphhtthhopehlihhnuhigqdgrrhhmqdhkvghrnhgvlheslhhishhtshdrihhnfhhrrgguvggrugdrohhrghdprhgtphhtthhopehpuhhrrghnjhgrhieskhgvrhhnvghlrdhorhhg
X-GND-Sasl: alexis.lothore@bootlin.com
Cc: linux-kselftest@vger.kernel.org,
 Bastien Curutchet <bastien.curutchet@bootlin.com>, ebpf@linuxfoundation.org,
 linux-kernel@vger.kernel.org,
 =?utf-8?q?Alexis_Lothor=C3=A9_=28eBPF_Foundation=29?=
 <alexis.lothore@bootlin.com>, Thomas Petazzoni <thomas.petazzoni@bootlin.com>,
 bpf@vger.kernel.org, Xu Kuohai <xukuohai@huawei.com>,
 linux-stm32@st-md-mailman.stormreply.com, linux-arm-kernel@lists.infradead.org
Subject: [Linux-stm32] [PATCH bpf-next v3 1/2] bpf,
 arm64: Support up to 12 function arguments
X-BeenThere: linux-stm32@st-md-mailman.stormreply.com
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: <linux-stm32.st-md-mailman.stormreply.com>
List-Unsubscribe: <https://st-md-mailman.stormreply.com/mailman/options/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=unsubscribe>
List-Archive: <http://st-md-mailman.stormreply.com/pipermail/linux-stm32/>
List-Post: <mailto:linux-stm32@st-md-mailman.stormreply.com>
List-Help: <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=help>
List-Subscribe: <https://st-md-mailman.stormreply.com/mailman/listinfo/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: linux-stm32-bounces@st-md-mailman.stormreply.com
Sender: "Linux-stm32" <linux-stm32-bounces@st-md-mailman.stormreply.com>

RnJvbTogWHUgS3VvaGFpIDx4dWt1b2hhaUBodWF3ZWkuY29tPgoKQ3VycmVudGx5IEFSTTY0IGJw
ZiB0cmFtcG9saW5lIHN1cHBvcnRzIHVwIHRvIDggZnVuY3Rpb24gYXJndW1lbnRzLgpBY2NvcmRp
bmcgdG8gdGhlIHN0YXRpc3RpY3MgZnJvbSBjb21taXQKNDczZTMxNTBlMzBhICgiYnBmLCB4ODY6
IGFsbG93IGZ1bmN0aW9uIGFyZ3VtZW50cyB1cCB0byAxMiBmb3IgVFJBQ0lORyIpLAp0aGVyZSBh
cmUgYWJvdXQgMjAwIGZ1bmN0aW9ucyBhY2NlcHQgOSB0byAxMiBhcmd1bWVudHMsIHNvIGFkZGlu
ZyBzdXBwb3J0CmZvciB1cCB0byAxMiBmdW5jdGlvbiBhcmd1bWVudHMuCgpEdWUgdG8gYnBmIG9u
bHkgc3VwcG9ydGluZyBmdW5jdGlvbiBhcmd1bWVudHMgdXAgdG8gMTYgYnl0ZXMsIGFjY29yZGlu
ZyB0bwpBQVBDUzY0LCBzdGFydGluZyBmcm9tIHRoZSBmaXJzdCBhcmd1bWVudCwgZWFjaCBhcmd1
bWVudCBpcyBmaXJzdAphdHRlbXB0ZWQgdG8gYmUgbG9hZGVkIHRvIDEgb3IgMiBzbWFsbGVzdCBy
ZWdpc3RlcnMgZnJvbSB4MC14NywgaWYgdGhlcmUKYXJlIG5vIGVub3VnaCByZWdpc3RlcnMgdG8g
aG9sZCB0aGUgZW50aXJlIGFyZ3VtZW50LCB0aGVuIGFsbCByZW1haW5pbmcKYXJndW1lbnRzIHN0
YXJ0aW5nIGZyb20gdGhpcyBvbmUgYXJlIHB1c2hlZCB0byB0aGUgc3RhY2sgZm9yIHBhc3Npbmcu
ClRoZXJlIGFyZSBzb21lIG5vbi10cml2aWFsIGNhc2VzIGZvciB3aGljaCBpdCBpcyBub3QgcG9z
c2libGUgdG8KY29ycmVjdGx5IHJlYWQgYXJndW1lbnRzIGZyb20vd3JpdGUgYXJndW1lbnRzIHRv
IHRoZSBzdGFjazogZm9yIGV4YW1wbGUKc3RydWN0IHZhcmlhYmxlcyBtYXkgaGF2ZSBjdXN0b20g
cGFja2luZy9hbGlnbm1lbnQgYXR0cmlidXRlcyB0aGF0IGFyZQppbnZpc2libGUgaW4gQlRGIGlu
Zm8uIFN1Y2ggY2FzZXMgYXJlIGRlbmllZCBmb3Igbm93IHRvIG1ha2Ugc3VyZSBub3QgdG8KcmVh
ZCBpbmNvcnJlY3QgdmFsdWVzLgoKU2lnbmVkLW9mZi1ieTogWHUgS3VvaGFpIDx4dWt1b2hhaUBo
dWF3ZWkuY29tPgpDby1kZXZlbG9wZWQtYnk6IEFsZXhpcyBMb3Rob3LDqSAoZUJQRiBGb3VuZGF0
aW9uKSA8YWxleGlzLmxvdGhvcmVAYm9vdGxpbi5jb20+ClNpZ25lZC1vZmYtYnk6IEFsZXhpcyBM
b3Rob3LDqSAoZUJQRiBGb3VuZGF0aW9uKSA8YWxleGlzLmxvdGhvcmVAYm9vdGxpbi5jb20+Ci0t
LQpDaGFuZ2VzIGluIHYzOgotIHN3aXRjaCBiYWNrIC1FT1BOT1RTVVBQIHRvIC1FTk9UU1VQUAot
IGZpeCBjb21tZW50IHN0eWxlCi0gcmVtb3ZlIHVzZWxlc3Mgcm91bmRfdXAgY2FsbHMKLSBncm91
cCBpbml0aWFsaXphdGlvbnMgZm9yIGFyZ19hdXggc3RydWN0dXJlCgpDaGFuZ2VzIGluIHYyOgot
IHJlZnVzZSBhdHRhY2htZW50IHRvIGZ1bmN0aW9ucyBwYXNzaW5nIHN0cnVjdHMgb24gc3RhY2sK
LSB1c2Ugc2ltcGxlciBhbGlnbm1lbnQgcnVsZXMgZm9yIGFyZ3MgcGFzc2VkIG9uIHN0YWNrLCBh
c3N1bWluZyB0aGF0CiAgZXhvdGljIHR5cGVzIGFyZSBkZW5pZWQgZWl0aGVyIGJ5IHRoZSB2ZXJp
ZmllciBhbmQvb3IgdGhlIHRyYW1wb2xpbmUKICBnZW5lcmF0aW9uIGNvZGUKLS0tCiBhcmNoL2Fy
bTY0L25ldC9icGZfaml0X2NvbXAuYyB8IDIyNSArKysrKysrKysrKysrKysrKysrKysrKysrKysr
KysrKy0tLS0tLS0tLS0KIDEgZmlsZSBjaGFuZ2VkLCAxNzEgaW5zZXJ0aW9ucygrKSwgNTQgZGVs
ZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEvYXJjaC9hcm02NC9uZXQvYnBmX2ppdF9jb21wLmMgYi9h
cmNoL2FybTY0L25ldC9icGZfaml0X2NvbXAuYwppbmRleCA3MGQ3Yzg5ZDNhYzkwNzc5OGU4NmUw
MDUxZTdiNDcyYzI1MmMxNDEyLi5iNWMzYWI2MjM1MzYyY2Y2NjBkYTRiMDJkNzM4MTUwOWZjMTdk
Y2RmIDEwMDY0NAotLS0gYS9hcmNoL2FybTY0L25ldC9icGZfaml0X2NvbXAuYworKysgYi9hcmNo
L2FybTY0L25ldC9icGZfaml0X2NvbXAuYwpAQCAtMjA2NCw3ICsyMDY0LDcgQEAgYm9vbCBicGZf
aml0X3N1cHBvcnRzX3N1YnByb2dfdGFpbGNhbGxzKHZvaWQpCiB9CiAKIHN0YXRpYyB2b2lkIGlu
dm9rZV9icGZfcHJvZyhzdHJ1Y3Qgaml0X2N0eCAqY3R4LCBzdHJ1Y3QgYnBmX3RyYW1wX2xpbmsg
KmwsCi0JCQkgICAgaW50IGFyZ3Nfb2ZmLCBpbnQgcmV0dmFsX29mZiwgaW50IHJ1bl9jdHhfb2Zm
LAorCQkJICAgIGludCBiYXJnc19vZmYsIGludCByZXR2YWxfb2ZmLCBpbnQgcnVuX2N0eF9vZmYs
CiAJCQkgICAgYm9vbCBzYXZlX3JldCkKIHsKIAlfX2xlMzIgKmJyYW5jaDsKQEAgLTIxMDYsNyAr
MjEwNiw3IEBAIHN0YXRpYyB2b2lkIGludm9rZV9icGZfcHJvZyhzdHJ1Y3Qgaml0X2N0eCAqY3R4
LCBzdHJ1Y3QgYnBmX3RyYW1wX2xpbmsgKmwsCiAJYnJhbmNoID0gY3R4LT5pbWFnZSArIGN0eC0+
aWR4OwogCWVtaXQoQTY0X05PUCwgY3R4KTsKIAotCWVtaXQoQTY0X0FERF9JKDEsIEE2NF9SKDAp
LCBBNjRfU1AsIGFyZ3Nfb2ZmKSwgY3R4KTsKKwllbWl0KEE2NF9BRERfSSgxLCBBNjRfUigwKSwg
QTY0X1NQLCBiYXJnc19vZmYpLCBjdHgpOwogCWlmICghcC0+aml0ZWQpCiAJCWVtaXRfYWRkcl9t
b3ZfaTY0KEE2NF9SKDEpLCAoY29uc3QgdTY0KXAtPmluc25zaSwgY3R4KTsKIApAQCAtMjEzMSw3
ICsyMTMxLDcgQEAgc3RhdGljIHZvaWQgaW52b2tlX2JwZl9wcm9nKHN0cnVjdCBqaXRfY3R4ICpj
dHgsIHN0cnVjdCBicGZfdHJhbXBfbGluayAqbCwKIH0KIAogc3RhdGljIHZvaWQgaW52b2tlX2Jw
Zl9tb2RfcmV0KHN0cnVjdCBqaXRfY3R4ICpjdHgsIHN0cnVjdCBicGZfdHJhbXBfbGlua3MgKnRs
LAotCQkJICAgICAgIGludCBhcmdzX29mZiwgaW50IHJldHZhbF9vZmYsIGludCBydW5fY3R4X29m
ZiwKKwkJCSAgICAgICBpbnQgYmFyZ3Nfb2ZmLCBpbnQgcmV0dmFsX29mZiwgaW50IHJ1bl9jdHhf
b2ZmLAogCQkJICAgICAgIF9fbGUzMiAqKmJyYW5jaGVzKQogewogCWludCBpOwpAQCAtMjE0MSw3
ICsyMTQxLDcgQEAgc3RhdGljIHZvaWQgaW52b2tlX2JwZl9tb2RfcmV0KHN0cnVjdCBqaXRfY3R4
ICpjdHgsIHN0cnVjdCBicGZfdHJhbXBfbGlua3MgKnRsLAogCSAqLwogCWVtaXQoQTY0X1NUUjY0
SShBNjRfWlIsIEE2NF9TUCwgcmV0dmFsX29mZiksIGN0eCk7CiAJZm9yIChpID0gMDsgaSA8IHRs
LT5ucl9saW5rczsgaSsrKSB7Ci0JCWludm9rZV9icGZfcHJvZyhjdHgsIHRsLT5saW5rc1tpXSwg
YXJnc19vZmYsIHJldHZhbF9vZmYsCisJCWludm9rZV9icGZfcHJvZyhjdHgsIHRsLT5saW5rc1tp
XSwgYmFyZ3Nfb2ZmLCByZXR2YWxfb2ZmLAogCQkJCXJ1bl9jdHhfb2ZmLCB0cnVlKTsKIAkJLyog
aWYgKCoodTY0ICopKHNwICsgcmV0dmFsX29mZikgIT0gIDApCiAJCSAqCWdvdG8gZG9fZmV4aXQ7
CkBAIC0yMTU1LDIzICsyMTU1LDEyNSBAQCBzdGF0aWMgdm9pZCBpbnZva2VfYnBmX21vZF9yZXQo
c3RydWN0IGppdF9jdHggKmN0eCwgc3RydWN0IGJwZl90cmFtcF9saW5rcyAqdGwsCiAJfQogfQog
Ci1zdGF0aWMgdm9pZCBzYXZlX2FyZ3Moc3RydWN0IGppdF9jdHggKmN0eCwgaW50IGFyZ3Nfb2Zm
LCBpbnQgbnJlZ3MpCitzdHJ1Y3QgYXJnX2F1eCB7CisJLyogaG93IG1hbnkgYXJncyBhcmUgcGFz
c2VkIHRocm91Z2ggcmVnaXN0ZXJzLCB0aGUgcmVzdCBvZiB0aGUgYXJncyBhcmUKKwkgKiBwYXNz
ZWQgdGhyb3VnaCBzdGFjaworCSAqLworCWludCBhcmdzX2luX3JlZ3M7CisJLyogaG93IG1hbnkg
cmVnaXN0ZXJzIGFyZSB1c2VkIHRvIHBhc3MgYXJndW1lbnRzICovCisJaW50IHJlZ3NfZm9yX2Fy
Z3M7CisJLyogaG93IG11Y2ggc3RhY2sgaXMgdXNlZCBmb3IgYWRkaXRpb25hbCBhcmdzIHBhc3Nl
ZCB0byBicGYgcHJvZ3JhbQorCSAqIHRoYXQgZGlkIG5vdCBmaXQgaW4gb3JpZ2luYWwgZnVuY3Rp
b24gcmVnaXN0ZXJzCisJICovCisJaW50IGJzdGFja19mb3JfYXJnczsKKwkvKiBob21lIG11Y2gg
c3RhY2sgaXMgdXNlZCBmb3IgYWRkaXRpb25hbCBhcmdzIHBhc3NlZCB0byB0aGUKKwkgKiBvcmln
aW5hbCBmdW5jdGlvbiB3aGVuIGNhbGxlZCBmcm9tIHRyYW1wb2xpbmUgKHRoaXMgb25lIG5lZWRz
CisJICogYXJndW1lbnRzIHRvIGJlIHByb3Blcmx5IGFsaWduZWQpCisJICovCisJaW50IG9zdGFj
a19mb3JfYXJnczsKK307CisKK3N0YXRpYyBpbnQgY2FsY19hcmdfYXV4KGNvbnN0IHN0cnVjdCBi
dGZfZnVuY19tb2RlbCAqbSwKKwkJCSBzdHJ1Y3QgYXJnX2F1eCAqYSkKIHsKLQlpbnQgaTsKKwlp
bnQgc3RhY2tfc2xvdHMsIG5yZWdzLCBzbG90cywgaTsKKworCS8qIHZlcmlmaWVyIGVuc3VyZXMg
bS0+bnJfYXJncyA8PSBNQVhfQlBGX0ZVTkNfQVJHUyAqLworCWZvciAoaSA9IDAsIG5yZWdzID0g
MDsgaSA8IG0tPm5yX2FyZ3M7IGkrKykgeworCQlzbG90cyA9IChtLT5hcmdfc2l6ZVtpXSArIDcp
IC8gODsKKwkJaWYgKG5yZWdzICsgc2xvdHMgPD0gOCkgLyogcGFzc2VkIHRocm91Z2ggcmVnaXN0
ZXIgPyAqLworCQkJbnJlZ3MgKz0gc2xvdHM7CisJCWVsc2UKKwkJCWJyZWFrOworCX0KKworCWEt
PmFyZ3NfaW5fcmVncyA9IGk7CisJYS0+cmVnc19mb3JfYXJncyA9IG5yZWdzOworCWEtPm9zdGFj
a19mb3JfYXJncyA9IDA7CisJYS0+YnN0YWNrX2Zvcl9hcmdzID0gMDsKIAotCWZvciAoaSA9IDA7
IGkgPCBucmVnczsgaSsrKSB7Ci0JCWVtaXQoQTY0X1NUUjY0SShpLCBBNjRfU1AsIGFyZ3Nfb2Zm
KSwgY3R4KTsKLQkJYXJnc19vZmYgKz0gODsKKwkvKiB0aGUgcmVzdCBhcmd1bWVudHMgYXJlIHBh
c3NlZCB0aHJvdWdoIHN0YWNrICovCisJZm9yICg7IGkgPCBtLT5ucl9hcmdzOyBpKyspIHsKKwkJ
LyogV2UgY2FuIG5vdCBrbm93IGZvciBzdXJlIGFib3V0IGV4YWN0IGFsaWdubWVudCBuZWVkcyBm
b3IKKwkJICogc3RydWN0IHBhc3NlZCBvbiBzdGFjaywgc28gZGVueSB0aG9zZQorCQkgKi8KKwkJ
aWYgKG0tPmFyZ19mbGFnc1tpXSAmIEJURl9GTU9ERUxfU1RSVUNUX0FSRykKKwkJCXJldHVybiAt
RU5PVFNVUFA7CisJCXN0YWNrX3Nsb3RzID0gKG0tPmFyZ19zaXplW2ldICsgNykgLyA4OworCQlh
LT5ic3RhY2tfZm9yX2FyZ3MgKz0gc3RhY2tfc2xvdHMgKiA4OworCQlhLT5vc3RhY2tfZm9yX2Fy
Z3MgPSBhLT5vc3RhY2tfZm9yX2FyZ3MgKyBzdGFja19zbG90cyAqIDg7CisJfQorCisJcmV0dXJu
IDA7Cit9CisKK3N0YXRpYyB2b2lkIGNsZWFyX2dhcmJhZ2Uoc3RydWN0IGppdF9jdHggKmN0eCwg
aW50IHJlZywgaW50IGVmZmVjdGl2ZV9ieXRlcykKK3sKKwlpZiAoZWZmZWN0aXZlX2J5dGVzKSB7
CisJCWludCBnYXJiYWdlX2JpdHMgPSA2NCAtIDggKiBlZmZlY3RpdmVfYnl0ZXM7CisjaWZkZWYg
Q09ORklHX0NQVV9CSUdfRU5ESUFOCisJCS8qIGdhcmJhZ2UgYml0cyBhcmUgYXQgdGhlIHJpZ2h0
IGVuZCAqLworCQllbWl0KEE2NF9MU1IoMSwgcmVnLCByZWcsIGdhcmJhZ2VfYml0cyksIGN0eCk7
CisJCWVtaXQoQTY0X0xTTCgxLCByZWcsIHJlZywgZ2FyYmFnZV9iaXRzKSwgY3R4KTsKKyNlbHNl
CisJCS8qIGdhcmJhZ2UgYml0cyBhcmUgYXQgdGhlIGxlZnQgZW5kICovCisJCWVtaXQoQTY0X0xT
TCgxLCByZWcsIHJlZywgZ2FyYmFnZV9iaXRzKSwgY3R4KTsKKwkJZW1pdChBNjRfTFNSKDEsIHJl
ZywgcmVnLCBnYXJiYWdlX2JpdHMpLCBjdHgpOworI2VuZGlmCiAJfQogfQogCi1zdGF0aWMgdm9p
ZCByZXN0b3JlX2FyZ3Moc3RydWN0IGppdF9jdHggKmN0eCwgaW50IGFyZ3Nfb2ZmLCBpbnQgbnJl
Z3MpCitzdGF0aWMgdm9pZCBzYXZlX2FyZ3Moc3RydWN0IGppdF9jdHggKmN0eCwgaW50IGJhcmdz
X29mZiwgaW50IG9hcmdzX29mZiwKKwkJICAgICAgY29uc3Qgc3RydWN0IGJ0Zl9mdW5jX21vZGVs
ICptLAorCQkgICAgICBjb25zdCBzdHJ1Y3QgYXJnX2F1eCAqYSwKKwkJICAgICAgYm9vbCBmb3Jf
Y2FsbF9vcmlnaW4pCiB7CiAJaW50IGk7CisJaW50IHJlZzsKKwlpbnQgZG9mZjsKKwlpbnQgc29m
ZjsKKwlpbnQgc2xvdHM7CisJdTggdG1wID0gYnBmMmE2NFtUTVBfUkVHXzFdOworCisJLyogc3Rv
cmUgYXJndW1lbnRzIHRvIHRoZSBzdGFjayBmb3IgdGhlIGJwZiBwcm9ncmFtLCBvciByZXN0b3Jl
CisJICogYXJndW1lbnRzIGZyb20gc3RhY2sgZm9yIHRoZSBvcmlnaW5hbCBmdW5jdGlvbgorCSAq
LworCWZvciAocmVnID0gMDsgcmVnIDwgYS0+cmVnc19mb3JfYXJnczsgcmVnKyspIHsKKwkJZW1p
dChmb3JfY2FsbF9vcmlnaW4gPworCQkgICAgIEE2NF9MRFI2NEkocmVnLCBBNjRfU1AsIGJhcmdz
X29mZikgOgorCQkgICAgIEE2NF9TVFI2NEkocmVnLCBBNjRfU1AsIGJhcmdzX29mZiksCisJCSAg
ICAgY3R4KTsKKwkJYmFyZ3Nfb2ZmICs9IDg7CisJfQogCi0JZm9yIChpID0gMDsgaSA8IG5yZWdz
OyBpKyspIHsKLQkJZW1pdChBNjRfTERSNjRJKGksIEE2NF9TUCwgYXJnc19vZmYpLCBjdHgpOwot
CQlhcmdzX29mZiArPSA4OworCXNvZmYgPSAzMjsgLyogb24gc3RhY2sgYXJndW1lbnRzIHN0YXJ0
IGZyb20gRlAgKyAzMiAqLworCWRvZmYgPSAoZm9yX2NhbGxfb3JpZ2luID8gb2FyZ3Nfb2ZmIDog
YmFyZ3Nfb2ZmKTsKKworCS8qIHNhdmUgb24gc3RhY2sgYXJndW1lbnRzICovCisJZm9yIChpID0g
YS0+YXJnc19pbl9yZWdzOyBpIDwgbS0+bnJfYXJnczsgaSsrKSB7CisJCXNsb3RzID0gKG0tPmFy
Z19zaXplW2ldICsgNykgLyA4OworCQkvKiB2ZXJpZmllciBlbnN1cmVzIGFyZ19zaXplIDw9IDE2
LCBzbyBzbG90cyBlcXVhbHMgMSBvciAyICovCisJCXdoaWxlIChzbG90cy0tID4gMCkgeworCQkJ
ZW1pdChBNjRfTERSNjRJKHRtcCwgQTY0X0ZQLCBzb2ZmKSwgY3R4KTsKKwkJCS8qIGlmIHRoZXJl
IGlzIHVudXNlZCBzcGFjZSBpbiB0aGUgbGFzdCBzbG90LCBjbGVhcgorCQkJICogdGhlIGdhcmJh
Z2UgY29udGFpbmVkIGluIHRoZSBzcGFjZS4KKwkJCSAqLworCQkJaWYgKHNsb3RzID09IDAgJiYg
IWZvcl9jYWxsX29yaWdpbikKKwkJCQljbGVhcl9nYXJiYWdlKGN0eCwgdG1wLCBtLT5hcmdfc2l6
ZVtpXSAlIDgpOworCQkJZW1pdChBNjRfU1RSNjRJKHRtcCwgQTY0X1NQLCBkb2ZmKSwgY3R4KTsK
KwkJCXNvZmYgKz0gODsKKwkJCWRvZmYgKz0gODsKKwkJfQorCX0KK30KKworc3RhdGljIHZvaWQg
cmVzdG9yZV9hcmdzKHN0cnVjdCBqaXRfY3R4ICpjdHgsIGludCBiYXJnc19vZmYsIGludCBucmVn
cykKK3sKKwlpbnQgcmVnOworCisJZm9yIChyZWcgPSAwOyByZWcgPCBucmVnczsgcmVnKyspIHsK
KwkJZW1pdChBNjRfTERSNjRJKHJlZywgQTY0X1NQLCBiYXJnc19vZmYpLCBjdHgpOworCQliYXJn
c19vZmYgKz0gODsKIAl9CiB9CiAKQEAgLTIxOTQsMTcgKzIyOTYsMjEgQEAgc3RhdGljIGJvb2wg
aXNfc3RydWN0X29wc190cmFtcChjb25zdCBzdHJ1Y3QgYnBmX3RyYW1wX2xpbmtzICpmZW50cnlf
bGlua3MpCiAgKi8KIHN0YXRpYyBpbnQgcHJlcGFyZV90cmFtcG9saW5lKHN0cnVjdCBqaXRfY3R4
ICpjdHgsIHN0cnVjdCBicGZfdHJhbXBfaW1hZ2UgKmltLAogCQkJICAgICAgc3RydWN0IGJwZl90
cmFtcF9saW5rcyAqdGxpbmtzLCB2b2lkICpmdW5jX2FkZHIsCi0JCQkgICAgICBpbnQgbnJlZ3Ms
IHUzMiBmbGFncykKKwkJCSAgICAgIGNvbnN0IHN0cnVjdCBidGZfZnVuY19tb2RlbCAqbSwKKwkJ
CSAgICAgIGNvbnN0IHN0cnVjdCBhcmdfYXV4ICphLAorCQkJICAgICAgdTMyIGZsYWdzKQogewog
CWludCBpOwogCWludCBzdGFja19zaXplOwogCWludCByZXRhZGRyX29mZjsKIAlpbnQgcmVnc19v
ZmY7CiAJaW50IHJldHZhbF9vZmY7Ci0JaW50IGFyZ3Nfb2ZmOwotCWludCBucmVnc19vZmY7CisJ
aW50IGJhcmdzX29mZjsKKwlpbnQgbmZ1bmNhcmdzX29mZjsKIAlpbnQgaXBfb2ZmOwogCWludCBy
dW5fY3R4X29mZjsKKwlpbnQgb2FyZ3Nfb2ZmOworCWludCBuZnVuY2FyZ3M7CiAJc3RydWN0IGJw
Zl90cmFtcF9saW5rcyAqZmVudHJ5ID0gJnRsaW5rc1tCUEZfVFJBTVBfRkVOVFJZXTsKIAlzdHJ1
Y3QgYnBmX3RyYW1wX2xpbmtzICpmZXhpdCA9ICZ0bGlua3NbQlBGX1RSQU1QX0ZFWElUXTsKIAlz
dHJ1Y3QgYnBmX3RyYW1wX2xpbmtzICpmbW9kX3JldCA9ICZ0bGlua3NbQlBGX1RSQU1QX01PRElG
WV9SRVRVUk5dOwpAQCAtMjIxMywzMSArMjMxOSwzOCBAQCBzdGF0aWMgaW50IHByZXBhcmVfdHJh
bXBvbGluZShzdHJ1Y3Qgaml0X2N0eCAqY3R4LCBzdHJ1Y3QgYnBmX3RyYW1wX2ltYWdlICppbSwK
IAlib29sIGlzX3N0cnVjdF9vcHMgPSBpc19zdHJ1Y3Rfb3BzX3RyYW1wKGZlbnRyeSk7CiAKIAkv
KiB0cmFtcG9saW5lIHN0YWNrIGxheW91dDoKLQkgKiAgICAgICAgICAgICAgICAgIFsgcGFyZW50
IGlwICAgICAgICAgXQotCSAqICAgICAgICAgICAgICAgICAgWyBGUCAgICAgICAgICAgICAgICBd
Ci0JICogU1AgKyByZXRhZGRyX29mZiBbIHNlbGYgaXAgICAgICAgICAgIF0KLQkgKiAgICAgICAg
ICAgICAgICAgIFsgRlAgICAgICAgICAgICAgICAgXQorCSAqICAgICAgICAgICAgICAgICAgICBb
IHBhcmVudCBpcCAgICAgICAgIF0KKwkgKiAgICAgICAgICAgICAgICAgICAgWyBGUCAgICAgICAg
ICAgICAgICBdCisJICogU1AgKyByZXRhZGRyX29mZiAgIFsgc2VsZiBpcCAgICAgICAgICAgXQor
CSAqICAgICAgICAgICAgICAgICAgICBbIEZQICAgICAgICAgICAgICAgIF0KIAkgKgotCSAqICAg
ICAgICAgICAgICAgICAgWyBwYWRkaW5nICAgICAgICAgICBdIGFsaWduIFNQIHRvIG11bHRpcGxl
cyBvZiAxNgorCSAqICAgICAgICAgICAgICAgICAgICBbIHBhZGRpbmcgICAgICAgICAgIF0gYWxp
Z24gU1AgdG8gbXVsdGlwbGVzIG9mIDE2CiAJICoKLQkgKiAgICAgICAgICAgICAgICAgIFsgeDIw
ICAgICAgICAgICAgICAgXSBjYWxsZWUgc2F2ZWQgcmVnIHgyMAotCSAqIFNQICsgcmVnc19vZmYg
ICAgWyB4MTkgICAgICAgICAgICAgICBdIGNhbGxlZSBzYXZlZCByZWcgeDE5CisJICogICAgICAg
ICAgICAgICAgICAgIFsgeDIwICAgICAgICAgICAgICAgXSBjYWxsZWUgc2F2ZWQgcmVnIHgyMAor
CSAqIFNQICsgcmVnc19vZmYgICAgICBbIHgxOSAgICAgICAgICAgICAgIF0gY2FsbGVlIHNhdmVk
IHJlZyB4MTkKIAkgKgotCSAqIFNQICsgcmV0dmFsX29mZiAgWyByZXR1cm4gdmFsdWUgICAgICBd
IEJQRl9UUkFNUF9GX0NBTExfT1JJRyBvcgotCSAqICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIEJQRl9UUkFNUF9GX1JFVF9GRU5UUllfUkVUCisJICogU1AgKyByZXR2YWxf
b2ZmICAgIFsgcmV0dXJuIHZhbHVlICAgICAgXSBCUEZfVFJBTVBfRl9DQUxMX09SSUcgb3IKKwkg
KiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJQRl9UUkFNUF9GX1JF
VF9GRU5UUllfUkVUCisJICogICAgICAgICAgICAgICAgICAgIFsgYXJnIHJlZyBOICAgICAgICAg
XQorCSAqICAgICAgICAgICAgICAgICAgICBbIC4uLiAgICAgICAgICAgICAgIF0KKwkgKiBTUCAr
IGJhcmdzX29mZiAgICAgWyBhcmcgcmVnIDEgICAgICAgICBdIGZvciBicGYKIAkgKgotCSAqICAg
ICAgICAgICAgICAgICAgWyBhcmcgcmVnIE4gICAgICAgICBdCi0JICogICAgICAgICAgICAgICAg
ICBbIC4uLiAgICAgICAgICAgICAgIF0KLQkgKiBTUCArIGFyZ3Nfb2ZmICAgIFsgYXJnIHJlZyAx
ICAgICAgICAgXQorCSAqIFNQICsgbmZ1bmNhcmdzX29mZiBbIGFyZyByZWdzIGNvdW50ICAgIF0K
IAkgKgotCSAqIFNQICsgbnJlZ3Nfb2ZmICAgWyBhcmcgcmVncyBjb3VudCAgICBdCisJICogU1Ag
KyBpcF9vZmYgICAgICAgIFsgdHJhY2VkIGZ1bmN0aW9uICAgXSBCUEZfVFJBTVBfRl9JUF9BUkcg
ZmxhZwogCSAqCi0JICogU1AgKyBpcF9vZmYgICAgICBbIHRyYWNlZCBmdW5jdGlvbiAgIF0gQlBG
X1RSQU1QX0ZfSVBfQVJHIGZsYWcKKwkgKiBTUCArIHJ1bl9jdHhfb2ZmICAgWyBicGZfdHJhbXBf
cnVuX2N0eCBdCiAJICoKLQkgKiBTUCArIHJ1bl9jdHhfb2ZmIFsgYnBmX3RyYW1wX3J1bl9jdHgg
XQorCSAqICAgICAgICAgICAgICAgICAgICBbIHN0YWNrIGFyZyBOICAgICAgIF0KKwkgKiAgICAg
ICAgICAgICAgICAgICAgWyAuLi4gICAgICAgICAgICAgICBdCisJICogU1AgKyBvYXJnc19vZmYg
ICAgIFsgc3RhY2sgYXJnIDEgICAgICAgXSBmb3Igb3JpZ2luYWwgZnVuYwogCSAqLwogCiAJc3Rh
Y2tfc2l6ZSA9IDA7CisJb2FyZ3Nfb2ZmID0gc3RhY2tfc2l6ZTsKKwlpZiAoZmxhZ3MgJiBCUEZf
VFJBTVBfRl9DQUxMX09SSUcpCisJCXN0YWNrX3NpemUgKz0gIGEtPm9zdGFja19mb3JfYXJnczsK
KwogCXJ1bl9jdHhfb2ZmID0gc3RhY2tfc2l6ZTsKIAkvKiByb29tIGZvciBicGZfdHJhbXBfcnVu
X2N0eCAqLwogCXN0YWNrX3NpemUgKz0gcm91bmRfdXAoc2l6ZW9mKHN0cnVjdCBicGZfdHJhbXBf
cnVuX2N0eCksIDgpOwpAQCAtMjI0NywxMyArMjM2MCwxNCBAQCBzdGF0aWMgaW50IHByZXBhcmVf
dHJhbXBvbGluZShzdHJ1Y3Qgaml0X2N0eCAqY3R4LCBzdHJ1Y3QgYnBmX3RyYW1wX2ltYWdlICpp
bSwKIAlpZiAoZmxhZ3MgJiBCUEZfVFJBTVBfRl9JUF9BUkcpCiAJCXN0YWNrX3NpemUgKz0gODsK
IAotCW5yZWdzX29mZiA9IHN0YWNrX3NpemU7CisJbmZ1bmNhcmdzX29mZiA9IHN0YWNrX3NpemU7
CiAJLyogcm9vbSBmb3IgYXJncyBjb3VudCAqLwogCXN0YWNrX3NpemUgKz0gODsKIAotCWFyZ3Nf
b2ZmID0gc3RhY2tfc2l6ZTsKKwliYXJnc19vZmYgPSBzdGFja19zaXplOwogCS8qIHJvb20gZm9y
IGFyZ3MgKi8KLQlzdGFja19zaXplICs9IG5yZWdzICogODsKKwluZnVuY2FyZ3MgPSBhLT5yZWdz
X2Zvcl9hcmdzICsgYS0+YnN0YWNrX2Zvcl9hcmdzIC8gODsKKwlzdGFja19zaXplICs9IDggKiBu
ZnVuY2FyZ3M7CiAKIAkvKiByb29tIGZvciByZXR1cm4gdmFsdWUgKi8KIAlyZXR2YWxfb2ZmID0g
c3RhY2tfc2l6ZTsKQEAgLTIzMDAsMTEgKzI0MTQsMTEgQEAgc3RhdGljIGludCBwcmVwYXJlX3Ry
YW1wb2xpbmUoc3RydWN0IGppdF9jdHggKmN0eCwgc3RydWN0IGJwZl90cmFtcF9pbWFnZSAqaW0s
CiAJfQogCiAJLyogc2F2ZSBhcmcgcmVncyBjb3VudCovCi0JZW1pdChBNjRfTU9WWigxLCBBNjRf
UigxMCksIG5yZWdzLCAwKSwgY3R4KTsKLQllbWl0KEE2NF9TVFI2NEkoQTY0X1IoMTApLCBBNjRf
U1AsIG5yZWdzX29mZiksIGN0eCk7CisJZW1pdChBNjRfTU9WWigxLCBBNjRfUigxMCksIG5mdW5j
YXJncywgMCksIGN0eCk7CisJZW1pdChBNjRfU1RSNjRJKEE2NF9SKDEwKSwgQTY0X1NQLCBuZnVu
Y2FyZ3Nfb2ZmKSwgY3R4KTsKIAotCS8qIHNhdmUgYXJnIHJlZ3MgKi8KLQlzYXZlX2FyZ3MoY3R4
LCBhcmdzX29mZiwgbnJlZ3MpOworCS8qIHNhdmUgYXJncyBmb3IgYnBmICovCisJc2F2ZV9hcmdz
KGN0eCwgYmFyZ3Nfb2ZmLCBvYXJnc19vZmYsIG0sIGEsIGZhbHNlKTsKIAogCS8qIHNhdmUgY2Fs
bGVlIHNhdmVkIHJlZ2lzdGVycyAqLwogCWVtaXQoQTY0X1NUUjY0SShBNjRfUigxOSksIEE2NF9T
UCwgcmVnc19vZmYpLCBjdHgpOwpAQCAtMjMyMCw3ICsyNDM0LDcgQEAgc3RhdGljIGludCBwcmVw
YXJlX3RyYW1wb2xpbmUoc3RydWN0IGppdF9jdHggKmN0eCwgc3RydWN0IGJwZl90cmFtcF9pbWFn
ZSAqaW0sCiAJfQogCiAJZm9yIChpID0gMDsgaSA8IGZlbnRyeS0+bnJfbGlua3M7IGkrKykKLQkJ
aW52b2tlX2JwZl9wcm9nKGN0eCwgZmVudHJ5LT5saW5rc1tpXSwgYXJnc19vZmYsCisJCWludm9r
ZV9icGZfcHJvZyhjdHgsIGZlbnRyeS0+bGlua3NbaV0sIGJhcmdzX29mZiwKIAkJCQlyZXR2YWxf
b2ZmLCBydW5fY3R4X29mZiwKIAkJCQlmbGFncyAmIEJQRl9UUkFNUF9GX1JFVF9GRU5UUllfUkVU
KTsKIApAQCAtMjMzMCwxMiArMjQ0NCwxMyBAQCBzdGF0aWMgaW50IHByZXBhcmVfdHJhbXBvbGlu
ZShzdHJ1Y3Qgaml0X2N0eCAqY3R4LCBzdHJ1Y3QgYnBmX3RyYW1wX2ltYWdlICppbSwKIAkJaWYg
KCFicmFuY2hlcykKIAkJCXJldHVybiAtRU5PTUVNOwogCi0JCWludm9rZV9icGZfbW9kX3JldChj
dHgsIGZtb2RfcmV0LCBhcmdzX29mZiwgcmV0dmFsX29mZiwKKwkJaW52b2tlX2JwZl9tb2RfcmV0
KGN0eCwgZm1vZF9yZXQsIGJhcmdzX29mZiwgcmV0dmFsX29mZiwKIAkJCQkgICBydW5fY3R4X29m
ZiwgYnJhbmNoZXMpOwogCX0KIAogCWlmIChmbGFncyAmIEJQRl9UUkFNUF9GX0NBTExfT1JJRykg
ewotCQlyZXN0b3JlX2FyZ3MoY3R4LCBhcmdzX29mZiwgbnJlZ3MpOworCQkvKiBzYXZlIGFyZ3Mg
Zm9yIG9yaWdpbmFsIGZ1bmMgKi8KKwkJc2F2ZV9hcmdzKGN0eCwgYmFyZ3Nfb2ZmLCBvYXJnc19v
ZmYsIG0sIGEsIHRydWUpOwogCQkvKiBjYWxsIG9yaWdpbmFsIGZ1bmMgKi8KIAkJZW1pdChBNjRf
TERSNjRJKEE2NF9SKDEwKSwgQTY0X1NQLCByZXRhZGRyX29mZiksIGN0eCk7CiAJCWVtaXQoQTY0
X0FEUihBNjRfTFIsIEFBUkNINjRfSU5TTl9TSVpFICogMiksIGN0eCk7CkBAIC0yMzU0LDcgKzI0
NjksNyBAQCBzdGF0aWMgaW50IHByZXBhcmVfdHJhbXBvbGluZShzdHJ1Y3Qgaml0X2N0eCAqY3R4
LCBzdHJ1Y3QgYnBmX3RyYW1wX2ltYWdlICppbSwKIAl9CiAKIAlmb3IgKGkgPSAwOyBpIDwgZmV4
aXQtPm5yX2xpbmtzOyBpKyspCi0JCWludm9rZV9icGZfcHJvZyhjdHgsIGZleGl0LT5saW5rc1tp
XSwgYXJnc19vZmYsIHJldHZhbF9vZmYsCisJCWludm9rZV9icGZfcHJvZyhjdHgsIGZleGl0LT5s
aW5rc1tpXSwgYmFyZ3Nfb2ZmLCByZXR2YWxfb2ZmLAogCQkJCXJ1bl9jdHhfb2ZmLCBmYWxzZSk7
CiAKIAlpZiAoZmxhZ3MgJiBCUEZfVFJBTVBfRl9DQUxMX09SSUcpIHsKQEAgLTIzNjgsNyArMjQ4
Myw3IEBAIHN0YXRpYyBpbnQgcHJlcGFyZV90cmFtcG9saW5lKHN0cnVjdCBqaXRfY3R4ICpjdHgs
IHN0cnVjdCBicGZfdHJhbXBfaW1hZ2UgKmltLAogCX0KIAogCWlmIChmbGFncyAmIEJQRl9UUkFN
UF9GX1JFU1RPUkVfUkVHUykKLQkJcmVzdG9yZV9hcmdzKGN0eCwgYXJnc19vZmYsIG5yZWdzKTsK
KwkJcmVzdG9yZV9hcmdzKGN0eCwgYmFyZ3Nfb2ZmLCBhLT5yZWdzX2Zvcl9hcmdzKTsKIAogCS8q
IHJlc3RvcmUgY2FsbGVlIHNhdmVkIHJlZ2lzdGVyIHgxOSBhbmQgeDIwICovCiAJZW1pdChBNjRf
TERSNjRJKEE2NF9SKDE5KSwgQTY0X1NQLCByZWdzX29mZiksIGN0eCk7CkBAIC0yNDI4LDE0ICsy
NTQzLDE2IEBAIGludCBhcmNoX2JwZl90cmFtcG9saW5lX3NpemUoY29uc3Qgc3RydWN0IGJ0Zl9m
dW5jX21vZGVsICptLCB1MzIgZmxhZ3MsCiAJCS5pZHggPSAwLAogCX07CiAJc3RydWN0IGJwZl90
cmFtcF9pbWFnZSBpbTsKKwlzdHJ1Y3QgYXJnX2F1eCAgYWF1eDsKIAlpbnQgbnJlZ3MsIHJldDsK
IAogCW5yZWdzID0gYnRmX2Z1bmNfbW9kZWxfbnJlZ3MobSk7Ci0JLyogdGhlIGZpcnN0IDggcmVn
aXN0ZXJzIGFyZSB1c2VkIGZvciBhcmd1bWVudHMgKi8KLQlpZiAobnJlZ3MgPiA4KQotCQlyZXR1
cm4gLUVOT1RTVVBQOwogCi0JcmV0ID0gcHJlcGFyZV90cmFtcG9saW5lKCZjdHgsICZpbSwgdGxp
bmtzLCBmdW5jX2FkZHIsIG5yZWdzLCBmbGFncyk7CisJcmV0ID0gY2FsY19hcmdfYXV4KG0sICZh
YXV4KTsKKwlpZiAocmV0IDwgMCkKKwkJcmV0dXJuIHJldDsKKworCXJldCA9IHByZXBhcmVfdHJh
bXBvbGluZSgmY3R4LCAmaW0sIHRsaW5rcywgZnVuY19hZGRyLCBtLCAmYWF1eCwgZmxhZ3MpOwog
CWlmIChyZXQgPCAwKQogCQlyZXR1cm4gcmV0OwogCkBAIC0yNDYyLDkgKzI1NzksMTAgQEAgaW50
IGFyY2hfcHJlcGFyZV9icGZfdHJhbXBvbGluZShzdHJ1Y3QgYnBmX3RyYW1wX2ltYWdlICppbSwg
dm9pZCAqcm9faW1hZ2UsCiAJCQkJdTMyIGZsYWdzLCBzdHJ1Y3QgYnBmX3RyYW1wX2xpbmtzICp0
bGlua3MsCiAJCQkJdm9pZCAqZnVuY19hZGRyKQogewotCWludCByZXQsIG5yZWdzOwotCXZvaWQg
KmltYWdlLCAqdG1wOwogCXUzMiBzaXplID0gcm9faW1hZ2VfZW5kIC0gcm9faW1hZ2U7CisJc3Ry
dWN0IGFyZ19hdXggYWF1eDsKKwl2b2lkICppbWFnZSwgKnRtcDsKKwlpbnQgcmV0OwogCiAJLyog
aW1hZ2UgZG9lc24ndCBuZWVkIHRvIGJlIGluIG1vZHVsZSBtZW1vcnkgcmFuZ2UsIHNvIHdlIGNh
bgogCSAqIHVzZSBrdm1hbGxvYy4KQEAgLTI0ODAsMTMgKzI1OTgsMTIgQEAgaW50IGFyY2hfcHJl
cGFyZV9icGZfdHJhbXBvbGluZShzdHJ1Y3QgYnBmX3RyYW1wX2ltYWdlICppbSwgdm9pZCAqcm9f
aW1hZ2UsCiAJCS53cml0ZSA9IHRydWUsCiAJfTsKIAotCW5yZWdzID0gYnRmX2Z1bmNfbW9kZWxf
bnJlZ3MobSk7Ci0JLyogdGhlIGZpcnN0IDggcmVnaXN0ZXJzIGFyZSB1c2VkIGZvciBhcmd1bWVu
dHMgKi8KLQlpZiAobnJlZ3MgPiA4KQotCQlyZXR1cm4gLUVOT1RTVVBQOwogCiAJaml0X2ZpbGxf
aG9sZShpbWFnZSwgKHVuc2lnbmVkIGludCkocm9faW1hZ2VfZW5kIC0gcm9faW1hZ2UpKTsKLQly
ZXQgPSBwcmVwYXJlX3RyYW1wb2xpbmUoJmN0eCwgaW0sIHRsaW5rcywgZnVuY19hZGRyLCBucmVn
cywgZmxhZ3MpOworCXJldCA9IGNhbGNfYXJnX2F1eChtLCAmYWF1eCk7CisJaWYgKHJldCkKKwkJ
Z290byBvdXQ7CisJcmV0ID0gcHJlcGFyZV90cmFtcG9saW5lKCZjdHgsIGltLCB0bGlua3MsIGZ1
bmNfYWRkciwgbSwgJmFhdXgsIGZsYWdzKTsKIAogCWlmIChyZXQgPiAwICYmIHZhbGlkYXRlX2Nv
ZGUoJmN0eCkgPCAwKSB7CiAJCXJldCA9IC1FSU5WQUw7CgotLSAKMi40OS4wCgpfX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpMaW51eC1zdG0zMiBtYWlsaW5n
IGxpc3QKTGludXgtc3RtMzJAc3QtbWQtbWFpbG1hbi5zdG9ybXJlcGx5LmNvbQpodHRwczovL3N0
LW1kLW1haWxtYW4uc3Rvcm1yZXBseS5jb20vbWFpbG1hbi9saXN0aW5mby9saW51eC1zdG0zMgo=
