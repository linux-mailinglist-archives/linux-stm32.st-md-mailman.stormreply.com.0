Return-Path: <linux-stm32-bounces@st-md-mailman.stormreply.com>
X-Original-To: lists+linux-stm32@lfdr.de
Delivered-To: lists+linux-stm32@lfdr.de
Received: from stm-ict-prod-mailman-01.stormreply.prv (st-md-mailman.stormreply.com [52.209.6.89])
	by mail.lfdr.de (Postfix) with ESMTPS id A5730A58359
	for <lists+linux-stm32@lfdr.de>; Sun,  9 Mar 2025 11:48:48 +0100 (CET)
Received: from ip-172-31-3-47.eu-west-1.compute.internal (localhost [127.0.0.1])
	by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTP id 64284C78F6C;
	Sun,  9 Mar 2025 10:48:48 +0000 (UTC)
Received: from mgamail.intel.com (mgamail.intel.com [198.175.65.16])
 (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTPS id 5BD1BC78F64
 for <linux-stm32@st-md-mailman.stormreply.com>;
 Sun,  9 Mar 2025 10:48:46 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
 d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
 t=1741517327; x=1773053327;
 h=from:to:subject:date:message-id:in-reply-to:references:
 mime-version:content-transfer-encoding;
 bh=Z/c2ElqDySrFvvkfOOgLqJh5GFsxsy5BUI419SrGBtg=;
 b=hGJHPQb0UvLVJGAI/+A5fEzngD5GguXxaor3ga/b7EsLX0vcIZWI0R/i
 wateT2b2gR15HFiCHpTYMMWGwTKA4AaQ7S8dqhHqrsbwnvsMNiM7j4dkx
 Rq4lp5vdftMlBJNBm8xTMkEj/wd6r4DX95d8QvLB11sWMapXrVTtHBbof
 +o7DlookFlWlR7svH1/7UPi2GKWCQ6C5davXDpn7B6oX2Pn5JxVuqrEo4
 taOQn8Pz/kmQM4SJBGR/5smkHfprdhjt+KQeElH9Pc0M+Dq+RubwR7EzU
 ZZEQdS0i9FJbP4yOICyIB/rTls+eCp91zFzXuaDckpqwgrGmjXcE8nIqE g==;
X-CSE-ConnectionGUID: KQaHK27qTNCcQTfOkd+2vg==
X-CSE-MsgGUID: ZOedAUwyTzGM28gdxEPFXw==
X-IronPort-AV: E=McAfee;i="6700,10204,11367"; a="42636186"
X-IronPort-AV: E=Sophos;i="6.14,234,1736841600"; d="scan'208";a="42636186"
Received: from orviesa003.jf.intel.com ([10.64.159.143])
 by orvoesa108.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384;
 09 Mar 2025 03:48:45 -0700
X-CSE-ConnectionGUID: 9LeCdL4FRvOVNMtdYR/6Ig==
X-CSE-MsgGUID: 4Ri1QU9lSUqjyoCs8Z7SoQ==
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="6.14,234,1736841600"; d="scan'208";a="124655140"
Received: from mohdfai2-ilbpg12-1.png.intel.com ([10.88.227.73])
 by orviesa003.jf.intel.com with ESMTP; 09 Mar 2025 03:48:37 -0700
From: Faizal Rahim <faizal.abdul.rahim@linux.intel.com>
To: Tony Nguyen <anthony.l.nguyen@intel.com>,
 Przemek Kitszel <przemyslaw.kitszel@intel.com>,
 Andrew Lunn <andrew+netdev@lunn.ch>,
 "David S . Miller" <davem@davemloft.net>,
 Eric Dumazet <edumazet@google.com>, Jakub Kicinski <kuba@kernel.org>,
 Paolo Abeni <pabeni@redhat.com>,
 Maxime Coquelin <mcoquelin.stm32@gmail.com>,
 Alexandre Torgue <alexandre.torgue@foss.st.com>,
 Simon Horman <horms@kernel.org>, Russell King <linux@armlinux.org.uk>,
 Alexei Starovoitov <ast@kernel.org>,
 Daniel Borkmann <daniel@iogearbox.net>,
 Jesper Dangaard Brouer <hawk@kernel.org>,
 John Fastabend <john.fastabend@gmail.com>, Furong Xu <0x1207@gmail.com>,
 Russell King <rmk+kernel@armlinux.org.uk>,
 Vladimir Oltean <vladimir.oltean@nxp.com>,
 Serge Semin <fancer.lancer@gmail.com>,
 Xiaolei Wang <xiaolei.wang@windriver.com>,
 Suraj Jaiswal <quic_jsuraj@quicinc.com>,
 Kory Maincent <kory.maincent@bootlin.com>, Gal Pressman <gal@nvidia.com>,
 Jesper Nilsson <jesper.nilsson@axis.com>,
 Choong Yong Liang <yong.liang.choong@linux.intel.com>,
 Chwee-Lin Choong <chwee.lin.choong@intel.com>,
 Faizal Rahim <faizal.abdul.rahim@linux.intel.com>,
 Kunihiko Hayashi <hayashi.kunihiko@socionext.com>,
 Vinicius Costa Gomes <vinicius.gomes@intel.com>,
 intel-wired-lan@lists.osuosl.org, netdev@vger.kernel.org,
 linux-kernel@vger.kernel.org, linux-stm32@st-md-mailman.stormreply.com,
 linux-arm-kernel@lists.infradead.org, bpf@vger.kernel.org
Date: Sun,  9 Mar 2025 06:46:44 -0400
Message-Id: <20250309104648.3895551-11-faizal.abdul.rahim@linux.intel.com>
X-Mailer: git-send-email 2.34.1
In-Reply-To: <20250309104648.3895551-1-faizal.abdul.rahim@linux.intel.com>
References: <20250309104648.3895551-1-faizal.abdul.rahim@linux.intel.com>
MIME-Version: 1.0
Subject: [Linux-stm32] [PATCH iwl-next v9 10/14] igc: add support for frame
	preemption verification
X-BeenThere: linux-stm32@st-md-mailman.stormreply.com
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: <linux-stm32.st-md-mailman.stormreply.com>
List-Unsubscribe: <https://st-md-mailman.stormreply.com/mailman/options/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=unsubscribe>
List-Archive: <http://st-md-mailman.stormreply.com/pipermail/linux-stm32/>
List-Post: <mailto:linux-stm32@st-md-mailman.stormreply.com>
List-Help: <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=help>
List-Subscribe: <https://st-md-mailman.stormreply.com/mailman/listinfo/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: linux-stm32-bounces@st-md-mailman.stormreply.com
Sender: "Linux-stm32" <linux-stm32-bounces@st-md-mailman.stormreply.com>

VGhpcyBwYXRjaCBpbXBsZW1lbnRzIHRoZSAiZXRodG9vbCAtLXNldC1tbSIgY2FsbGJhY2sgdG8g
dHJpZ2dlciB0aGUKZnJhbWUgcHJlZW1wdGlvbiB2ZXJpZmljYXRpb24gaGFuZHNoYWtlLgoKVXNl
cyB0aGUgTUFDIE1lcmdlIFNvZnR3YXJlIFZlcmlmaWNhdGlvbiAobW1zdikgbWVjaGFuaXNtIGlu
IGV0aHRvb2wKdG8gcGVyZm9ybSB0aGUgdmVyaWZpY2F0aW9uIGhhbmRzaGFrZSBmb3IgaWdjLgpU
aGUgc3RydWN0dXJlIGZwZS5tbXN2IGlzIHNldCBieSBtbXN2IGluIGV0aHRvb2wgYW5kIHNob3Vs
ZCByZW1haW4KcmVhZC1vbmx5IGZvciB0aGUgZHJpdmVyLgoKT3RoZXIgbW1zdiBjYWxsYmFja3M6
CmEpIGNvbmZpZ3VyZV90eCgpIC0+IG5vdCB1c2VkIHlldCBhdCB0aGlzIHBvaW50CiAgIC0gaWdj
IGxhY2tzIHJlZ2lzdGVycyB0byBjb25maWd1cmUgRlBFIGluIHRoZSB0cmFuc21pdCBkaXJlY3Rp
b24sIHNvCiAgICAgdGhpcyBBUEkgaXMgbm90IHV0aWxpemVkIGZvciBub3cuIFdoZW4gaWdjIHN1
cHBvcnRzIHByZWVtcHRpYmxlIHF1ZXVlLAogICAgIGRyaXZlciB3aWxsIHVzZSB0aGlzIEFQSSB0
byBtYW5hZ2UgaXRzIGNvbmZpZ3VyYXRpb24uCgpiKSBjb25maWd1cmVfcG1hYygpIC0+IG5vdCB1
c2VkCiAgIC0gdGhpcyBjYWxsYmFjayBkeW5hbWljYWxseSBjb250cm9scyBwbWFjX2VuYWJsZWQg
YXQgcnVudGltZS4gRm9yCiAgICAgZXhhbXBsZSwgbW1zdiBjYWxscyBjb25maWd1cmVfcG1hYygp
IGFuZCBkaXNhYmxlcyBwbWFjX2VuYWJsZWQgd2hlbgogICAgIHRoZSBsaW5rIHBhcnRuZXIgZ29l
cyBkb3duLCBldmVuIGlmIHRoZSB1c2VyIHByZXZpb3VzbHkgZW5hYmxlZCBpdC4KICAgICBUaGUg
aW50ZW50aW9uIGlzIHRvIHNhdmUgcG93ZXIgYnV0IGl0IGlzIG5vdCBmZWFzaWJsZSBpbiBpZ2MK
ICAgICBiZWNhdXNlIGl0IGNhdXNlcyBhbiBlbmRsZXNzIGFkYXB0ZXIgcmVzZXQgbG9vcDoKCiAg
IDEpIEJvYXJkIEEgYW5kIEJvYXJkIEIgY29tcGxldGUgdGhlIHZlcmlmaWNhdGlvbiBoYW5kc2hh
a2UuIFR4IG1vZGUKICAgICAgcmVnaXN0ZXIgZm9yIGJvdGggYm9hcmRzIGFyZSBpbiBUU04gbW9k
ZS4KICAgMikgQm9hcmQgQiBsaW5rIGdvZXMgZG93bi4KCiAgIE9uIEJvYXJkIEE6CiAgIDMpIG1t
c3YgY2FsbHMgY29uZmlndXJlX3BtYWMoKSB3aXRoIHBtYWNfZW5hYmxlZCA9IGZhbHNlLgogICA0
KSBjb25maWd1cmVfcG1hYygpIGluIGlnYyB1cGRhdGVzIGEgbmV3IGZpZWxkIGJhc2VkIG9uIHBt
YWNfZW5hYmxlZC4KICAgICAgRHJpdmVyIHVzZXMgdGhpcyBmaWVsZCBpbiBpZ2NfdHNuX25ld19m
bGFncygpIHRvIGluZGljYXRlIHRoYXQgdGhlCiAgICAgIHVzZXIgZW5hYmxlZC9kaXNhYmxlZCBG
UEUuCiAgIDUpIGNvbmZpZ3VyZV9wbWFjKCkgaW4gaWdjIGNhbGxzIGlnY190c25fb2ZmbG9hZF9h
cHBseSgpIHRvIGNoZWNrCiAgICAgIHdoZXRoZXIgYW4gYWRhcHRlciByZXNldCBpcyBuZWVkZWQu
IENhbGxzIGV4aXN0aW5nIGxvZ2ljIGluCiAgICAgIGlnY190c25fd2lsbF90eF9tb2RlX2NoYW5n
ZSgpIGFuZCBpZ2NfdHNuX25ld19mbGFncygpLgogICA2KSBTaW5jZSBwbWFjX2VuYWJsZWQgaXMg
bm93IGRpc2FibGVkIGFuZCBubyBvdGhlciBUU04gZmVhdHVyZSBpcwogICAgICBhY3RpdmUsIGln
Y190c25fd2lsbF90eF9tb2RlX2NoYW5nZSgpIGV2YWx1YXRlcyB0byB0cnVlIGJlY2F1c2UgVHgK
ICAgICAgbW9kZSB3aWxsIHN3aXRjaCBmcm9tIFRTTiB0byBMZWdhY3kuCiAgIDcpIERyaXZlciBy
ZXNldHMgdGhlIGFkYXB0ZXIuCiAgIDgpIFJlZ2lzdGVycyBhcmUgc2V0LCBhbmQgVHggbW9kZSBz
d2l0Y2hlcyB0byBMZWdhY3kuCiAgIDkpIFdoZW4gbGluayBwYXJ0bmVyIGlzIHVwLCBzdGVwcyAz
4oCTOCByZXBlYXQsIGJ1dCB0aGlzIHRpbWUgd2l0aAogICAgICBwbWFjX2VuYWJsZWQgPSB0cnVl
LCByZWFjdGl2YXRpbmcgVFNOLgogICAgICBpZ2NfdHNuX3dpbGxfdHhfbW9kZV9jaGFuZ2UoKSBl
dmFsdWF0ZXMgdG8gdHJ1ZSBhZ2Fpbiwgc2luY2UgVHgKICAgICAgbW9kZSB3aWxsIHN3aXRjaCBm
cm9tIExlZ2FjeSB0byBUU04uCiAgMTApIERyaXZlciByZXNldHMgdGhlIGFkYXB0ZXIuCiAgMTEp
IEFkYXB0ZXIgcmVzZXQgY29tcGxldGVzLCByZWdpc3RlcnMgYXJlIHNldCwgYW5kIFR4IG1vZGUg
c3dpdGNoZXMgdG8KICAgICAgVFNOLgoKICBPbiBCb2FyZCBCOgogIDEyKSBBZGFwdGVyIHJlc2V0
IG9uIEJvYXJkIEEgYXQgc3RlcCAxMCBjYXVzZXMgaXQgdG8gZGV0ZWN0IGl0cyBsaW5rCiAgICAg
IHBhcnRuZXIgYXMgZG93bi4KICAxMykgUmVwZWF0cyBzdGVwcyAz4oCTOC4KICAxNCkgT25jZSBy
ZXNldCBhZGFwdGVyIG9uIEJvYXJkIEEgaXMgY29tcGxldGVkIGF0IHN0ZXAgMTEsIGl0IGRldGVj
dHMKICAgICAgaXRzIGxpbmsgcGFydG5lciBhcyB1cC4KICAxNSkgUmVwZWF0cyBzdGVwcyA54oCT
MTEuCgogICAtIHRoaXMgY3ljbGUgcmVwZWF0cyBpbmRlZmluaXRlbHkuIFRvIGF2b2lkIHRoaXMg
aXNzdWUsIGlnYyBvbmx5IHVzZXMKICAgICBtbXN2LnBtYWNfZW5hYmxlZCB0byB0cmFjayB3aGV0
aGVyIEZQRSBpcyBlbmFibGVkIG9yIGRpc2FibGVkLgoKQ28tZGV2ZWxvcGVkLWJ5OiBWaW5pY2l1
cyBDb3N0YSBHb21lcyA8dmluaWNpdXMuZ29tZXNAaW50ZWwuY29tPgpTaWduZWQtb2ZmLWJ5OiBW
aW5pY2l1cyBDb3N0YSBHb21lcyA8dmluaWNpdXMuZ29tZXNAaW50ZWwuY29tPgpDby1kZXZlbG9w
ZWQtYnk6IENob29uZyBZb25nIExpYW5nIDx5b25nLmxpYW5nLmNob29uZ0BsaW51eC5pbnRlbC5j
b20+ClNpZ25lZC1vZmYtYnk6IENob29uZyBZb25nIExpYW5nIDx5b25nLmxpYW5nLmNob29uZ0Bs
aW51eC5pbnRlbC5jb20+CkNvLWRldmVsb3BlZC1ieTogQ2h3ZWUtTGluIENob29uZyA8Y2h3ZWUu
bGluLmNob29uZ0BpbnRlbC5jb20+ClNpZ25lZC1vZmYtYnk6IENod2VlLUxpbiBDaG9vbmcgPGNo
d2VlLmxpbi5jaG9vbmdAaW50ZWwuY29tPgpTaWduZWQtb2ZmLWJ5OiBGYWl6YWwgUmFoaW0gPGZh
aXphbC5hYmR1bC5yYWhpbUBsaW51eC5pbnRlbC5jb20+Ci0tLQogZHJpdmVycy9uZXQvZXRoZXJu
ZXQvaW50ZWwvaWdjL2lnYy5oICAgICAgICAgfCAgMTIgKy0KIGRyaXZlcnMvbmV0L2V0aGVybmV0
L2ludGVsL2lnYy9pZ2NfYmFzZS5oICAgIHwgICAxICsKIGRyaXZlcnMvbmV0L2V0aGVybmV0L2lu
dGVsL2lnYy9pZ2NfZGVmaW5lcy5oIHwgICA4ICstCiBkcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRl
bC9pZ2MvaWdjX2V0aHRvb2wuYyB8ICAyMSArKysKIGRyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVs
L2lnYy9pZ2NfbWFpbi5jICAgIHwgIDUyICsrKysrKy0KIGRyaXZlcnMvbmV0L2V0aGVybmV0L2lu
dGVsL2lnYy9pZ2NfdHNuLmMgICAgIHwgMTQ2ICsrKysrKysrKysrKysrKysrKy0KIGRyaXZlcnMv
bmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfdHNuLmggICAgIHwgIDUwICsrKysrKysKIDcgZmls
ZXMgY2hhbmdlZCwgMjg1IGluc2VydGlvbnMoKyksIDUgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0
IGEvZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnYy5oIGIvZHJpdmVycy9uZXQvZXRo
ZXJuZXQvaW50ZWwvaWdjL2lnYy5oCmluZGV4IGJhN2M1NWQyZGM4NS4uZDk3MDk2OGYzMjMzIDEw
MDY0NAotLS0gYS9kcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2MvaWdjLmgKKysrIGIvZHJp
dmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnYy5oCkBAIC00MCw2ICs0MCwxMCBAQCB2b2lk
IGlnY19ldGh0b29sX3NldF9vcHMoc3RydWN0IG5ldF9kZXZpY2UgKik7CiAKICNkZWZpbmUgSUdD
X01BWF9UWF9UU1RBTVBfUkVHUwkJNAogCitzdHJ1Y3QgaWdjX2ZwZV90IHsKKwlzdHJ1Y3QgZXRo
dG9vbF9tbXN2IG1tc3Y7Cit9OworCiBlbnVtIGlnY19tYWNfZmlsdGVyX3R5cGUgewogCUlHQ19N
QUNfRklMVEVSX1RZUEVfRFNUID0gMCwKIAlJR0NfTUFDX0ZJTFRFUl9UWVBFX1NSQwpAQCAtMzMy
LDYgKzMzNiw4IEBAIHN0cnVjdCBpZ2NfYWRhcHRlciB7CiAJCXN0cnVjdCB0aW1lc3BlYzY0IHBl
cmlvZDsKIAl9IHBlcm91dFtJR0NfTl9QRVJPVVRdOwogCisJc3RydWN0IGlnY19mcGVfdCBmcGU7
CisKIAkvKiBMRURzICovCiAJc3RydWN0IG11dGV4IGxlZF9tdXRleDsKIAlzdHJ1Y3QgaWdjX2xl
ZF9jbGFzc2RldiAqbGVkczsKQEAgLTM4OSwxMCArMzk1LDExIEBAIGV4dGVybiBjaGFyIGlnY19k
cml2ZXJfbmFtZVtdOwogI2RlZmluZSBJR0NfRkxBR19UU05fUUJWX0VOQUJMRUQJQklUKDE3KQog
I2RlZmluZSBJR0NfRkxBR19UU05fUUFWX0VOQUJMRUQJQklUKDE4KQogI2RlZmluZSBJR0NfRkxB
R19UU05fTEVHQUNZX0VOQUJMRUQJQklUKDE5KQorI2RlZmluZSBJR0NfRkxBR19UU05fUFJFRU1Q
VF9FTkFCTEVECUJJVCgyMCkKIAogI2RlZmluZSBJR0NfRkxBR19UU05fQU5ZX0VOQUJMRUQJCQkJ
XAogCShJR0NfRkxBR19UU05fUUJWX0VOQUJMRUQgfCBJR0NfRkxBR19UU05fUUFWX0VOQUJMRUQg
fAlcCi0JIElHQ19GTEFHX1RTTl9MRUdBQ1lfRU5BQkxFRCkKKwkgSUdDX0ZMQUdfVFNOX0xFR0FD
WV9FTkFCTEVEIHwgSUdDX0ZMQUdfVFNOX1BSRUVNUFRfRU5BQkxFRCkKIAogI2RlZmluZSBJR0Nf
RkxBR19SU1NfRklFTERfSVBWNF9VRFAJQklUKDYpCiAjZGVmaW5lIElHQ19GTEFHX1JTU19GSUVM
RF9JUFY2X1VEUAlCSVQoNykKQEAgLTczNyw3ICs3NDQsMTAgQEAgc3RydWN0IGlnY19uZmNfcnVs
ZSAqaWdjX2dldF9uZmNfcnVsZShzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIsCiAJCQkJICAg
ICAgdTMyIGxvY2F0aW9uKTsKIGludCBpZ2NfYWRkX25mY19ydWxlKHN0cnVjdCBpZ2NfYWRhcHRl
ciAqYWRhcHRlciwgc3RydWN0IGlnY19uZmNfcnVsZSAqcnVsZSk7CiB2b2lkIGlnY19kZWxfbmZj
X3J1bGUoc3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVyLCBzdHJ1Y3QgaWdjX25mY19ydWxlICpy
dWxlKTsKK3ZvaWQgaWdjX2Rpc2FibGVfZW1wdHlfYWRkcl9yZWN2KHN0cnVjdCBpZ2NfYWRhcHRl
ciAqYWRhcHRlcik7CitpbnQgaWdjX2VuYWJsZV9lbXB0eV9hZGRyX3JlY3Yoc3RydWN0IGlnY19h
ZGFwdGVyICphZGFwdGVyKTsKIHN0cnVjdCBpZ2NfcmluZyAqaWdjX2dldF90eF9yaW5nKHN0cnVj
dCBpZ2NfYWRhcHRlciAqYWRhcHRlciwgaW50IGNwdSk7Cit2b2lkIGlnY19mbHVzaF90eF9kZXNj
cmlwdG9ycyhzdHJ1Y3QgaWdjX3JpbmcgKnJpbmcpOwogdm9pZCBpZ2NfcHRwX2luaXQoc3RydWN0
IGlnY19hZGFwdGVyICphZGFwdGVyKTsKIHZvaWQgaWdjX3B0cF9yZXNldChzdHJ1Y3QgaWdjX2Fk
YXB0ZXIgKmFkYXB0ZXIpOwogdm9pZCBpZ2NfcHRwX3N1c3BlbmQoc3RydWN0IGlnY19hZGFwdGVy
ICphZGFwdGVyKTsKZGlmZiAtLWdpdCBhL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9p
Z2NfYmFzZS5oIGIvZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY19iYXNlLmgKaW5k
ZXggYmY4Y2RmYmJhOWZmLi42MzIwZWFiYjcyZmUgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvbmV0L2V0
aGVybmV0L2ludGVsL2lnYy9pZ2NfYmFzZS5oCisrKyBiL2RyaXZlcnMvbmV0L2V0aGVybmV0L2lu
dGVsL2lnYy9pZ2NfYmFzZS5oCkBAIC00OSw2ICs0OSw3IEBAIHN0cnVjdCBpZ2NfYWR2X3R4X2Nv
bnRleHRfZGVzYyB7CiAjZGVmaW5lIElHQ19BRFZUWERfRENNRF9ERVhUCTB4MjAwMDAwMDAgLyog
RGVzY3JpcHRvciBleHRlbnNpb24gKDE9QWR2KSAqLwogI2RlZmluZSBJR0NfQURWVFhEX0RDTURf
VkxFCTB4NDAwMDAwMDAgLyogVkxBTiBwa3QgZW5hYmxlICovCiAjZGVmaW5lIElHQ19BRFZUWERf
RENNRF9UU0UJMHg4MDAwMDAwMCAvKiBUQ1AgU2VnIGVuYWJsZSAqLworI2RlZmluZSBJR0NfQURW
VFhEX1BBWUxFTl9NQVNLCTBYRkZGRkMwMDAgLyogQWR2IGRlc2MgUEFZTEVOIG1hc2sgKi8KICNk
ZWZpbmUgSUdDX0FEVlRYRF9QQVlMRU5fU0hJRlQJMTQgLyogQWR2IGRlc2MgUEFZTEVOIHNoaWZ0
ICovCiAKICNkZWZpbmUgSUdDX1JBUl9FTlRSSUVTCQkxNgpkaWZmIC0tZ2l0IGEvZHJpdmVycy9u
ZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY19kZWZpbmVzLmggYi9kcml2ZXJzL25ldC9ldGhlcm5l
dC9pbnRlbC9pZ2MvaWdjX2RlZmluZXMuaAppbmRleCBkNzUzYThlYzM2YWUuLjU0MmM3Yzg4MDJh
MCAxMDA2NDQKLS0tIGEvZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY19kZWZpbmVz
LmgKKysrIGIvZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY19kZWZpbmVzLmgKQEAg
LTMwOCw2ICszMDgsOCBAQAogI2RlZmluZSBJR0NfVFhEX0RUWVBfQwkJMHgwMDAwMDAwMCAvKiBD
b250ZXh0IERlc2NyaXB0b3IgKi8KICNkZWZpbmUgSUdDX1RYRF9QT1BUU19JWFNNCTB4MDEgICAg
ICAgLyogSW5zZXJ0IElQIGNoZWNrc3VtICovCiAjZGVmaW5lIElHQ19UWERfUE9QVFNfVFhTTQkw
eDAyICAgICAgIC8qIEluc2VydCBUQ1AvVURQIGNoZWNrc3VtICovCisjZGVmaW5lIElHQ19UWERf
UE9QVFNfU01EX01BU0sJMHgzMDAwICAgICAvKiBJbmRpY2F0ZXMgd2hldGhlciBpdCdzIFNNRC1W
IG9yIFNNRC1SICovCisKICNkZWZpbmUgSUdDX1RYRF9DTURfRU9QCQkweDAxMDAwMDAwIC8qIEVu
ZCBvZiBQYWNrZXQgKi8KICNkZWZpbmUgSUdDX1RYRF9DTURfSUMJCTB4MDQwMDAwMDAgLyogSW5z
ZXJ0IENoZWNrc3VtICovCiAjZGVmaW5lIElHQ19UWERfQ01EX0RFWFQJMHgyMDAwMDAwMCAvKiBE
ZXNjIGV4dGVuc2lvbiAoMCA9IGxlZ2FjeSkgKi8KQEAgLTM2Myw2ICszNjUsOCBAQAogI2RlZmlu
ZSBJR0NfU1JSQ1RMX1RJTUVSMFNFTCh0aW1lcikJKCgodGltZXIpICYgMHgzKSA8PCAxNykKIAog
LyogUmVjZWl2ZSBEZXNjcmlwdG9yIGJpdCBkZWZpbml0aW9ucyAqLworI2RlZmluZSBJR0NfUlhE
X1NUQVRfU01EX1RZUEVfVgkweDAxCS8qIFNNRC1WIFBhY2tldCAqLworI2RlZmluZSBJR0NfUlhE
X1NUQVRfU01EX1RZUEVfUgkweDAyCS8qIFNNRC1SIFBhY2tldCAqLwogI2RlZmluZSBJR0NfUlhE
X1NUQVRfRU9QCTB4MDIJLyogRW5kIG9mIFBhY2tldCAqLwogI2RlZmluZSBJR0NfUlhEX1NUQVRf
SVhTTQkweDA0CS8qIElnbm9yZSBjaGVja3N1bSAqLwogI2RlZmluZSBJR0NfUlhEX1NUQVRfVURQ
Q1MJMHgxMAkvKiBVRFAgeHN1bSBjYWxjdWxhdGVkICovCkBAIC0zNzIsNyArMzc2LDggQEAKICNk
ZWZpbmUgSUdDX1JYREVYVF9TVEFURVJSX0xCCTB4MDAwNDAwMDAKIAogLyogQWR2YW5jZWQgUmVj
ZWl2ZSBEZXNjcmlwdG9yIGJpdCBkZWZpbml0aW9ucyAqLwotI2RlZmluZSBJR0NfUlhEQURWX1NU
QVRfVFNJUAkweDA4MDAwIC8qIHRpbWVzdGFtcCBpbiBwYWNrZXQgKi8KKyNkZWZpbmUgSUdDX1JY
REFEVl9TVEFUX1NNRF9UWVBFX01BU0sJMHgwNjAwMAorI2RlZmluZSBJR0NfUlhEQURWX1NUQVRf
VFNJUAkJMHgwODAwMCAvKiB0aW1lc3RhbXAgaW4gcGFja2V0ICovCiAKICNkZWZpbmUgSUdDX1JY
REVYVF9TVEFURVJSX0w0RQkJMHgyMDAwMDAwMAogI2RlZmluZSBJR0NfUlhERVhUX1NUQVRFUlJf
SVBFCQkweDQwMDAwMDAwCkBAIC01NzUsNiArNTgwLDcgQEAKIAogLyogVHJhbnNtaXQgU2NoZWR1
bGluZyAqLwogI2RlZmluZSBJR0NfVFFBVkNUUkxfVFJBTlNNSVRfTU9ERV9UU04JMHgwMDAwMDAw
MQorI2RlZmluZSBJR0NfVFFBVkNUUkxfUFJFRU1QVF9FTkEJMHgwMDAwMDAwMgogI2RlZmluZSBJ
R0NfVFFBVkNUUkxfRU5IQU5DRURfUUFWCTB4MDAwMDAwMDgKICNkZWZpbmUgSUdDX1RRQVZDVFJM
X0ZVVFNDRERJUwkJMHgwMDAwMDA4MAogCmRpZmYgLS1naXQgYS9kcml2ZXJzL25ldC9ldGhlcm5l
dC9pbnRlbC9pZ2MvaWdjX2V0aHRvb2wuYyBiL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2ln
Yy9pZ2NfZXRodG9vbC5jCmluZGV4IDgxNzgzODY3NzgxNy4uYjY0ZDVjNmMxZDIwIDEwMDY0NAot
LS0gYS9kcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2MvaWdjX2V0aHRvb2wuYworKysgYi9k
cml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2MvaWdjX2V0aHRvb2wuYwpAQCAtOCw2ICs4LDcg
QEAKIAogI2luY2x1ZGUgImlnYy5oIgogI2luY2x1ZGUgImlnY19kaWFnLmgiCisjaW5jbHVkZSAi
aWdjX3Rzbi5oIgogCiAvKiBmb3J3YXJkIGRlY2xhcmF0aW9uICovCiBzdHJ1Y3QgaWdjX3N0YXRz
IHsKQEAgLTE3ODEsNiArMTc4MiwyNSBAQCBzdGF0aWMgaW50IGlnY19ldGh0b29sX3NldF9lZWUo
c3RydWN0IG5ldF9kZXZpY2UgKm5ldGRldiwKIAlyZXR1cm4gMDsKIH0KIAorc3RhdGljIGludCBp
Z2NfZXRodG9vbF9zZXRfbW0oc3RydWN0IG5ldF9kZXZpY2UgKm5ldGRldiwKKwkJCSAgICAgIHN0
cnVjdCBldGh0b29sX21tX2NmZyAqY21kLAorCQkJICAgICAgc3RydWN0IG5ldGxpbmtfZXh0X2Fj
ayAqZXh0YWNrKQoreworCXN0cnVjdCBpZ2NfYWRhcHRlciAqYWRhcHRlciA9IG5ldGRldl9wcml2
KG5ldGRldik7CisJc3RydWN0IGlnY19mcGVfdCAqZnBlID0gJmFkYXB0ZXItPmZwZTsKKworCWlm
IChmcGUtPm1tc3YucG1hY19lbmFibGVkICE9IGNtZC0+cG1hY19lbmFibGVkKSB7CisJCWlmIChj
bWQtPnBtYWNfZW5hYmxlZCkKKwkJCXN0YXRpY19icmFuY2hfaW5jKCZpZ2NfZnBlX2VuYWJsZWQp
OworCQllbHNlCisJCQlzdGF0aWNfYnJhbmNoX2RlYygmaWdjX2ZwZV9lbmFibGVkKTsKKwl9CisK
KwlldGh0b29sX21tc3Zfc2V0X21tKCZmcGUtPm1tc3YsIGNtZCk7CisKKwlyZXR1cm4gaWdjX3Rz
bl9vZmZsb2FkX2FwcGx5KGFkYXB0ZXIpOworfQorCiBzdGF0aWMgaW50IGlnY19ldGh0b29sX2dl
dF9saW5rX2tzZXR0aW5ncyhzdHJ1Y3QgbmV0X2RldmljZSAqbmV0ZGV2LAogCQkJCQkgIHN0cnVj
dCBldGh0b29sX2xpbmtfa3NldHRpbmdzICpjbWQpCiB7CkBAIC0yMDc2LDYgKzIwOTYsNyBAQCBz
dGF0aWMgY29uc3Qgc3RydWN0IGV0aHRvb2xfb3BzIGlnY19ldGh0b29sX29wcyA9IHsKIAkuZ2V0
X2xpbmtfa3NldHRpbmdzCT0gaWdjX2V0aHRvb2xfZ2V0X2xpbmtfa3NldHRpbmdzLAogCS5zZXRf
bGlua19rc2V0dGluZ3MJPSBpZ2NfZXRodG9vbF9zZXRfbGlua19rc2V0dGluZ3MsCiAJLnNlbGZf
dGVzdAkJPSBpZ2NfZXRodG9vbF9kaWFnX3Rlc3QsCisJLnNldF9tbQkJCT0gaWdjX2V0aHRvb2xf
c2V0X21tLAogfTsKIAogdm9pZCBpZ2NfZXRodG9vbF9zZXRfb3BzKHN0cnVjdCBuZXRfZGV2aWNl
ICpuZXRkZXYpCmRpZmYgLS1naXQgYS9kcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2MvaWdj
X21haW4uYyBiL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfbWFpbi5jCmluZGV4
IDZmMDExMGUzYWMyMi4uNzFjMzc3Y2I3YTg4IDEwMDY0NAotLS0gYS9kcml2ZXJzL25ldC9ldGhl
cm5ldC9pbnRlbC9pZ2MvaWdjX21haW4uYworKysgYi9kcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRl
bC9pZ2MvaWdjX21haW4uYwpAQCAtMjU0OCw3ICsyNTQ4LDcgQEAgc3RhdGljIGludCBpZ2NfeGRw
X3J1bl9wcm9nKHN0cnVjdCBpZ2NfYWRhcHRlciAqYWRhcHRlciwgc3RydWN0IHhkcF9idWZmICp4
ZHApCiB9CiAKIC8qIFRoaXMgZnVuY3Rpb24gYXNzdW1lcyBfX25ldGlmX3R4X2xvY2sgaXMgaGVs
ZCBieSB0aGUgY2FsbGVyLiAqLwotc3RhdGljIHZvaWQgaWdjX2ZsdXNoX3R4X2Rlc2NyaXB0b3Jz
KHN0cnVjdCBpZ2NfcmluZyAqcmluZykKK3ZvaWQgaWdjX2ZsdXNoX3R4X2Rlc2NyaXB0b3JzKHN0
cnVjdCBpZ2NfcmluZyAqcmluZykKIHsKIAkvKiBPbmNlIHRhaWwgcG9pbnRlciBpcyB1cGRhdGVk
LCBoYXJkd2FyZSBjYW4gZmV0Y2ggdGhlIGRlc2NyaXB0b3JzCiAJICogYW55IHRpbWUgc28gd2Ug
aXNzdWUgYSB3cml0ZSBtZW1iYXIgaGVyZSB0byBlbnN1cmUgYWxsIG1lbW9yeQpAQCAtMjYzNyw2
ICsyNjM3LDE0IEBAIHN0YXRpYyBpbnQgaWdjX2NsZWFuX3J4X2lycShzdHJ1Y3QgaWdjX3FfdmVj
dG9yICpxX3ZlY3RvciwgY29uc3QgaW50IGJ1ZGdldCkKIAkJCXNpemUgLT0gSUdDX1RTX0hEUl9M
RU47CiAJCX0KIAorCQlpZiAoaWdjX2ZwZV9pc19wbWFjX2VuYWJsZWQoYWRhcHRlcikgJiYKKwkJ
ICAgIGlnY19mcGVfaGFuZGxlX21wYWNrZXQoYWRhcHRlciwgcnhfZGVzYywgc2l6ZSwgcGt0YnVm
KSkgeworCQkJLyogQWR2YW5jZSB0aGUgcmluZyBuZXh0LXRvLWNsZWFuICovCisJCQlpZ2NfaXNf
bm9uX2VvcChyeF9yaW5nLCByeF9kZXNjKTsKKwkJCWNsZWFuZWRfY291bnQrKzsKKwkJCWNvbnRp
bnVlOworCQl9CisKIAkJaWYgKCFza2IpIHsKIAkJCXhkcF9pbml0X2J1ZmYoJmN0eC54ZHAsIHRy
dWVzaXplLCAmcnhfcmluZy0+eGRwX3J4cSk7CiAJCQl4ZHBfcHJlcGFyZV9idWZmKCZjdHgueGRw
LCBwa3RidWYgLSBpZ2Nfcnhfb2Zmc2V0KHJ4X3JpbmcpLApAQCAtMzE0NCw2ICszMTUyLDExIEBA
IHN0YXRpYyBib29sIGlnY19jbGVhbl90eF9pcnEoc3RydWN0IGlnY19xX3ZlY3RvciAqcV92ZWN0
b3IsIGludCBuYXBpX2J1ZGdldCkKIAkJaWYgKCEoZW9wX2Rlc2MtPndiLnN0YXR1cyAmIGNwdV90
b19sZTMyKElHQ19UWERfU1RBVF9ERCkpKQogCQkJYnJlYWs7CiAKKwkJaWYgKGlnY19mcGVfaXNf
cG1hY19lbmFibGVkKGFkYXB0ZXIpICYmCisJCSAgICBpZ2NfZnBlX3RyYW5zbWl0dGVkX3NtZF92
KHR4X2Rlc2MpKQorCQkJZXRodG9vbF9tbXN2X2V2ZW50X2hhbmRsZSgmYWRhcHRlci0+ZnBlLm1t
c3YsCisJCQkJCQkgIEVUSFRPT0xfTU1TVl9MRF9TRU5UX1ZFUklGWV9NUEFDS0VUKTsKKwogCQkv
KiBIb2xkIHRoZSBjb21wbGV0aW9ucyB3aGlsZSB0aGVyZSdzIGEgcGVuZGluZyB0eCBoYXJkd2Fy
ZQogCQkgKiB0aW1lc3RhbXAgcmVxdWVzdCBmcm9tIFhEUCBUeCBtZXRhZGF0YS4KIAkJICovCkBA
IC00MDM1LDYgKzQwNDgsMzAgQEAgc3RhdGljIGludCBpZ2NfdWNfdW5zeW5jKHN0cnVjdCBuZXRf
ZGV2aWNlICpuZXRkZXYsIGNvbnN0IHVuc2lnbmVkIGNoYXIgKmFkZHIpCiAJcmV0dXJuIDA7CiB9
CiAKKy8qKgorICogaWdjX2VuYWJsZV9lbXB0eV9hZGRyX3JlY3YgLSBFbmFibGUgUnggb2YgcGFj
a2V0cyB3aXRoIGFsbC16ZXJvZXMgTUFDIGFkZHJlc3MKKyAqIEBhZGFwdGVyOiBQb2ludGVyIHRv
IHRoZSBpZ2NfYWRhcHRlciBzdHJ1Y3R1cmUuCisgKgorICogRnJhbWUgcHJlZW1wdGlvbiB2ZXJp
ZmljYXRpb24gcmVxdWlyZXMgdGhhdCBwYWNrZXRzIHdpdGggdGhlIGFsbC16ZXJvZXMKKyAqIE1B
QyBhZGRyZXNzIGFyZSBhbGxvd2VkIHRvIGJlIHJlY2VpdmVkIGJ5IHRoZSBkcml2ZXIuIFRoaXMg
ZnVuY3Rpb24gYWRkcyB0aGUKKyAqIGFsbC16ZXJvZXMgZGVzdGluYXRpb24gYWRkcmVzcyB0byB0
aGUgbGlzdCBvZiBhY2NlcHRhYmxlIGFkZHJlc3Nlcy4KKyAqCisgKiBSZXR1cm46IDAgb24gc3Vj
Y2VzcywgbmVnYXRpdmUgdmFsdWUgb3RoZXJ3aXNlLgorICovCitpbnQgaWdjX2VuYWJsZV9lbXB0
eV9hZGRyX3JlY3Yoc3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVyKQoreworCXU4IGVtcHR5W0VU
SF9BTEVOXSA9IHt9OworCisJcmV0dXJuIGlnY19hZGRfbWFjX2ZpbHRlcihhZGFwdGVyLCBJR0Nf
TUFDX0ZJTFRFUl9UWVBFX0RTVCwgZW1wdHksIC0xKTsKK30KKwordm9pZCBpZ2NfZGlzYWJsZV9l
bXB0eV9hZGRyX3JlY3Yoc3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVyKQoreworCXU4IGVtcHR5
W0VUSF9BTEVOXSA9IHt9OworCisJaWdjX2RlbF9tYWNfZmlsdGVyKGFkYXB0ZXIsIElHQ19NQUNf
RklMVEVSX1RZUEVfRFNULCBlbXB0eSk7Cit9CisKIC8qKgogICogaWdjX3NldF9yeF9tb2RlIC0g
U2Vjb25kYXJ5IFVuaWNhc3QsIE11bHRpY2FzdCBhbmQgUHJvbWlzY3VvdXMgbW9kZSBzZXQKICAq
IEBuZXRkZXY6IG5ldHdvcmsgaW50ZXJmYWNlIGRldmljZSBzdHJ1Y3R1cmUKQEAgLTUzMTAsNiAr
NTM0Nyw5IEBAIHZvaWQgaWdjX2Rvd24oc3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVyKQogCWln
Y19kaXNhYmxlX2FsbF90eF9yaW5nc19odyhhZGFwdGVyKTsKIAlpZ2NfY2xlYW5fYWxsX3R4X3Jp
bmdzKGFkYXB0ZXIpOwogCWlnY19jbGVhbl9hbGxfcnhfcmluZ3MoYWRhcHRlcik7CisKKwlpZiAo
YWRhcHRlci0+ZnBlLm1tc3YucG1hY19lbmFibGVkKQorCQlldGh0b29sX21tc3Zfc3RvcCgmYWRh
cHRlci0+ZnBlLm1tc3YpOwogfQogCiB2b2lkIGlnY19yZWluaXRfbG9ja2VkKHN0cnVjdCBpZ2Nf
YWRhcHRlciAqYWRhcHRlcikKQEAgLTU4MzQsNiArNTg3NCwxMCBAQCBzdGF0aWMgdm9pZCBpZ2Nf
d2F0Y2hkb2dfdGFzayhzdHJ1Y3Qgd29ya19zdHJ1Y3QgKndvcmspCiAJCQkgKi8KIAkJCWlnY190
c25fYWRqdXN0X3R4dGltZV9vZmZzZXQoYWRhcHRlcik7CiAKKwkJCWlmIChhZGFwdGVyLT5mcGUu
bW1zdi5wbWFjX2VuYWJsZWQpCisJCQkJZXRodG9vbF9tbXN2X2xpbmtfc3RhdGVfaGFuZGxlKCZh
ZGFwdGVyLT5mcGUubW1zdiwKKwkJCQkJCQkgICAgICAgdHJ1ZSk7CisKIAkJCWlmIChhZGFwdGVy
LT5saW5rX3NwZWVkICE9IFNQRUVEXzEwMDApCiAJCQkJZ290byBub193YWl0OwogCkBAIC01ODY5
LDYgKzU5MTMsMTAgQEAgc3RhdGljIHZvaWQgaWdjX3dhdGNoZG9nX3Rhc2soc3RydWN0IHdvcmtf
c3RydWN0ICp3b3JrKQogCQkJbmV0ZGV2X2luZm8obmV0ZGV2LCAiTklDIExpbmsgaXMgRG93blxu
Iik7CiAJCQluZXRpZl9jYXJyaWVyX29mZihuZXRkZXYpOwogCisJCQlpZiAoYWRhcHRlci0+ZnBl
Lm1tc3YucG1hY19lbmFibGVkKQorCQkJCWV0aHRvb2xfbW1zdl9saW5rX3N0YXRlX2hhbmRsZSgm
YWRhcHRlci0+ZnBlLm1tc3YsCisJCQkJCQkJICAgICAgIGZhbHNlKTsKKwogCQkJLyogbGluayBz
dGF0ZSBoYXMgY2hhbmdlZCwgc2NoZWR1bGUgcGh5IGluZm8gdXBkYXRlICovCiAJCQlpZiAoIXRl
c3RfYml0KF9fSUdDX0RPV04sICZhZGFwdGVyLT5zdGF0ZSkpCiAJCQkJbW9kX3RpbWVyKCZhZGFw
dGVyLT5waHlfaW5mb190aW1lciwKQEAgLTcxODksNiArNzIzNyw4IEBAIHN0YXRpYyBpbnQgaWdj
X3Byb2JlKHN0cnVjdCBwY2lfZGV2ICpwZGV2LAogCiAJaWdjX3Rzbl9jbGVhcl9zY2hlZHVsZShh
ZGFwdGVyKTsKIAorCWlnY19mcGVfaW5pdChhZGFwdGVyKTsKKwogCS8qIHJlc2V0IHRoZSBoYXJk
d2FyZSB3aXRoIHRoZSBuZXcgc2V0dGluZ3MgKi8KIAlpZ2NfcmVzZXQoYWRhcHRlcik7CiAKZGlm
ZiAtLWdpdCBhL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfdHNuLmMgYi9kcml2
ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2MvaWdjX3Rzbi5jCmluZGV4IDViM2IxYmMwYjY0YS4u
OGExNzI1Njg4MzgxIDEwMDY0NAotLS0gYS9kcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2Mv
aWdjX3Rzbi5jCisrKyBiL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfdHNuLmMK
QEAgLTIsOSArMiwxMzUgQEAKIC8qIENvcHlyaWdodCAoYykgIDIwMTkgSW50ZWwgQ29ycG9yYXRp
b24gKi8KIAogI2luY2x1ZGUgImlnYy5oIgorI2luY2x1ZGUgImlnY19iYXNlLmgiCiAjaW5jbHVk
ZSAiaWdjX2h3LmgiCiAjaW5jbHVkZSAiaWdjX3Rzbi5oIgogCitERUZJTkVfU1RBVElDX0tFWV9G
QUxTRShpZ2NfZnBlX2VuYWJsZWQpOworCitzdGF0aWMgaW50IGlnY19mcGVfaW5pdF9zbWRfZnJh
bWUoc3RydWN0IGlnY19yaW5nICpyaW5nLAorCQkJCSAgc3RydWN0IGlnY190eF9idWZmZXIgKmJ1
ZmZlciwKKwkJCQkgIHN0cnVjdCBza19idWZmICpza2IpCit7CisJZG1hX2FkZHJfdCBkbWEgPSBk
bWFfbWFwX3NpbmdsZShyaW5nLT5kZXYsIHNrYi0+ZGF0YSwgc2tiLT5sZW4sCisJCQkJCURNQV9U
T19ERVZJQ0UpOworCisJaWYgKGRtYV9tYXBwaW5nX2Vycm9yKHJpbmctPmRldiwgZG1hKSkgewor
CQluZXRkZXZfZXJyX29uY2UocmluZy0+bmV0ZGV2LCAiRmFpbGVkIHRvIG1hcCBETUEgZm9yIFRY
XG4iKTsKKwkJcmV0dXJuIC1FTk9NRU07CisJfQorCisJYnVmZmVyLT5za2IgPSBza2I7CisJYnVm
ZmVyLT5wcm90b2NvbCA9IDA7CisJYnVmZmVyLT5ieXRlY291bnQgPSBza2ItPmxlbjsKKwlidWZm
ZXItPmdzb19zZWdzID0gMTsKKwlidWZmZXItPnRpbWVfc3RhbXAgPSBqaWZmaWVzOworCWRtYV91
bm1hcF9sZW5fc2V0KGJ1ZmZlciwgbGVuLCBza2ItPmxlbik7CisJZG1hX3VubWFwX2FkZHJfc2V0
KGJ1ZmZlciwgZG1hLCBkbWEpOworCisJcmV0dXJuIDA7Cit9CisKK3N0YXRpYyBpbnQgaWdjX2Zw
ZV9pbml0X3R4X2Rlc2NyaXB0b3Ioc3RydWN0IGlnY19yaW5nICpyaW5nLAorCQkJCSAgICAgIHN0
cnVjdCBza19idWZmICpza2IsCisJCQkJICAgICAgZW51bSBpZ2NfdHhkX3BvcHRzX3R5cGUgdHlw
ZSkKK3sKKwl1MzIgY21kX3R5cGUsIG9saW5mb19zdGF0dXMgPSAwOworCXN0cnVjdCBpZ2NfdHhf
YnVmZmVyICpidWZmZXI7CisJdW5pb24gaWdjX2Fkdl90eF9kZXNjICpkZXNjOworCWludCBlcnI7
CisKKwlpZiAoIWlnY19kZXNjX3VudXNlZChyaW5nKSkKKwkJcmV0dXJuIC1FQlVTWTsKKworCWJ1
ZmZlciA9ICZyaW5nLT50eF9idWZmZXJfaW5mb1tyaW5nLT5uZXh0X3RvX3VzZV07CisJZXJyID0g
aWdjX2ZwZV9pbml0X3NtZF9mcmFtZShyaW5nLCBidWZmZXIsIHNrYik7CisJaWYgKGVycikKKwkJ
cmV0dXJuIGVycjsKKworCWNtZF90eXBlID0gSUdDX0FEVlRYRF9EVFlQX0RBVEEgfCBJR0NfQURW
VFhEX0RDTURfREVYVCB8CisJCSAgIElHQ19BRFZUWERfRENNRF9JRkNTIHwgSUdDX1RYRF9EQ01E
IHwKKwkJICAgYnVmZmVyLT5ieXRlY291bnQ7CisKKwlvbGluZm9fc3RhdHVzIHw9IEZJRUxEX1BS
RVAoSUdDX0FEVlRYRF9QQVlMRU5fTUFTSywgYnVmZmVyLT5ieXRlY291bnQpOworCisJc3dpdGNo
ICh0eXBlKSB7CisJY2FzZSBTTURfVjoKKwljYXNlIFNNRF9SOgorCQlvbGluZm9fc3RhdHVzIHw9
IEZJRUxEX1BSRVAoSUdDX1RYRF9QT1BUU19TTURfTUFTSywgdHlwZSk7CisJCWJyZWFrOworCX0K
KworCWRlc2MgPSBJR0NfVFhfREVTQyhyaW5nLCByaW5nLT5uZXh0X3RvX3VzZSk7CisJZGVzYy0+
cmVhZC5jbWRfdHlwZV9sZW4gPSBjcHVfdG9fbGUzMihjbWRfdHlwZSk7CisJZGVzYy0+cmVhZC5v
bGluZm9fc3RhdHVzID0gY3B1X3RvX2xlMzIob2xpbmZvX3N0YXR1cyk7CisJZGVzYy0+cmVhZC5i
dWZmZXJfYWRkciA9IGNwdV90b19sZTY0KGRtYV91bm1hcF9hZGRyKGJ1ZmZlciwgZG1hKSk7CisK
KwluZXRkZXZfdHhfc2VudF9xdWV1ZSh0eHJpbmdfdHhxKHJpbmcpLCBza2ItPmxlbik7CisKKwli
dWZmZXItPm5leHRfdG9fd2F0Y2ggPSBkZXNjOworCXJpbmctPm5leHRfdG9fdXNlID0gKHJpbmct
Pm5leHRfdG9fdXNlICsgMSkgJSByaW5nLT5jb3VudDsKKworCXJldHVybiAwOworfQorCitzdGF0
aWMgaW50IGlnY19mcGVfeG1pdF9zbWRfZnJhbWUoc3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVy
LAorCQkJCSAgZW51bSBpZ2NfdHhkX3BvcHRzX3R5cGUgdHlwZSkKK3sKKwlpbnQgY3B1ID0gc21w
X3Byb2Nlc3Nvcl9pZCgpOworCXN0cnVjdCBuZXRkZXZfcXVldWUgKm5xOworCXN0cnVjdCBpZ2Nf
cmluZyAqcmluZzsKKwlzdHJ1Y3Qgc2tfYnVmZiAqc2tiOworCWludCBlcnI7CisKKwlyaW5nID0g
aWdjX2dldF90eF9yaW5nKGFkYXB0ZXIsIGNwdSk7CisJbnEgPSB0eHJpbmdfdHhxKHJpbmcpOwor
CisJc2tiID0gYWxsb2Nfc2tiKFNNRF9GUkFNRV9TSVpFLCBHRlBfQVRPTUlDKTsKKwlpZiAoIXNr
YikKKwkJcmV0dXJuIC1FTk9NRU07CisKKwlza2JfcHV0X3plcm8oc2tiLCBTTURfRlJBTUVfU0la
RSk7CisKKwlfX25ldGlmX3R4X2xvY2sobnEsIGNwdSk7CisKKwllcnIgPSBpZ2NfZnBlX2luaXRf
dHhfZGVzY3JpcHRvcihyaW5nLCBza2IsIHR5cGUpOworCWlnY19mbHVzaF90eF9kZXNjcmlwdG9y
cyhyaW5nKTsKKworCV9fbmV0aWZfdHhfdW5sb2NrKG5xKTsKKworCXJldHVybiBlcnI7Cit9CisK
K3N0YXRpYyB2b2lkIGlnY19mcGVfc2VuZF9tcGFja2V0KHN0cnVjdCBldGh0b29sX21tc3YgKm1t
c3YsCisJCQkJIGVudW0gZXRodG9vbF9tcGFja2V0IHR5cGUpCit7CisJc3RydWN0IGlnY19mcGVf
dCAqZnBlID0gY29udGFpbmVyX29mKG1tc3YsIHN0cnVjdCBpZ2NfZnBlX3QsIG1tc3YpOworCXN0
cnVjdCBpZ2NfYWRhcHRlciAqYWRhcHRlcjsKKwlpbnQgZXJyOworCisJYWRhcHRlciA9IGNvbnRh
aW5lcl9vZihmcGUsIHN0cnVjdCBpZ2NfYWRhcHRlciwgZnBlKTsKKworCWlmICh0eXBlID09IEVU
SFRPT0xfTVBBQ0tFVF9WRVJJRlkpIHsKKwkJZXJyID0gaWdjX2ZwZV94bWl0X3NtZF9mcmFtZShh
ZGFwdGVyLCBTTURfVik7CisJCWlmIChlcnIgJiYgbmV0X3JhdGVsaW1pdCgpKQorCQkJbmV0ZGV2
X2VycihhZGFwdGVyLT5uZXRkZXYsICJFcnJvciBzZW5kaW5nIFNNRC1WXG4iKTsKKwl9IGVsc2Ug
aWYgKHR5cGUgPT0gRVRIVE9PTF9NUEFDS0VUX1JFU1BPTlNFKSB7CisJCWVyciA9IGlnY19mcGVf
eG1pdF9zbWRfZnJhbWUoYWRhcHRlciwgU01EX1IpOworCQlpZiAoZXJyICYmIG5ldF9yYXRlbGlt
aXQoKSkKKwkJCW5ldGRldl9lcnIoYWRhcHRlci0+bmV0ZGV2LCAiRXJyb3Igc2VuZGluZyBTTUQt
UiBmcmFtZVxuIik7CisJfQorfQorCitzdGF0aWMgY29uc3Qgc3RydWN0IGV0aHRvb2xfbW1zdl9v
cHMgaWdjX21tc3Zfb3BzID0geworCS5zZW5kX21wYWNrZXQgPSBpZ2NfZnBlX3NlbmRfbXBhY2tl
dCwKK307CisKK3ZvaWQgaWdjX2ZwZV9pbml0KHN0cnVjdCBpZ2NfYWRhcHRlciAqYWRhcHRlcikK
K3sKKwlldGh0b29sX21tc3ZfaW5pdCgmYWRhcHRlci0+ZnBlLm1tc3YsIGFkYXB0ZXItPm5ldGRl
diwgJmlnY19tbXN2X29wcyk7Cit9CisKIHN0YXRpYyBib29sIGlzX2FueV9sYXVuY2h0aW1lKHN0
cnVjdCBpZ2NfYWRhcHRlciAqYWRhcHRlcikKIHsKIAlpbnQgaTsKQEAgLTQ5LDYgKzE3NSw5IEBA
IHN0YXRpYyB1bnNpZ25lZCBpbnQgaWdjX3Rzbl9uZXdfZmxhZ3Moc3RydWN0IGlnY19hZGFwdGVy
ICphZGFwdGVyKQogCWlmIChhZGFwdGVyLT5zdHJpY3RfcHJpb3JpdHlfZW5hYmxlKQogCQluZXdf
ZmxhZ3MgfD0gSUdDX0ZMQUdfVFNOX0xFR0FDWV9FTkFCTEVEOwogCisJaWYgKGFkYXB0ZXItPmZw
ZS5tbXN2LnBtYWNfZW5hYmxlZCkKKwkJbmV3X2ZsYWdzIHw9IElHQ19GTEFHX1RTTl9QUkVFTVBU
X0VOQUJMRUQ7CisKIAlyZXR1cm4gbmV3X2ZsYWdzOwogfQogCkBAIC0xNjcsNyArMjk2LDggQEAg
c3RhdGljIGludCBpZ2NfdHNuX2Rpc2FibGVfb2ZmbG9hZChzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFk
YXB0ZXIpCiAKIAl0cWF2Y3RybCA9IHJkMzIoSUdDX1RRQVZDVFJMKTsKIAl0cWF2Y3RybCAmPSB+
KElHQ19UUUFWQ1RSTF9UUkFOU01JVF9NT0RFX1RTTiB8Ci0JCSAgICAgIElHQ19UUUFWQ1RSTF9F
TkhBTkNFRF9RQVYgfCBJR0NfVFFBVkNUUkxfRlVUU0NERElTKTsKKwkJICAgICAgSUdDX1RRQVZD
VFJMX0VOSEFOQ0VEX1FBViB8IElHQ19UUUFWQ1RSTF9GVVRTQ0RESVMgfAorCQkgICAgICBJR0Nf
VFFBVkNUUkxfUFJFRU1QVF9FTkEpOwogCiAJd3IzMihJR0NfVFFBVkNUUkwsIHRxYXZjdHJsKTsK
IApAQCAtMzg2LDEwICs1MTYsMTQgQEAgc3RhdGljIGludCBpZ2NfdHNuX2VuYWJsZV9vZmZsb2Fk
KHN0cnVjdCBpZ2NfYWRhcHRlciAqYWRhcHRlcikKIAkJd3IzMihJR0NfVFhRQ1RMKGkpLCB0eHFj
dGwpOwogCX0KIAotCXRxYXZjdHJsID0gcmQzMihJR0NfVFFBVkNUUkwpICYgfklHQ19UUUFWQ1RS
TF9GVVRTQ0RESVM7CisJdHFhdmN0cmwgPSByZDMyKElHQ19UUUFWQ1RSTCkgJiB+KElHQ19UUUFW
Q1RSTF9GVVRTQ0RESVMgfAorCQkgICBJR0NfVFFBVkNUUkxfUFJFRU1QVF9FTkEpOwogCiAJdHFh
dmN0cmwgfD0gSUdDX1RRQVZDVFJMX1RSQU5TTUlUX01PREVfVFNOIHwgSUdDX1RRQVZDVFJMX0VO
SEFOQ0VEX1FBVjsKIAorCWlmIChhZGFwdGVyLT5mcGUubW1zdi5wbWFjX2VuYWJsZWQpCisJCXRx
YXZjdHJsIHw9IElHQ19UUUFWQ1RSTF9QUkVFTVBUX0VOQTsKKwogCWFkYXB0ZXItPnFidl9jb3Vu
dCsrOwogCiAJY3ljbGUgPSBhZGFwdGVyLT5jeWNsZV90aW1lOwpAQCAtNDUwLDYgKzU4NCwxNCBA
QCBpbnQgaWdjX3Rzbl9yZXNldChzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIpCiAJdW5zaWdu
ZWQgaW50IG5ld19mbGFnczsKIAlpbnQgZXJyID0gMDsKIAorCWlmIChhZGFwdGVyLT5mcGUubW1z
di5wbWFjX2VuYWJsZWQpIHsKKwkJZXJyID0gaWdjX2VuYWJsZV9lbXB0eV9hZGRyX3JlY3YoYWRh
cHRlcik7CisJCWlmIChlcnIgJiYgbmV0X3JhdGVsaW1pdCgpKQorCQkJbmV0ZGV2X2VycihhZGFw
dGVyLT5uZXRkZXYsICJFcnJvciBhZGRpbmcgZW1wdHkgYWRkcmVzcyB0byBNQUMgZmlsdGVyXG4i
KTsKKwl9IGVsc2UgeworCQlpZ2NfZGlzYWJsZV9lbXB0eV9hZGRyX3JlY3YoYWRhcHRlcik7CisJ
fQorCiAJbmV3X2ZsYWdzID0gaWdjX3Rzbl9uZXdfZmxhZ3MoYWRhcHRlcik7CiAKIAlpZiAoIShu
ZXdfZmxhZ3MgJiBJR0NfRkxBR19UU05fQU5ZX0VOQUJMRUQpKQpkaWZmIC0tZ2l0IGEvZHJpdmVy
cy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY190c24uaCBiL2RyaXZlcnMvbmV0L2V0aGVybmV0
L2ludGVsL2lnYy9pZ2NfdHNuLmgKaW5kZXggOThlYzg0NWE4NmJmLi5iYjMwZDE1Y2VjNzYgMTAw
NjQ0Ci0tLSBhL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfdHNuLmgKKysrIGIv
ZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY190c24uaApAQCAtNCw5ICs0LDU5IEBA
CiAjaWZuZGVmIF9JR0NfVFNOX0hfCiAjZGVmaW5lIF9JR0NfVFNOX0hfCiAKKyNkZWZpbmUgU01E
X0ZSQU1FX1NJWkUJCQk2MAorCitlbnVtIGlnY190eGRfcG9wdHNfdHlwZSB7CisJU01EX1YgPSAw
eDAxLAorCVNNRF9SID0gMHgwMiwKK307CisKK0RFQ0xBUkVfU1RBVElDX0tFWV9GQUxTRShpZ2Nf
ZnBlX2VuYWJsZWQpOworCit2b2lkIGlnY19mcGVfaW5pdChzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFk
YXB0ZXIpOwogaW50IGlnY190c25fb2ZmbG9hZF9hcHBseShzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFk
YXB0ZXIpOwogaW50IGlnY190c25fcmVzZXQoc3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVyKTsK
IHZvaWQgaWdjX3Rzbl9hZGp1c3RfdHh0aW1lX29mZnNldChzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFk
YXB0ZXIpOwogYm9vbCBpZ2NfdHNuX2lzX3RhcHJpb19hY3RpdmF0ZWRfYnlfdXNlcihzdHJ1Y3Qg
aWdjX2FkYXB0ZXIgKmFkYXB0ZXIpOwogCitzdGF0aWMgaW5saW5lIGJvb2wgaWdjX2ZwZV9pc19w
bWFjX2VuYWJsZWQoc3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVyKQoreworCXJldHVybiBzdGF0
aWNfYnJhbmNoX3VubGlrZWx5KCZpZ2NfZnBlX2VuYWJsZWQpICYmCisJICAgICAgIGFkYXB0ZXIt
PmZwZS5tbXN2LnBtYWNfZW5hYmxlZDsKK30KKworc3RhdGljIGlubGluZSBib29sIGlnY19mcGVf
aGFuZGxlX21wYWNrZXQoc3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVyLAorCQkJCQkgIHVuaW9u
IGlnY19hZHZfcnhfZGVzYyAqcnhfZGVzYywKKwkJCQkJICB1bnNpZ25lZCBpbnQgc2l6ZSwgdm9p
ZCAqcGt0YnVmKQoreworCXUzMiBzdGF0dXNfZXJyb3IgPSBsZTMyX3RvX2NwdShyeF9kZXNjLT53
Yi51cHBlci5zdGF0dXNfZXJyb3IpOworCWludCBzbWQ7CisKKwlzbWQgPSBGSUVMRF9HRVQoSUdD
X1JYREFEVl9TVEFUX1NNRF9UWVBFX01BU0ssIHN0YXR1c19lcnJvcik7CisJaWYgKHNtZCAhPSBJ
R0NfUlhEX1NUQVRfU01EX1RZUEVfViAmJiBzbWQgIT0gSUdDX1JYRF9TVEFUX1NNRF9UWVBFX1Ip
CisJCXJldHVybiBmYWxzZTsKKworCWlmIChzaXplID09IFNNRF9GUkFNRV9TSVpFICYmIG1lbV9p
c196ZXJvKHBrdGJ1ZiwgU01EX0ZSQU1FX1NJWkUpKSB7CisJCXN0cnVjdCBldGh0b29sX21tc3Yg
Km1tc3YgPSAmYWRhcHRlci0+ZnBlLm1tc3Y7CisJCWVudW0gZXRodG9vbF9tbXN2X2V2ZW50IGV2
ZW50OworCisJCWlmIChzbWQgPT0gSUdDX1JYRF9TVEFUX1NNRF9UWVBFX1YpCisJCQlldmVudCA9
IEVUSFRPT0xfTU1TVl9MUF9TRU5UX1ZFUklGWV9NUEFDS0VUOworCQllbHNlCisJCQlldmVudCA9
IEVUSFRPT0xfTU1TVl9MUF9TRU5UX1JFU1BPTlNFX01QQUNLRVQ7CisKKwkJZXRodG9vbF9tbXN2
X2V2ZW50X2hhbmRsZShtbXN2LCBldmVudCk7CisJfQorCisJcmV0dXJuIHRydWU7Cit9CisKK3N0
YXRpYyBpbmxpbmUgYm9vbCBpZ2NfZnBlX3RyYW5zbWl0dGVkX3NtZF92KHVuaW9uIGlnY19hZHZf
dHhfZGVzYyAqdHhfZGVzYykKK3sKKwl1MzIgb2xpbmZvX3N0YXR1cyA9IGxlMzJfdG9fY3B1KHR4
X2Rlc2MtPnJlYWQub2xpbmZvX3N0YXR1cyk7CisJdTggc21kID0gRklFTERfR0VUKElHQ19UWERf
UE9QVFNfU01EX01BU0ssIG9saW5mb19zdGF0dXMpOworCisJcmV0dXJuIHNtZCA9PSBTTURfVjsK
K30KKwogI2VuZGlmIC8qIF9JR0NfQkFTRV9IICovCi0tIAoyLjM0LjEKCl9fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCkxpbnV4LXN0bTMyIG1haWxpbmcgbGlz
dApMaW51eC1zdG0zMkBzdC1tZC1tYWlsbWFuLnN0b3JtcmVwbHkuY29tCmh0dHBzOi8vc3QtbWQt
bWFpbG1hbi5zdG9ybXJlcGx5LmNvbS9tYWlsbWFuL2xpc3RpbmZvL2xpbnV4LXN0bTMyCg==
