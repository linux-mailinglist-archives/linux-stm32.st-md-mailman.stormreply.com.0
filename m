Return-Path: <linux-stm32-bounces@st-md-mailman.stormreply.com>
X-Original-To: lists+linux-stm32@lfdr.de
Delivered-To: lists+linux-stm32@lfdr.de
Received: from stm-ict-prod-mailman-01.stormreply.prv (st-md-mailman.stormreply.com [52.209.6.89])
	by mail.lfdr.de (Postfix) with ESMTPS id 6962FAC0991
	for <lists+linux-stm32@lfdr.de>; Thu, 22 May 2025 12:15:11 +0200 (CEST)
Received: from ip-172-31-3-47.eu-west-1.compute.internal (localhost [127.0.0.1])
	by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTP id 2D6E6C7A827;
	Thu, 22 May 2025 10:15:11 +0000 (UTC)
Received: from relay3-d.mail.gandi.net (relay3-d.mail.gandi.net
 [217.70.183.195])
 (using TLSv1.2 with cipher ADH-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTPS id 98BE2C7A82A
 for <linux-stm32@st-md-mailman.stormreply.com>;
 Thu, 22 May 2025 10:15:09 +0000 (UTC)
Received: by mail.gandi.net (Postfix) with ESMTPSA id 9DAEE1FCEB;
 Thu, 22 May 2025 10:15:07 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=bootlin.com; s=gm1;
 t=1747908909;
 h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
 to:to:cc:cc:mime-version:mime-version:content-type:content-type:
 content-transfer-encoding:content-transfer-encoding:
 in-reply-to:in-reply-to:references:references;
 bh=Gy+LoFJKmV0d6SrOs8zxo+fV9LD3eE8KkcTjhZZ7P0k=;
 b=ZE0LeRAsyZgXsH5MHzNhi58G5cdawOD2fd7bPM0omDG6HET1f1lVGFbiOC6O8eK66NPDnD
 1jiKUHWvs3DzFgJj3qcDHwKi/aj7f3cIG+Z97Ca2dtpnoFj88c3jnjjDb+lMat5CXrnyDq
 apdCGEj5qWcWGKataYZUC75k7DeRyAdYoat3m6i0Qfia5q6ot+MLD17HF+IvS0U45UbyE/
 S+WSwzgu7XJs5adfD0n42E36bKc/uoOOQ7SaDjFs7IiXfWQfrbI8mg2dSqJxGcZA7s7lf8
 tzZcprz+w/xnas2m/RHuyLzbI8DFsASGrVmCtLn71O7jnlXz082xR/NOZqUoVA==
From: =?utf-8?q?Alexis_Lothor=C3=A9?= <alexis.lothore@bootlin.com>
Date: Thu, 22 May 2025 12:14:40 +0200
MIME-Version: 1.0
Message-Id: <20250522-many_args_arm64-v2-1-d6afdb9cf819@bootlin.com>
References: <20250522-many_args_arm64-v2-0-d6afdb9cf819@bootlin.com>
In-Reply-To: <20250522-many_args_arm64-v2-0-d6afdb9cf819@bootlin.com>
To: Alexei Starovoitov <ast@kernel.org>, 
 Daniel Borkmann <daniel@iogearbox.net>, 
 John Fastabend <john.fastabend@gmail.com>, 
 Andrii Nakryiko <andrii@kernel.org>, 
 Martin KaFai Lau <martin.lau@linux.dev>, 
 Eduard Zingerman <eddyz87@gmail.com>, Song Liu <song@kernel.org>, 
 Yonghong Song <yonghong.song@linux.dev>, KP Singh <kpsingh@kernel.org>, 
 Stanislav Fomichev <sdf@fomichev.me>, Hao Luo <haoluo@google.com>, 
 Jiri Olsa <jolsa@kernel.org>, Puranjay Mohan <puranjay@kernel.org>, 
 Xu Kuohai <xukuohai@huaweicloud.com>, 
 Catalin Marinas <catalin.marinas@arm.com>, Will Deacon <will@kernel.org>, 
 Mykola Lysenko <mykolal@fb.com>, Shuah Khan <shuah@kernel.org>, 
 Maxime Coquelin <mcoquelin.stm32@gmail.com>, 
 Alexandre Torgue <alexandre.torgue@foss.st.com>, 
 Florent Revest <revest@chromium.org>
X-Mailer: b4 0.14.2
X-GND-State: clean
X-GND-Score: -100
X-GND-Cause: gggruggvucftvghtrhhoucdtuddrgeeffedrtddtgdehieelucdltddurdegfedvrddttddmucetufdoteggodetrfdotffvucfrrhhofhhilhgvmecuifetpfffkfdpucggtfgfnhhsuhgsshgtrhhisggvnecuuegrihhlohhuthemuceftddunecusecvtfgvtghiphhivghnthhsucdlqddutddtmdenucfjughrpefhfffugggtgffkfhgjvfevofesthekredtredtjeenucfhrhhomheptehlvgigihhsucfnohhthhhorhoruceorghlvgigihhsrdhlohhthhhorhgvsegsohhothhlihhnrdgtohhmqeenucggtffrrghtthgvrhhnpeegveeghfetffeuhfehkeekleffffdvuefggfevjefftddvffduheettdeiveetteenucfkphepledtrdekledrudeifedruddvjeenucevlhhushhtvghrufhiiigvpedtnecurfgrrhgrmhepihhnvghtpeeltddrkeelrdduieefrdduvdejpdhhvghloheplgduledvrdduieekrddtrddvudgnpdhmrghilhhfrhhomheprghlvgigihhsrdhlohhthhhorhgvsegsohhothhlihhnrdgtohhmpdhnsggprhgtphhtthhopeefuddprhgtphhtthhopehlihhnuhigqdhkshgvlhhfthgvshhtsehvghgvrhdrkhgvrhhnvghlrdhorhhgpdhrtghpthhtohepsggrshhtihgvnhdrtghurhhuthgthhgvthessghoohhtlhhinhdrtghomhdprhgtphhtthhopehshhhurghhsehkvghrnhgvlhdrohhrghdprhgtphhtthhopeiguhhkuhhohhgriheshhhurgifvghitghlohhuugdrtghom
 hdprhgtphhtthhopehjohhlshgrsehkvghrnhgvlhdrohhrghdprhgtphhtthhopehkphhsihhnghhhsehkvghrnhgvlhdrohhrghdprhgtphhtthhopeiguhhkuhhohhgriheshhhurgifvghirdgtohhmpdhrtghpthhtohepvggsphhfsehlihhnuhigfhhouhhnuggrthhiohhnrdhorhhg
X-GND-Sasl: alexis.lothore@bootlin.com
Cc: linux-kselftest@vger.kernel.org,
 Bastien Curutchet <bastien.curutchet@bootlin.com>, ebpf@linuxfoundation.org,
 linux-kernel@vger.kernel.org,
 =?utf-8?q?Alexis_Lothor=C3=A9_=28eBPF_Foundation=29?=
 <alexis.lothore@bootlin.com>, Thomas Petazzoni <thomas.petazzoni@bootlin.com>,
 bpf@vger.kernel.org, Xu Kuohai <xukuohai@huawei.com>,
 linux-stm32@st-md-mailman.stormreply.com, linux-arm-kernel@lists.infradead.org
Subject: [Linux-stm32] [PATCH bpf-next v2 1/2] bpf,
 arm64: Support up to 12 function arguments
X-BeenThere: linux-stm32@st-md-mailman.stormreply.com
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: <linux-stm32.st-md-mailman.stormreply.com>
List-Unsubscribe: <https://st-md-mailman.stormreply.com/mailman/options/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=unsubscribe>
List-Archive: <http://st-md-mailman.stormreply.com/pipermail/linux-stm32/>
List-Post: <mailto:linux-stm32@st-md-mailman.stormreply.com>
List-Help: <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=help>
List-Subscribe: <https://st-md-mailman.stormreply.com/mailman/listinfo/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: linux-stm32-bounces@st-md-mailman.stormreply.com
Sender: "Linux-stm32" <linux-stm32-bounces@st-md-mailman.stormreply.com>

RnJvbTogWHUgS3VvaGFpIDx4dWt1b2hhaUBodWF3ZWkuY29tPgoKQ3VycmVudGx5IEFSTTY0IGJw
ZiB0cmFtcG9saW5lIHN1cHBvcnRzIHVwIHRvIDggZnVuY3Rpb24gYXJndW1lbnRzLgpBY2NvcmRp
bmcgdG8gdGhlIHN0YXRpc3RpY3MgZnJvbSBjb21taXQKNDczZTMxNTBlMzBhICgiYnBmLCB4ODY6
IGFsbG93IGZ1bmN0aW9uIGFyZ3VtZW50cyB1cCB0byAxMiBmb3IgVFJBQ0lORyIpLAp0aGVyZSBh
cmUgYWJvdXQgMjAwIGZ1bmN0aW9ucyBhY2NlcHQgOSB0byAxMiBhcmd1bWVudHMsIHNvIGFkZGlu
ZyBzdXBwb3J0CmZvciB1cCB0byAxMiBmdW5jdGlvbiBhcmd1bWVudHMuCgpEdWUgdG8gYnBmIG9u
bHkgc3VwcG9ydGluZyBmdW5jdGlvbiBhcmd1bWVudHMgdXAgdG8gMTYgYnl0ZXMsIGFjY29yZGlu
ZyB0bwpBQVBDUzY0LCBzdGFydGluZyBmcm9tIHRoZSBmaXJzdCBhcmd1bWVudCwgZWFjaCBhcmd1
bWVudCBpcyBmaXJzdAphdHRlbXB0ZWQgdG8gYmUgbG9hZGVkIHRvIDEgb3IgMiBzbWFsbGVzdCBy
ZWdpc3RlcnMgZnJvbSB4MC14NywgaWYgdGhlcmUKYXJlIG5vIGVub3VnaCByZWdpc3RlcnMgdG8g
aG9sZCB0aGUgZW50aXJlIGFyZ3VtZW50LCB0aGVuIGFsbCByZW1haW5pbmcKYXJndW1lbnRzIHN0
YXJ0aW5nIGZyb20gdGhpcyBvbmUgYXJlIHB1c2hlZCB0byB0aGUgc3RhY2sgZm9yIHBhc3Npbmcu
ClRoZXJlIGFyZSBzb21lIG5vbi10cml2aWFsIGNhc2VzIGZvciB3aGljaCBpdCBpcyBub3QgcG9z
c2libGUgdG8KY29ycmVjdGx5IHJlYWQgYXJndW1lbnRzIGZyb20vd3JpdGUgYXJndW1lbnRzIHRv
IHRoZSBzdGFjazogZm9yIGV4YW1wbGUKc3RydWN0IHZhcmlhYmxlcyBtYXkgaGF2ZSBjdXN0b20g
cGFja2luZy9hbGlnbm1lbnQgYXR0cmlidXRlcyB0aGF0IGFyZQppbnZpc2libGUgaW4gQlRGIGlu
Zm8uIFN1Y2ggY2FzZXMgYXJlIGRlbmllZCBmb3Igbm93IHRvIG1ha2Ugc3VyZSBub3QgdG8KcmVh
ZCBpbmNvcnJlY3QgdmFsdWVzLgoKU2lnbmVkLW9mZi1ieTogWHUgS3VvaGFpIDx4dWt1b2hhaUBo
dWF3ZWkuY29tPgpDby1kZXZlbG9wZWQtYnk6IEFsZXhpcyBMb3Rob3LDqSAoZUJQRiBGb3VuZGF0
aW9uKSA8YWxleGlzLmxvdGhvcmVAYm9vdGxpbi5jb20+ClNpZ25lZC1vZmYtYnk6IEFsZXhpcyBM
b3Rob3LDqSAoZUJQRiBGb3VuZGF0aW9uKSA8YWxleGlzLmxvdGhvcmVAYm9vdGxpbi5jb20+Ci0t
LQpDaGFuZ2VzIGluIHYyOgotIHJlZnVzZSBhdHRhY2htZW50IHRvIGZ1bmN0aW9ucyBwYXNzaW5n
IHN0cnVjdHMgb24gc3RhY2sKLSB1c2Ugc2ltcGxlciBhbGlnbm1lbnQgcnVsZXMgZm9yIGFyZ3Mg
cGFzc2VkIG9uIHN0YWNrLCBhc3N1bWluZyB0aGF0CiAgZXhvdGljIHR5cGVzIGFyZSBkZW5pZWQg
ZWl0aGVyIGJ5IHRoZSB2ZXJpZmllciBhbmQvb3IgdGhlIHRyYW1wb2xpbmUKICBnZW5lcmF0aW9u
IGNvZGUKLS0tCiBhcmNoL2FybTY0L25ldC9icGZfaml0X2NvbXAuYyB8IDIzNCArKysrKysrKysr
KysrKysrKysrKysrKysrKysrKysrKy0tLS0tLS0tLS0KIDEgZmlsZSBjaGFuZ2VkLCAxODAgaW5z
ZXJ0aW9ucygrKSwgNTQgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEvYXJjaC9hcm02NC9uZXQv
YnBmX2ppdF9jb21wLmMgYi9hcmNoL2FybTY0L25ldC9icGZfaml0X2NvbXAuYwppbmRleCA3MGQ3
Yzg5ZDNhYzkwNzc5OGU4NmUwMDUxZTdiNDcyYzI1MmMxNDEyLi44YzczNWJjNTIyZTQzOWE0YjJl
MzExMWZjMjhiOTU3NWE2NGNkYjNhIDEwMDY0NAotLS0gYS9hcmNoL2FybTY0L25ldC9icGZfaml0
X2NvbXAuYworKysgYi9hcmNoL2FybTY0L25ldC9icGZfaml0X2NvbXAuYwpAQCAtMjA2NCw3ICsy
MDY0LDcgQEAgYm9vbCBicGZfaml0X3N1cHBvcnRzX3N1YnByb2dfdGFpbGNhbGxzKHZvaWQpCiB9
CiAKIHN0YXRpYyB2b2lkIGludm9rZV9icGZfcHJvZyhzdHJ1Y3Qgaml0X2N0eCAqY3R4LCBzdHJ1
Y3QgYnBmX3RyYW1wX2xpbmsgKmwsCi0JCQkgICAgaW50IGFyZ3Nfb2ZmLCBpbnQgcmV0dmFsX29m
ZiwgaW50IHJ1bl9jdHhfb2ZmLAorCQkJICAgIGludCBiYXJnc19vZmYsIGludCByZXR2YWxfb2Zm
LCBpbnQgcnVuX2N0eF9vZmYsCiAJCQkgICAgYm9vbCBzYXZlX3JldCkKIHsKIAlfX2xlMzIgKmJy
YW5jaDsKQEAgLTIxMDYsNyArMjEwNiw3IEBAIHN0YXRpYyB2b2lkIGludm9rZV9icGZfcHJvZyhz
dHJ1Y3Qgaml0X2N0eCAqY3R4LCBzdHJ1Y3QgYnBmX3RyYW1wX2xpbmsgKmwsCiAJYnJhbmNoID0g
Y3R4LT5pbWFnZSArIGN0eC0+aWR4OwogCWVtaXQoQTY0X05PUCwgY3R4KTsKIAotCWVtaXQoQTY0
X0FERF9JKDEsIEE2NF9SKDApLCBBNjRfU1AsIGFyZ3Nfb2ZmKSwgY3R4KTsKKwllbWl0KEE2NF9B
RERfSSgxLCBBNjRfUigwKSwgQTY0X1NQLCBiYXJnc19vZmYpLCBjdHgpOwogCWlmICghcC0+aml0
ZWQpCiAJCWVtaXRfYWRkcl9tb3ZfaTY0KEE2NF9SKDEpLCAoY29uc3QgdTY0KXAtPmluc25zaSwg
Y3R4KTsKIApAQCAtMjEzMSw3ICsyMTMxLDcgQEAgc3RhdGljIHZvaWQgaW52b2tlX2JwZl9wcm9n
KHN0cnVjdCBqaXRfY3R4ICpjdHgsIHN0cnVjdCBicGZfdHJhbXBfbGluayAqbCwKIH0KIAogc3Rh
dGljIHZvaWQgaW52b2tlX2JwZl9tb2RfcmV0KHN0cnVjdCBqaXRfY3R4ICpjdHgsIHN0cnVjdCBi
cGZfdHJhbXBfbGlua3MgKnRsLAotCQkJICAgICAgIGludCBhcmdzX29mZiwgaW50IHJldHZhbF9v
ZmYsIGludCBydW5fY3R4X29mZiwKKwkJCSAgICAgICBpbnQgYmFyZ3Nfb2ZmLCBpbnQgcmV0dmFs
X29mZiwgaW50IHJ1bl9jdHhfb2ZmLAogCQkJICAgICAgIF9fbGUzMiAqKmJyYW5jaGVzKQogewog
CWludCBpOwpAQCAtMjE0MSw3ICsyMTQxLDcgQEAgc3RhdGljIHZvaWQgaW52b2tlX2JwZl9tb2Rf
cmV0KHN0cnVjdCBqaXRfY3R4ICpjdHgsIHN0cnVjdCBicGZfdHJhbXBfbGlua3MgKnRsLAogCSAq
LwogCWVtaXQoQTY0X1NUUjY0SShBNjRfWlIsIEE2NF9TUCwgcmV0dmFsX29mZiksIGN0eCk7CiAJ
Zm9yIChpID0gMDsgaSA8IHRsLT5ucl9saW5rczsgaSsrKSB7Ci0JCWludm9rZV9icGZfcHJvZyhj
dHgsIHRsLT5saW5rc1tpXSwgYXJnc19vZmYsIHJldHZhbF9vZmYsCisJCWludm9rZV9icGZfcHJv
ZyhjdHgsIHRsLT5saW5rc1tpXSwgYmFyZ3Nfb2ZmLCByZXR2YWxfb2ZmLAogCQkJCXJ1bl9jdHhf
b2ZmLCB0cnVlKTsKIAkJLyogaWYgKCoodTY0ICopKHNwICsgcmV0dmFsX29mZikgIT0gIDApCiAJ
CSAqCWdvdG8gZG9fZmV4aXQ7CkBAIC0yMTU1LDIzICsyMTU1LDEzNCBAQCBzdGF0aWMgdm9pZCBp
bnZva2VfYnBmX21vZF9yZXQoc3RydWN0IGppdF9jdHggKmN0eCwgc3RydWN0IGJwZl90cmFtcF9s
aW5rcyAqdGwsCiAJfQogfQogCi1zdGF0aWMgdm9pZCBzYXZlX2FyZ3Moc3RydWN0IGppdF9jdHgg
KmN0eCwgaW50IGFyZ3Nfb2ZmLCBpbnQgbnJlZ3MpCitzdHJ1Y3QgYXJnX2F1eCB7CisJLyogaG93
IG1hbnkgYXJncyBhcmUgcGFzc2VkIHRocm91Z2ggcmVnaXN0ZXJzLCB0aGUgcmVzdCBvZiB0aGUg
YXJncyBhcmUKKwkgKiBwYXNzZWQgdGhyb3VnaCBzdGFjaworCSAqLworCWludCBhcmdzX2luX3Jl
Z3M7CisJLyogaG93IG1hbnkgcmVnaXN0ZXJzIGFyZSB1c2VkIHRvIHBhc3MgYXJndW1lbnRzICov
CisJaW50IHJlZ3NfZm9yX2FyZ3M7CisJLyogaG93IG11Y2ggc3RhY2sgaXMgdXNlZCBmb3IgYWRk
aXRpb25hbCBhcmdzIHBhc3NlZCB0byBicGYgcHJvZ3JhbQorCSAqIHRoYXQgZGlkIG5vdCBmaXQg
aW4gb3JpZ2luYWwgZnVuY3Rpb24gcmVnaXN0ZXJzCisJICoqLworCWludCBic3RhY2tfZm9yX2Fy
Z3M7CisJLyogaG9tZSBtdWNoIHN0YWNrIGlzIHVzZWQgZm9yIGFkZGl0aW9uYWwgYXJncyBwYXNz
ZWQgdG8gdGhlCisJICogb3JpZ2luYWwgZnVuY3Rpb24gd2hlbiBjYWxsZWQgZnJvbSB0cmFtcG9s
aW5lICh0aGlzIG9uZSBuZWVkcworCSAqIGFyZ3VtZW50cyB0byBiZSBwcm9wZXJseSBhbGlnbmVk
KQorCSAqLworCWludCBvc3RhY2tfZm9yX2FyZ3M7Cit9OworCitzdGF0aWMgaW50IGNhbGNfYXJn
X2F1eChjb25zdCBzdHJ1Y3QgYnRmX2Z1bmNfbW9kZWwgKm0sCisJCQkgc3RydWN0IGFyZ19hdXgg
KmEpCiB7Ci0JaW50IGk7CisJaW50IHN0YWNrX3Nsb3RzLCBucmVncywgc2xvdHMsIGk7CisKKwkv
KiB2ZXJpZmllciBlbnN1cmVzIG0tPm5yX2FyZ3MgPD0gTUFYX0JQRl9GVU5DX0FSR1MgKi8KKwlm
b3IgKGkgPSAwLCBucmVncyA9IDA7IGkgPCBtLT5ucl9hcmdzOyBpKyspIHsKKwkJc2xvdHMgPSAo
bS0+YXJnX3NpemVbaV0gKyA3KSAvIDg7CisJCWlmIChucmVncyArIHNsb3RzIDw9IDgpIC8qIHBh
c3NlZCB0aHJvdWdoIHJlZ2lzdGVyID8gKi8KKwkJCW5yZWdzICs9IHNsb3RzOworCQllbHNlCisJ
CQlicmVhazsKKwl9CisKKwlhLT5hcmdzX2luX3JlZ3MgPSBpOworCWEtPnJlZ3NfZm9yX2FyZ3Mg
PSBucmVnczsKKwlhLT5vc3RhY2tfZm9yX2FyZ3MgPSAwOworCisJLyogdGhlIHJlc3QgYXJndW1l
bnRzIGFyZSBwYXNzZWQgdGhyb3VnaCBzdGFjayAqLworCWZvciAoYS0+b3N0YWNrX2Zvcl9hcmdz
ID0gMCwgYS0+YnN0YWNrX2Zvcl9hcmdzID0gMDsKKwkgICAgIGkgPCBtLT5ucl9hcmdzOyBpKysp
IHsKKwkJLyogV2UgY2FuIG5vdCBrbm93IGZvciBzdXJlIGFib3V0IGV4YWN0IGFsaWdubWVudCBu
ZWVkcyBmb3IKKwkJICogc3RydWN0IHBhc3NlZCBvbiBzdGFjaywgc28gZGVueSB0aG9zZQorCQkg
Ki8KKwkJaWYgKG0tPmFyZ19mbGFnc1tpXSAmIEJURl9GTU9ERUxfU1RSVUNUX0FSRykKKwkJCXJl
dHVybiAtRU9QTk9UU1VQUDsKKwkJc3RhY2tfc2xvdHMgPSAobS0+YXJnX3NpemVbaV0gKyA3KSAv
IDg7CisJCS8qIEFBUENTIDY0IEMuMTQ6IGFyZ3VtZW50cyBwYXNzZWQgb24gc3RhY2sgbXVzdCBi
ZSBhbGlnbmVkIHRvCisJCSAqIG1heCg4LCBhcmdfbmF0dXJhbF9hbGlnbm1lbnQpCisJCSAqLwor
CQlhLT5ic3RhY2tfZm9yX2FyZ3MgKz0gc3RhY2tfc2xvdHMgKiA4OworCQlhLT5vc3RhY2tfZm9y
X2FyZ3MgPSByb3VuZF91cChhLT5vc3RhY2tfZm9yX2FyZ3MgKyBzdGFja19zbG90cyAqIDgsIDgp
OworCX0KIAotCWZvciAoaSA9IDA7IGkgPCBucmVnczsgaSsrKSB7Ci0JCWVtaXQoQTY0X1NUUjY0
SShpLCBBNjRfU1AsIGFyZ3Nfb2ZmKSwgY3R4KTsKLQkJYXJnc19vZmYgKz0gODsKKwlyZXR1cm4g
MDsKK30KKworc3RhdGljIHZvaWQgY2xlYXJfZ2FyYmFnZShzdHJ1Y3Qgaml0X2N0eCAqY3R4LCBp
bnQgcmVnLCBpbnQgZWZmZWN0aXZlX2J5dGVzKQoreworCWlmIChlZmZlY3RpdmVfYnl0ZXMpIHsK
KwkJaW50IGdhcmJhZ2VfYml0cyA9IDY0IC0gOCAqIGVmZmVjdGl2ZV9ieXRlczsKKyNpZmRlZiBD
T05GSUdfQ1BVX0JJR19FTkRJQU4KKwkJLyogZ2FyYmFnZSBiaXRzIGFyZSBhdCB0aGUgcmlnaHQg
ZW5kICovCisJCWVtaXQoQTY0X0xTUigxLCByZWcsIHJlZywgZ2FyYmFnZV9iaXRzKSwgY3R4KTsK
KwkJZW1pdChBNjRfTFNMKDEsIHJlZywgcmVnLCBnYXJiYWdlX2JpdHMpLCBjdHgpOworI2Vsc2UK
KwkJLyogZ2FyYmFnZSBiaXRzIGFyZSBhdCB0aGUgbGVmdCBlbmQgKi8KKwkJZW1pdChBNjRfTFNM
KDEsIHJlZywgcmVnLCBnYXJiYWdlX2JpdHMpLCBjdHgpOworCQllbWl0KEE2NF9MU1IoMSwgcmVn
LCByZWcsIGdhcmJhZ2VfYml0cyksIGN0eCk7CisjZW5kaWYKIAl9CiB9CiAKLXN0YXRpYyB2b2lk
IHJlc3RvcmVfYXJncyhzdHJ1Y3Qgaml0X2N0eCAqY3R4LCBpbnQgYXJnc19vZmYsIGludCBucmVn
cykKK3N0YXRpYyB2b2lkIHNhdmVfYXJncyhzdHJ1Y3Qgaml0X2N0eCAqY3R4LCBpbnQgYmFyZ3Nf
b2ZmLCBpbnQgb2FyZ3Nfb2ZmLAorCQkgICAgICBjb25zdCBzdHJ1Y3QgYnRmX2Z1bmNfbW9kZWwg
Km0sCisJCSAgICAgIGNvbnN0IHN0cnVjdCBhcmdfYXV4ICphLAorCQkgICAgICBib29sIGZvcl9j
YWxsX29yaWdpbikKIHsKIAlpbnQgaTsKKwlpbnQgcmVnOworCWludCBkb2ZmOworCWludCBzb2Zm
OworCWludCBzbG90czsKKwl1OCB0bXAgPSBicGYyYTY0W1RNUF9SRUdfMV07CisKKwkvKiBzdG9y
ZSBhcmd1bWVudHMgdG8gdGhlIHN0YWNrIGZvciB0aGUgYnBmIHByb2dyYW0sIG9yIHJlc3RvcmUK
KwkgKiBhcmd1bWVudHMgZnJvbSBzdGFjayBmb3IgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uCisJICov
CisJZm9yIChyZWcgPSAwOyByZWcgPCBhLT5yZWdzX2Zvcl9hcmdzOyByZWcrKykgeworCQllbWl0
KGZvcl9jYWxsX29yaWdpbiA/CisJCSAgICAgQTY0X0xEUjY0SShyZWcsIEE2NF9TUCwgYmFyZ3Nf
b2ZmKSA6CisJCSAgICAgQTY0X1NUUjY0SShyZWcsIEE2NF9TUCwgYmFyZ3Nfb2ZmKSwKKwkJICAg
ICBjdHgpOworCQliYXJnc19vZmYgKz0gODsKKwl9CisKKwlzb2ZmID0gMzI7IC8qIG9uIHN0YWNr
IGFyZ3VtZW50cyBzdGFydCBmcm9tIEZQICsgMzIgKi8KKwlkb2ZmID0gKGZvcl9jYWxsX29yaWdp
biA/IG9hcmdzX29mZiA6IGJhcmdzX29mZik7CisKKwkvKiBzYXZlIG9uIHN0YWNrIGFyZ3VtZW50
cyAqLworCWZvciAoaSA9IGEtPmFyZ3NfaW5fcmVnczsgaSA8IG0tPm5yX2FyZ3M7IGkrKykgewor
CQlzbG90cyA9IChtLT5hcmdfc2l6ZVtpXSArIDcpIC8gODsKKwkJLyogQUFQQ1MgQy4xNDogYWRk
aXRpb25hbCBhcmd1bWVudHMgb24gc3RhY2sgbXVzdCBiZQorCQkgKiBhbGlnbmVkIG9uIG1heCg4
LCBhcmdfbmF0dXJhbF9hbGlnbm1lbnQpCisJCSAqLworCQlzb2ZmID0gcm91bmRfdXAoc29mZiwg
OCk7CisJCWlmIChmb3JfY2FsbF9vcmlnaW4pCisJCQlkb2ZmID0gIHJvdW5kX3VwKGRvZmYsIDgp
OworCQkvKiB2ZXJpZmllciBlbnN1cmVzIGFyZ19zaXplIDw9IDE2LCBzbyBzbG90cyBlcXVhbHMg
MSBvciAyICovCisJCXdoaWxlIChzbG90cy0tID4gMCkgeworCQkJZW1pdChBNjRfTERSNjRJKHRt
cCwgQTY0X0ZQLCBzb2ZmKSwgY3R4KTsKKwkJCS8qIGlmIHRoZXJlIGlzIHVudXNlZCBzcGFjZSBp
biB0aGUgbGFzdCBzbG90LCBjbGVhcgorCQkJICogdGhlIGdhcmJhZ2UgY29udGFpbmVkIGluIHRo
ZSBzcGFjZS4KKwkJCSAqLworCQkJaWYgKHNsb3RzID09IDAgJiYgIWZvcl9jYWxsX29yaWdpbikK
KwkJCQljbGVhcl9nYXJiYWdlKGN0eCwgdG1wLCBtLT5hcmdfc2l6ZVtpXSAlIDgpOworCQkJZW1p
dChBNjRfU1RSNjRJKHRtcCwgQTY0X1NQLCBkb2ZmKSwgY3R4KTsKKwkJCXNvZmYgKz0gODsKKwkJ
CWRvZmYgKz0gODsKKwkJfQorCX0KK30KKworc3RhdGljIHZvaWQgcmVzdG9yZV9hcmdzKHN0cnVj
dCBqaXRfY3R4ICpjdHgsIGludCBiYXJnc19vZmYsIGludCBucmVncykKK3sKKwlpbnQgcmVnOwog
Ci0JZm9yIChpID0gMDsgaSA8IG5yZWdzOyBpKyspIHsKLQkJZW1pdChBNjRfTERSNjRJKGksIEE2
NF9TUCwgYXJnc19vZmYpLCBjdHgpOwotCQlhcmdzX29mZiArPSA4OworCWZvciAocmVnID0gMDsg
cmVnIDwgbnJlZ3M7IHJlZysrKSB7CisJCWVtaXQoQTY0X0xEUjY0SShyZWcsIEE2NF9TUCwgYmFy
Z3Nfb2ZmKSwgY3R4KTsKKwkJYmFyZ3Nfb2ZmICs9IDg7CiAJfQogfQogCkBAIC0yMTk0LDE3ICsy
MzA1LDIxIEBAIHN0YXRpYyBib29sIGlzX3N0cnVjdF9vcHNfdHJhbXAoY29uc3Qgc3RydWN0IGJw
Zl90cmFtcF9saW5rcyAqZmVudHJ5X2xpbmtzKQogICovCiBzdGF0aWMgaW50IHByZXBhcmVfdHJh
bXBvbGluZShzdHJ1Y3Qgaml0X2N0eCAqY3R4LCBzdHJ1Y3QgYnBmX3RyYW1wX2ltYWdlICppbSwK
IAkJCSAgICAgIHN0cnVjdCBicGZfdHJhbXBfbGlua3MgKnRsaW5rcywgdm9pZCAqZnVuY19hZGRy
LAotCQkJICAgICAgaW50IG5yZWdzLCB1MzIgZmxhZ3MpCisJCQkgICAgICBjb25zdCBzdHJ1Y3Qg
YnRmX2Z1bmNfbW9kZWwgKm0sCisJCQkgICAgICBjb25zdCBzdHJ1Y3QgYXJnX2F1eCAqYSwKKwkJ
CSAgICAgIHUzMiBmbGFncykKIHsKIAlpbnQgaTsKIAlpbnQgc3RhY2tfc2l6ZTsKIAlpbnQgcmV0
YWRkcl9vZmY7CiAJaW50IHJlZ3Nfb2ZmOwogCWludCByZXR2YWxfb2ZmOwotCWludCBhcmdzX29m
ZjsKLQlpbnQgbnJlZ3Nfb2ZmOworCWludCBiYXJnc19vZmY7CisJaW50IG5mdW5jYXJnc19vZmY7
CiAJaW50IGlwX29mZjsKIAlpbnQgcnVuX2N0eF9vZmY7CisJaW50IG9hcmdzX29mZjsKKwlpbnQg
bmZ1bmNhcmdzOwogCXN0cnVjdCBicGZfdHJhbXBfbGlua3MgKmZlbnRyeSA9ICZ0bGlua3NbQlBG
X1RSQU1QX0ZFTlRSWV07CiAJc3RydWN0IGJwZl90cmFtcF9saW5rcyAqZmV4aXQgPSAmdGxpbmtz
W0JQRl9UUkFNUF9GRVhJVF07CiAJc3RydWN0IGJwZl90cmFtcF9saW5rcyAqZm1vZF9yZXQgPSAm
dGxpbmtzW0JQRl9UUkFNUF9NT0RJRllfUkVUVVJOXTsKQEAgLTIyMTMsMzEgKzIzMjgsMzggQEAg
c3RhdGljIGludCBwcmVwYXJlX3RyYW1wb2xpbmUoc3RydWN0IGppdF9jdHggKmN0eCwgc3RydWN0
IGJwZl90cmFtcF9pbWFnZSAqaW0sCiAJYm9vbCBpc19zdHJ1Y3Rfb3BzID0gaXNfc3RydWN0X29w
c190cmFtcChmZW50cnkpOwogCiAJLyogdHJhbXBvbGluZSBzdGFjayBsYXlvdXQ6Ci0JICogICAg
ICAgICAgICAgICAgICBbIHBhcmVudCBpcCAgICAgICAgIF0KLQkgKiAgICAgICAgICAgICAgICAg
IFsgRlAgICAgICAgICAgICAgICAgXQotCSAqIFNQICsgcmV0YWRkcl9vZmYgWyBzZWxmIGlwICAg
ICAgICAgICBdCi0JICogICAgICAgICAgICAgICAgICBbIEZQICAgICAgICAgICAgICAgIF0KKwkg
KiAgICAgICAgICAgICAgICAgICAgWyBwYXJlbnQgaXAgICAgICAgICBdCisJICogICAgICAgICAg
ICAgICAgICAgIFsgRlAgICAgICAgICAgICAgICAgXQorCSAqIFNQICsgcmV0YWRkcl9vZmYgICBb
IHNlbGYgaXAgICAgICAgICAgIF0KKwkgKiAgICAgICAgICAgICAgICAgICAgWyBGUCAgICAgICAg
ICAgICAgICBdCiAJICoKLQkgKiAgICAgICAgICAgICAgICAgIFsgcGFkZGluZyAgICAgICAgICAg
XSBhbGlnbiBTUCB0byBtdWx0aXBsZXMgb2YgMTYKKwkgKiAgICAgICAgICAgICAgICAgICAgWyBw
YWRkaW5nICAgICAgICAgICBdIGFsaWduIFNQIHRvIG11bHRpcGxlcyBvZiAxNgogCSAqCi0JICog
ICAgICAgICAgICAgICAgICBbIHgyMCAgICAgICAgICAgICAgIF0gY2FsbGVlIHNhdmVkIHJlZyB4
MjAKLQkgKiBTUCArIHJlZ3Nfb2ZmICAgIFsgeDE5ICAgICAgICAgICAgICAgXSBjYWxsZWUgc2F2
ZWQgcmVnIHgxOQorCSAqICAgICAgICAgICAgICAgICAgICBbIHgyMCAgICAgICAgICAgICAgIF0g
Y2FsbGVlIHNhdmVkIHJlZyB4MjAKKwkgKiBTUCArIHJlZ3Nfb2ZmICAgICAgWyB4MTkgICAgICAg
ICAgICAgICBdIGNhbGxlZSBzYXZlZCByZWcgeDE5CiAJICoKLQkgKiBTUCArIHJldHZhbF9vZmYg
IFsgcmV0dXJuIHZhbHVlICAgICAgXSBCUEZfVFJBTVBfRl9DQUxMX09SSUcgb3IKLQkgKiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCUEZfVFJBTVBfRl9SRVRfRkVOVFJZ
X1JFVAorCSAqIFNQICsgcmV0dmFsX29mZiAgICBbIHJldHVybiB2YWx1ZSAgICAgIF0gQlBGX1RS
QU1QX0ZfQ0FMTF9PUklHIG9yCisJICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICBCUEZfVFJBTVBfRl9SRVRfRkVOVFJZX1JFVAorCSAqICAgICAgICAgICAgICAgICAg
ICBbIGFyZyByZWcgTiAgICAgICAgIF0KKwkgKiAgICAgICAgICAgICAgICAgICAgWyAuLi4gICAg
ICAgICAgICAgICBdCisJICogU1AgKyBiYXJnc19vZmYgICAgIFsgYXJnIHJlZyAxICAgICAgICAg
XSBmb3IgYnBmCiAJICoKLQkgKiAgICAgICAgICAgICAgICAgIFsgYXJnIHJlZyBOICAgICAgICAg
XQotCSAqICAgICAgICAgICAgICAgICAgWyAuLi4gICAgICAgICAgICAgICBdCi0JICogU1AgKyBh
cmdzX29mZiAgICBbIGFyZyByZWcgMSAgICAgICAgIF0KKwkgKiBTUCArIG5mdW5jYXJnc19vZmYg
WyBhcmcgcmVncyBjb3VudCAgICBdCiAJICoKLQkgKiBTUCArIG5yZWdzX29mZiAgIFsgYXJnIHJl
Z3MgY291bnQgICAgXQorCSAqIFNQICsgaXBfb2ZmICAgICAgICBbIHRyYWNlZCBmdW5jdGlvbiAg
IF0gQlBGX1RSQU1QX0ZfSVBfQVJHIGZsYWcKIAkgKgotCSAqIFNQICsgaXBfb2ZmICAgICAgWyB0
cmFjZWQgZnVuY3Rpb24gICBdIEJQRl9UUkFNUF9GX0lQX0FSRyBmbGFnCisJICogU1AgKyBydW5f
Y3R4X29mZiAgIFsgYnBmX3RyYW1wX3J1bl9jdHggXQogCSAqCi0JICogU1AgKyBydW5fY3R4X29m
ZiBbIGJwZl90cmFtcF9ydW5fY3R4IF0KKwkgKiAgICAgICAgICAgICAgICAgICAgWyBzdGFjayBh
cmcgTiAgICAgICBdCisJICogICAgICAgICAgICAgICAgICAgIFsgLi4uICAgICAgICAgICAgICAg
XQorCSAqIFNQICsgb2FyZ3Nfb2ZmICAgICBbIHN0YWNrIGFyZyAxICAgICAgIF0gZm9yIG9yaWdp
bmFsIGZ1bmMKIAkgKi8KIAogCXN0YWNrX3NpemUgPSAwOworCW9hcmdzX29mZiA9IHN0YWNrX3Np
emU7CisJaWYgKGZsYWdzICYgQlBGX1RSQU1QX0ZfQ0FMTF9PUklHKQorCQlzdGFja19zaXplICs9
ICBhLT5vc3RhY2tfZm9yX2FyZ3M7CisKIAlydW5fY3R4X29mZiA9IHN0YWNrX3NpemU7CiAJLyog
cm9vbSBmb3IgYnBmX3RyYW1wX3J1bl9jdHggKi8KIAlzdGFja19zaXplICs9IHJvdW5kX3VwKHNp
emVvZihzdHJ1Y3QgYnBmX3RyYW1wX3J1bl9jdHgpLCA4KTsKQEAgLTIyNDcsMTMgKzIzNjksMTQg
QEAgc3RhdGljIGludCBwcmVwYXJlX3RyYW1wb2xpbmUoc3RydWN0IGppdF9jdHggKmN0eCwgc3Ry
dWN0IGJwZl90cmFtcF9pbWFnZSAqaW0sCiAJaWYgKGZsYWdzICYgQlBGX1RSQU1QX0ZfSVBfQVJH
KQogCQlzdGFja19zaXplICs9IDg7CiAKLQlucmVnc19vZmYgPSBzdGFja19zaXplOworCW5mdW5j
YXJnc19vZmYgPSBzdGFja19zaXplOwogCS8qIHJvb20gZm9yIGFyZ3MgY291bnQgKi8KIAlzdGFj
a19zaXplICs9IDg7CiAKLQlhcmdzX29mZiA9IHN0YWNrX3NpemU7CisJYmFyZ3Nfb2ZmID0gc3Rh
Y2tfc2l6ZTsKIAkvKiByb29tIGZvciBhcmdzICovCi0Jc3RhY2tfc2l6ZSArPSBucmVncyAqIDg7
CisJbmZ1bmNhcmdzID0gYS0+cmVnc19mb3JfYXJncyArIGEtPmJzdGFja19mb3JfYXJncyAvIDg7
CisJc3RhY2tfc2l6ZSArPSA4ICogbmZ1bmNhcmdzOwogCiAJLyogcm9vbSBmb3IgcmV0dXJuIHZh
bHVlICovCiAJcmV0dmFsX29mZiA9IHN0YWNrX3NpemU7CkBAIC0yMzAwLDExICsyNDIzLDExIEBA
IHN0YXRpYyBpbnQgcHJlcGFyZV90cmFtcG9saW5lKHN0cnVjdCBqaXRfY3R4ICpjdHgsIHN0cnVj
dCBicGZfdHJhbXBfaW1hZ2UgKmltLAogCX0KIAogCS8qIHNhdmUgYXJnIHJlZ3MgY291bnQqLwot
CWVtaXQoQTY0X01PVlooMSwgQTY0X1IoMTApLCBucmVncywgMCksIGN0eCk7Ci0JZW1pdChBNjRf
U1RSNjRJKEE2NF9SKDEwKSwgQTY0X1NQLCBucmVnc19vZmYpLCBjdHgpOworCWVtaXQoQTY0X01P
VlooMSwgQTY0X1IoMTApLCBuZnVuY2FyZ3MsIDApLCBjdHgpOworCWVtaXQoQTY0X1NUUjY0SShB
NjRfUigxMCksIEE2NF9TUCwgbmZ1bmNhcmdzX29mZiksIGN0eCk7CiAKLQkvKiBzYXZlIGFyZyBy
ZWdzICovCi0Jc2F2ZV9hcmdzKGN0eCwgYXJnc19vZmYsIG5yZWdzKTsKKwkvKiBzYXZlIGFyZ3Mg
Zm9yIGJwZiAqLworCXNhdmVfYXJncyhjdHgsIGJhcmdzX29mZiwgb2FyZ3Nfb2ZmLCBtLCBhLCBm
YWxzZSk7CiAKIAkvKiBzYXZlIGNhbGxlZSBzYXZlZCByZWdpc3RlcnMgKi8KIAllbWl0KEE2NF9T
VFI2NEkoQTY0X1IoMTkpLCBBNjRfU1AsIHJlZ3Nfb2ZmKSwgY3R4KTsKQEAgLTIzMjAsNyArMjQ0
Myw3IEBAIHN0YXRpYyBpbnQgcHJlcGFyZV90cmFtcG9saW5lKHN0cnVjdCBqaXRfY3R4ICpjdHgs
IHN0cnVjdCBicGZfdHJhbXBfaW1hZ2UgKmltLAogCX0KIAogCWZvciAoaSA9IDA7IGkgPCBmZW50
cnktPm5yX2xpbmtzOyBpKyspCi0JCWludm9rZV9icGZfcHJvZyhjdHgsIGZlbnRyeS0+bGlua3Nb
aV0sIGFyZ3Nfb2ZmLAorCQlpbnZva2VfYnBmX3Byb2coY3R4LCBmZW50cnktPmxpbmtzW2ldLCBi
YXJnc19vZmYsCiAJCQkJcmV0dmFsX29mZiwgcnVuX2N0eF9vZmYsCiAJCQkJZmxhZ3MgJiBCUEZf
VFJBTVBfRl9SRVRfRkVOVFJZX1JFVCk7CiAKQEAgLTIzMzAsMTIgKzI0NTMsMTMgQEAgc3RhdGlj
IGludCBwcmVwYXJlX3RyYW1wb2xpbmUoc3RydWN0IGppdF9jdHggKmN0eCwgc3RydWN0IGJwZl90
cmFtcF9pbWFnZSAqaW0sCiAJCWlmICghYnJhbmNoZXMpCiAJCQlyZXR1cm4gLUVOT01FTTsKIAot
CQlpbnZva2VfYnBmX21vZF9yZXQoY3R4LCBmbW9kX3JldCwgYXJnc19vZmYsIHJldHZhbF9vZmYs
CisJCWludm9rZV9icGZfbW9kX3JldChjdHgsIGZtb2RfcmV0LCBiYXJnc19vZmYsIHJldHZhbF9v
ZmYsCiAJCQkJICAgcnVuX2N0eF9vZmYsIGJyYW5jaGVzKTsKIAl9CiAKIAlpZiAoZmxhZ3MgJiBC
UEZfVFJBTVBfRl9DQUxMX09SSUcpIHsKLQkJcmVzdG9yZV9hcmdzKGN0eCwgYXJnc19vZmYsIG5y
ZWdzKTsKKwkJLyogc2F2ZSBhcmdzIGZvciBvcmlnaW5hbCBmdW5jICovCisJCXNhdmVfYXJncyhj
dHgsIGJhcmdzX29mZiwgb2FyZ3Nfb2ZmLCBtLCBhLCB0cnVlKTsKIAkJLyogY2FsbCBvcmlnaW5h
bCBmdW5jICovCiAJCWVtaXQoQTY0X0xEUjY0SShBNjRfUigxMCksIEE2NF9TUCwgcmV0YWRkcl9v
ZmYpLCBjdHgpOwogCQllbWl0KEE2NF9BRFIoQTY0X0xSLCBBQVJDSDY0X0lOU05fU0laRSAqIDIp
LCBjdHgpOwpAQCAtMjM1NCw3ICsyNDc4LDcgQEAgc3RhdGljIGludCBwcmVwYXJlX3RyYW1wb2xp
bmUoc3RydWN0IGppdF9jdHggKmN0eCwgc3RydWN0IGJwZl90cmFtcF9pbWFnZSAqaW0sCiAJfQog
CiAJZm9yIChpID0gMDsgaSA8IGZleGl0LT5ucl9saW5rczsgaSsrKQotCQlpbnZva2VfYnBmX3By
b2coY3R4LCBmZXhpdC0+bGlua3NbaV0sIGFyZ3Nfb2ZmLCByZXR2YWxfb2ZmLAorCQlpbnZva2Vf
YnBmX3Byb2coY3R4LCBmZXhpdC0+bGlua3NbaV0sIGJhcmdzX29mZiwgcmV0dmFsX29mZiwKIAkJ
CQlydW5fY3R4X29mZiwgZmFsc2UpOwogCiAJaWYgKGZsYWdzICYgQlBGX1RSQU1QX0ZfQ0FMTF9P
UklHKSB7CkBAIC0yMzY4LDcgKzI0OTIsNyBAQCBzdGF0aWMgaW50IHByZXBhcmVfdHJhbXBvbGlu
ZShzdHJ1Y3Qgaml0X2N0eCAqY3R4LCBzdHJ1Y3QgYnBmX3RyYW1wX2ltYWdlICppbSwKIAl9CiAK
IAlpZiAoZmxhZ3MgJiBCUEZfVFJBTVBfRl9SRVNUT1JFX1JFR1MpCi0JCXJlc3RvcmVfYXJncyhj
dHgsIGFyZ3Nfb2ZmLCBucmVncyk7CisJCXJlc3RvcmVfYXJncyhjdHgsIGJhcmdzX29mZiwgYS0+
cmVnc19mb3JfYXJncyk7CiAKIAkvKiByZXN0b3JlIGNhbGxlZSBzYXZlZCByZWdpc3RlciB4MTkg
YW5kIHgyMCAqLwogCWVtaXQoQTY0X0xEUjY0SShBNjRfUigxOSksIEE2NF9TUCwgcmVnc19vZmYp
LCBjdHgpOwpAQCAtMjQyOCwxNCArMjU1MiwxNiBAQCBpbnQgYXJjaF9icGZfdHJhbXBvbGluZV9z
aXplKGNvbnN0IHN0cnVjdCBidGZfZnVuY19tb2RlbCAqbSwgdTMyIGZsYWdzLAogCQkuaWR4ID0g
MCwKIAl9OwogCXN0cnVjdCBicGZfdHJhbXBfaW1hZ2UgaW07CisJc3RydWN0IGFyZ19hdXggIGFh
dXg7CiAJaW50IG5yZWdzLCByZXQ7CiAKIAlucmVncyA9IGJ0Zl9mdW5jX21vZGVsX25yZWdzKG0p
OwotCS8qIHRoZSBmaXJzdCA4IHJlZ2lzdGVycyBhcmUgdXNlZCBmb3IgYXJndW1lbnRzICovCi0J
aWYgKG5yZWdzID4gOCkKLQkJcmV0dXJuIC1FTk9UU1VQUDsKIAotCXJldCA9IHByZXBhcmVfdHJh
bXBvbGluZSgmY3R4LCAmaW0sIHRsaW5rcywgZnVuY19hZGRyLCBucmVncywgZmxhZ3MpOworCXJl
dCA9IGNhbGNfYXJnX2F1eChtLCAmYWF1eCk7CisJaWYgKHJldCA8IDApCisJCXJldHVybiByZXQ7
CisKKwlyZXQgPSBwcmVwYXJlX3RyYW1wb2xpbmUoJmN0eCwgJmltLCB0bGlua3MsIGZ1bmNfYWRk
ciwgbSwgJmFhdXgsIGZsYWdzKTsKIAlpZiAocmV0IDwgMCkKIAkJcmV0dXJuIHJldDsKIApAQCAt
MjQ2Miw5ICsyNTg4LDEwIEBAIGludCBhcmNoX3ByZXBhcmVfYnBmX3RyYW1wb2xpbmUoc3RydWN0
IGJwZl90cmFtcF9pbWFnZSAqaW0sIHZvaWQgKnJvX2ltYWdlLAogCQkJCXUzMiBmbGFncywgc3Ry
dWN0IGJwZl90cmFtcF9saW5rcyAqdGxpbmtzLAogCQkJCXZvaWQgKmZ1bmNfYWRkcikKIHsKLQlp
bnQgcmV0LCBucmVnczsKLQl2b2lkICppbWFnZSwgKnRtcDsKIAl1MzIgc2l6ZSA9IHJvX2ltYWdl
X2VuZCAtIHJvX2ltYWdlOworCXN0cnVjdCBhcmdfYXV4IGFhdXg7CisJdm9pZCAqaW1hZ2UsICp0
bXA7CisJaW50IHJldDsKIAogCS8qIGltYWdlIGRvZXNuJ3QgbmVlZCB0byBiZSBpbiBtb2R1bGUg
bWVtb3J5IHJhbmdlLCBzbyB3ZSBjYW4KIAkgKiB1c2Uga3ZtYWxsb2MuCkBAIC0yNDgwLDEzICsy
NjA3LDEyIEBAIGludCBhcmNoX3ByZXBhcmVfYnBmX3RyYW1wb2xpbmUoc3RydWN0IGJwZl90cmFt
cF9pbWFnZSAqaW0sIHZvaWQgKnJvX2ltYWdlLAogCQkud3JpdGUgPSB0cnVlLAogCX07CiAKLQlu
cmVncyA9IGJ0Zl9mdW5jX21vZGVsX25yZWdzKG0pOwotCS8qIHRoZSBmaXJzdCA4IHJlZ2lzdGVy
cyBhcmUgdXNlZCBmb3IgYXJndW1lbnRzICovCi0JaWYgKG5yZWdzID4gOCkKLQkJcmV0dXJuIC1F
Tk9UU1VQUDsKIAogCWppdF9maWxsX2hvbGUoaW1hZ2UsICh1bnNpZ25lZCBpbnQpKHJvX2ltYWdl
X2VuZCAtIHJvX2ltYWdlKSk7Ci0JcmV0ID0gcHJlcGFyZV90cmFtcG9saW5lKCZjdHgsIGltLCB0
bGlua3MsIGZ1bmNfYWRkciwgbnJlZ3MsIGZsYWdzKTsKKwlyZXQgPSBjYWxjX2FyZ19hdXgobSwg
JmFhdXgpOworCWlmIChyZXQpCisJCWdvdG8gb3V0OworCXJldCA9IHByZXBhcmVfdHJhbXBvbGlu
ZSgmY3R4LCBpbSwgdGxpbmtzLCBmdW5jX2FkZHIsIG0sICZhYXV4LCBmbGFncyk7CiAKIAlpZiAo
cmV0ID4gMCAmJiB2YWxpZGF0ZV9jb2RlKCZjdHgpIDwgMCkgewogCQlyZXQgPSAtRUlOVkFMOwoK
LS0gCjIuNDkuMAoKX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X18KTGludXgtc3RtMzIgbWFpbGluZyBsaXN0CkxpbnV4LXN0bTMyQHN0LW1kLW1haWxtYW4uc3Rv
cm1yZXBseS5jb20KaHR0cHM6Ly9zdC1tZC1tYWlsbWFuLnN0b3JtcmVwbHkuY29tL21haWxtYW4v
bGlzdGluZm8vbGludXgtc3RtMzIK
