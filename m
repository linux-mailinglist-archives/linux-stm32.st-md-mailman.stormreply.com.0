Return-Path: <linux-stm32-bounces@st-md-mailman.stormreply.com>
X-Original-To: lists+linux-stm32@lfdr.de
Delivered-To: lists+linux-stm32@lfdr.de
Received: from stm-ict-prod-mailman-01.stormreply.prv (st-md-mailman.stormreply.com [52.209.6.89])
	by mail.lfdr.de (Postfix) with ESMTPS id 8902DA8672B
	for <lists+linux-stm32@lfdr.de>; Fri, 11 Apr 2025 22:32:24 +0200 (CEST)
Received: from ip-172-31-3-47.eu-west-1.compute.internal (localhost [127.0.0.1])
	by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTP id 5052BC78028;
	Fri, 11 Apr 2025 20:32:24 +0000 (UTC)
Received: from relay9-d.mail.gandi.net (relay9-d.mail.gandi.net
 [217.70.183.199])
 (using TLSv1.2 with cipher ADH-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTPS id CA407C78032
 for <linux-stm32@st-md-mailman.stormreply.com>;
 Fri, 11 Apr 2025 20:32:22 +0000 (UTC)
Received: by mail.gandi.net (Postfix) with ESMTPSA id AA9D5439EE;
 Fri, 11 Apr 2025 20:32:20 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=bootlin.com; s=gm1;
 t=1744403542;
 h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
 to:to:cc:cc:mime-version:mime-version:content-type:content-type:
 content-transfer-encoding:content-transfer-encoding:
 in-reply-to:in-reply-to:references:references;
 bh=Ec28mwfnSBXDui4uhcD+4fTqV49TTiQGTbLP7ywekj0=;
 b=K3NVb9CqxwIVa5GBFmmnfNIejUKa7TPH67HXLOQbeIMGv/nyA8hAPhYvtX4u788aqOprmI
 7IPQ53KmzL4KEO35oQ7Pw1EinQfPoZmXsm/7NVRf0yzEMHh/zcXBUTeSAGbbjnH5ftKt9C
 lyTgu52YADl265PVzGvkqAMmRyg76Ojabkw4dDxFo0xu0E976brSf5mBbk2z6zZQd+v6BW
 WnrxPjlxcdh9c8naQTUrw+DCFAwQdeRpRFiA6LoVF4etSovHNUabLmLeQv98gtFdnmzA6N
 W/45Ybb4Md3QnP+ykRalkxm9n+vrin5L01HRT3aCzRYKRxH3T4UaAyvyhzyLNQ==
From: =?utf-8?q?Alexis_Lothor=C3=A9?= <alexis.lothore@bootlin.com>
Date: Fri, 11 Apr 2025 22:32:11 +0200
MIME-Version: 1.0
Message-Id: <20250411-many_args_arm64-v1-2-0a32fe72339e@bootlin.com>
References: <20250411-many_args_arm64-v1-0-0a32fe72339e@bootlin.com>
In-Reply-To: <20250411-many_args_arm64-v1-0-0a32fe72339e@bootlin.com>
To: Alexei Starovoitov <ast@kernel.org>, 
 Daniel Borkmann <daniel@iogearbox.net>, 
 John Fastabend <john.fastabend@gmail.com>, 
 Andrii Nakryiko <andrii@kernel.org>, 
 Martin KaFai Lau <martin.lau@linux.dev>, 
 Eduard Zingerman <eddyz87@gmail.com>, Song Liu <song@kernel.org>, 
 Yonghong Song <yonghong.song@linux.dev>, KP Singh <kpsingh@kernel.org>, 
 Stanislav Fomichev <sdf@fomichev.me>, Hao Luo <haoluo@google.com>, 
 Jiri Olsa <jolsa@kernel.org>, Puranjay Mohan <puranjay@kernel.org>, 
 Xu Kuohai <xukuohai@huaweicloud.com>, 
 Catalin Marinas <catalin.marinas@arm.com>, Will Deacon <will@kernel.org>, 
 Mykola Lysenko <mykolal@fb.com>, Shuah Khan <shuah@kernel.org>, 
 Maxime Coquelin <mcoquelin.stm32@gmail.com>, 
 Alexandre Torgue <alexandre.torgue@foss.st.com>, 
 Florent Revest <revest@chromium.org>
X-Mailer: b4 0.14.2
X-GND-State: clean
X-GND-Score: -100
X-GND-Cause: gggruggvucftvghtrhhoucdtuddrgeefvddrtddtgddvuddvjeekucetufdoteggodetrfdotffvucfrrhhofhhilhgvmecuifetpfffkfdpucggtfgfnhhsuhgsshgtrhhisggvnecuuegrihhlohhuthemuceftddunecusecvtfgvtghiphhivghnthhsucdlqddutddtmdenucfjughrpefhfffugggtgffkfhgjvfevofesthekredtredtjeenucfhrhhomheptehlvgigihhsucfnohhthhhorhoruceorghlvgigihhsrdhlohhthhhorhgvsegsohhothhlihhnrdgtohhmqeenucggtffrrghtthgvrhhnpeegveeghfetffeuhfehkeekleffffdvuefggfevjefftddvffduheettdeiveetteenucfkphepvdgrtddvmeekgedvkeemfhelgegtmegvtddtmeemfhekheenucevlhhushhtvghrufhiiigvpedtnecurfgrrhgrmhepihhnvghtpedvrgdtvdemkeegvdekmehfleegtgemvgdttdemmehfkeehpdhhvghloheplgduledvrdduieekrddurdduleejngdpmhgrihhlfhhrohhmpegrlhgvgihishdrlhhothhhohhrvgessghoohhtlhhinhdrtghomhdpnhgspghrtghpthhtohepfedupdhrtghpthhtohepshgufhesfhhomhhitghhvghvrdhmvgdprhgtphhtthhopehmrghrthhinhdrlhgruheslhhinhhugidruggvvhdprhgtphhtthhopeiguhhkuhhohhgriheshhhurgifvghitghlohhuugdrtghomhdprhgtphhtthhopehjohhlshgrsehkvghrnhgvlhdrohhrghdprhgtphhtthhopegrlhgvgihis
 hdrlhhothhhohhrvgessghoohhtlhhinhdrtghomhdprhgtphhtthhopehmhihkohhlrghlsehfsgdrtghomhdprhgtphhtthhopeifihhllheskhgvrhhnvghlrdhorhhgpdhrtghpthhtohepmhgtohhquhgvlhhinhdrshhtmhefvdesghhmrghilhdrtghomh
X-GND-Sasl: alexis.lothore@bootlin.com
Cc: linux-kselftest@vger.kernel.org,
 Bastien Curutchet <bastien.curutchet@bootlin.com>, ebpf@linuxfoundation.org,
 linux-kernel@vger.kernel.org,
 =?utf-8?q?Alexis_Lothor=C3=A9_=28eBPF_Foundation=29?=
 <alexis.lothore@bootlin.com>, Thomas Petazzoni <thomas.petazzoni@bootlin.com>,
 bpf@vger.kernel.org, Xu Kuohai <xukuohai@huawei.com>,
 linux-stm32@st-md-mailman.stormreply.com, linux-arm-kernel@lists.infradead.org
Subject: [Linux-stm32] [PATCH RFC bpf-next 2/4] bpf,
 arm64: Support up to 12 function arguments
X-BeenThere: linux-stm32@st-md-mailman.stormreply.com
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: <linux-stm32.st-md-mailman.stormreply.com>
List-Unsubscribe: <https://st-md-mailman.stormreply.com/mailman/options/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=unsubscribe>
List-Archive: <http://st-md-mailman.stormreply.com/pipermail/linux-stm32/>
List-Post: <mailto:linux-stm32@st-md-mailman.stormreply.com>
List-Help: <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=help>
List-Subscribe: <https://st-md-mailman.stormreply.com/mailman/listinfo/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: linux-stm32-bounces@st-md-mailman.stormreply.com
Sender: "Linux-stm32" <linux-stm32-bounces@st-md-mailman.stormreply.com>

RnJvbTogWHUgS3VvaGFpIDx4dWt1b2hhaUBodWF3ZWkuY29tPgoKQ3VycmVudGx5IEFSTTY0IGJw
ZiB0cmFtcG9saW5lIHN1cHBvcnRzIHVwIHRvIDggZnVuY3Rpb24gYXJndW1lbnRzLgpBY2NvcmRp
bmcgdG8gdGhlIHN0YXRpc3RpY3MgZnJvbSBjb21taXQKNDczZTMxNTBlMzBhICgiYnBmLCB4ODY6
IGFsbG93IGZ1bmN0aW9uIGFyZ3VtZW50cyB1cCB0byAxMiBmb3IgVFJBQ0lORyIpLAp0aGVyZSBh
cmUgYWJvdXQgMjAwIGZ1bmN0aW9ucyBhY2NlcHQgOSB0byAxMiBhcmd1bWVudHMsIHNvIGFkZGlu
ZyBzdXBwb3J0CmZvciB1cCB0byAxMiBmdW5jdGlvbiBhcmd1bWVudHMuCgpEdWUgdG8gYnBmIG9u
bHkgc3VwcG9ydGluZyBmdW5jdGlvbiBhcmd1bWVudHMgdXAgdG8gMTYgYnl0ZXMsIGFjY29yZGlu
ZyB0bwpBQVBDUzY0LCBzdGFydGluZyBmcm9tIHRoZSBmaXJzdCBhcmd1bWVudCwgZWFjaCBhcmd1
bWVudCBpcyBmaXJzdAphdHRlbXB0ZWQgdG8gYmUgbG9hZGVkIHRvIDEgb3IgMiBzbWFsbGVzdCBy
ZWdpc3RlcnMgZnJvbSB4MC14NywgaWYgdGhlcmUKYXJlIG5vIGVub3VnaCByZWdpc3RlcnMgdG8g
aG9sZCB0aGUgZW50aXJlIGFyZ3VtZW50LCB0aGVuIGFsbCByZW1haW5pbmcKYXJndW1lbnRzIHN0
YXJ0aW5nIGZyb20gdGhpcyBvbmUgYXJlIHB1c2hlZCB0byB0aGUgc3RhY2sgZm9yIHBhc3Npbmcu
CgpTaWduZWQtb2ZmLWJ5OiBYdSBLdW9oYWkgPHh1a3VvaGFpQGh1YXdlaS5jb20+CkNvLWRldmVs
b3BlZC1ieTogQWxleGlzIExvdGhvcsOpIDxhbGV4aXMubG90aG9yZUBib290bGluLmNvbT4KU2ln
bmVkLW9mZi1ieTogQWxleGlzIExvdGhvcsOpIDxhbGV4aXMubG90aG9yZUBib290bGluLmNvbT4K
LS0tCiBhcmNoL2FybTY0L25ldC9icGZfaml0X2NvbXAuYyB8IDIzNSArKysrKysrKysrKysrKysr
KysrKysrKysrKysrKysrKy0tLS0tLS0tLS0KIDEgZmlsZSBjaGFuZ2VkLCAxODIgaW5zZXJ0aW9u
cygrKSwgNTMgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEvYXJjaC9hcm02NC9uZXQvYnBmX2pp
dF9jb21wLmMgYi9hcmNoL2FybTY0L25ldC9icGZfaml0X2NvbXAuYwppbmRleCA3MGQ3Yzg5ZDNh
YzkwNzc5OGU4NmUwMDUxZTdiNDcyYzI1MmMxNDEyLi4zNjE4ZjQyYjFhMDAxOTU5MGQ0N2RiMGVj
MGZjZTFmOWY1MWIwMWFmIDEwMDY0NAotLS0gYS9hcmNoL2FybTY0L25ldC9icGZfaml0X2NvbXAu
YworKysgYi9hcmNoL2FybTY0L25ldC9icGZfaml0X2NvbXAuYwpAQCAtMjA2NCw3ICsyMDY0LDcg
QEAgYm9vbCBicGZfaml0X3N1cHBvcnRzX3N1YnByb2dfdGFpbGNhbGxzKHZvaWQpCiB9CiAKIHN0
YXRpYyB2b2lkIGludm9rZV9icGZfcHJvZyhzdHJ1Y3Qgaml0X2N0eCAqY3R4LCBzdHJ1Y3QgYnBm
X3RyYW1wX2xpbmsgKmwsCi0JCQkgICAgaW50IGFyZ3Nfb2ZmLCBpbnQgcmV0dmFsX29mZiwgaW50
IHJ1bl9jdHhfb2ZmLAorCQkJICAgIGludCBiYXJnc19vZmYsIGludCByZXR2YWxfb2ZmLCBpbnQg
cnVuX2N0eF9vZmYsCiAJCQkgICAgYm9vbCBzYXZlX3JldCkKIHsKIAlfX2xlMzIgKmJyYW5jaDsK
QEAgLTIxMDYsNyArMjEwNiw3IEBAIHN0YXRpYyB2b2lkIGludm9rZV9icGZfcHJvZyhzdHJ1Y3Qg
aml0X2N0eCAqY3R4LCBzdHJ1Y3QgYnBmX3RyYW1wX2xpbmsgKmwsCiAJYnJhbmNoID0gY3R4LT5p
bWFnZSArIGN0eC0+aWR4OwogCWVtaXQoQTY0X05PUCwgY3R4KTsKIAotCWVtaXQoQTY0X0FERF9J
KDEsIEE2NF9SKDApLCBBNjRfU1AsIGFyZ3Nfb2ZmKSwgY3R4KTsKKwllbWl0KEE2NF9BRERfSSgx
LCBBNjRfUigwKSwgQTY0X1NQLCBiYXJnc19vZmYpLCBjdHgpOwogCWlmICghcC0+aml0ZWQpCiAJ
CWVtaXRfYWRkcl9tb3ZfaTY0KEE2NF9SKDEpLCAoY29uc3QgdTY0KXAtPmluc25zaSwgY3R4KTsK
IApAQCAtMjEzMSw3ICsyMTMxLDcgQEAgc3RhdGljIHZvaWQgaW52b2tlX2JwZl9wcm9nKHN0cnVj
dCBqaXRfY3R4ICpjdHgsIHN0cnVjdCBicGZfdHJhbXBfbGluayAqbCwKIH0KIAogc3RhdGljIHZv
aWQgaW52b2tlX2JwZl9tb2RfcmV0KHN0cnVjdCBqaXRfY3R4ICpjdHgsIHN0cnVjdCBicGZfdHJh
bXBfbGlua3MgKnRsLAotCQkJICAgICAgIGludCBhcmdzX29mZiwgaW50IHJldHZhbF9vZmYsIGlu
dCBydW5fY3R4X29mZiwKKwkJCSAgICAgICBpbnQgYmFyZ3Nfb2ZmLCBpbnQgcmV0dmFsX29mZiwg
aW50IHJ1bl9jdHhfb2ZmLAogCQkJICAgICAgIF9fbGUzMiAqKmJyYW5jaGVzKQogewogCWludCBp
OwpAQCAtMjE0MSw3ICsyMTQxLDcgQEAgc3RhdGljIHZvaWQgaW52b2tlX2JwZl9tb2RfcmV0KHN0
cnVjdCBqaXRfY3R4ICpjdHgsIHN0cnVjdCBicGZfdHJhbXBfbGlua3MgKnRsLAogCSAqLwogCWVt
aXQoQTY0X1NUUjY0SShBNjRfWlIsIEE2NF9TUCwgcmV0dmFsX29mZiksIGN0eCk7CiAJZm9yIChp
ID0gMDsgaSA8IHRsLT5ucl9saW5rczsgaSsrKSB7Ci0JCWludm9rZV9icGZfcHJvZyhjdHgsIHRs
LT5saW5rc1tpXSwgYXJnc19vZmYsIHJldHZhbF9vZmYsCisJCWludm9rZV9icGZfcHJvZyhjdHgs
IHRsLT5saW5rc1tpXSwgYmFyZ3Nfb2ZmLCByZXR2YWxfb2ZmLAogCQkJCXJ1bl9jdHhfb2ZmLCB0
cnVlKTsKIAkJLyogaWYgKCoodTY0ICopKHNwICsgcmV0dmFsX29mZikgIT0gIDApCiAJCSAqCWdv
dG8gZG9fZmV4aXQ7CkBAIC0yMTU1LDIzICsyMTU1LDE0MiBAQCBzdGF0aWMgdm9pZCBpbnZva2Vf
YnBmX21vZF9yZXQoc3RydWN0IGppdF9jdHggKmN0eCwgc3RydWN0IGJwZl90cmFtcF9saW5rcyAq
dGwsCiAJfQogfQogCi1zdGF0aWMgdm9pZCBzYXZlX2FyZ3Moc3RydWN0IGppdF9jdHggKmN0eCwg
aW50IGFyZ3Nfb2ZmLCBpbnQgbnJlZ3MpCitzdHJ1Y3QgYXJnX2F1eCB7CisJLyogaG93IG1hbnkg
YXJncyBhcmUgcGFzc2VkIHRocm91Z2ggcmVnaXN0ZXJzLCB0aGUgcmVzdCBvZiB0aGUgYXJncyBh
cmUKKwkgKiBwYXNzZWQgdGhyb3VnaCBzdGFjaworCSAqLworCWludCBhcmdzX2luX3JlZ3M7CisJ
LyogaG93IG1hbnkgcmVnaXN0ZXJzIGFyZSB1c2VkIHRvIHBhc3MgYXJndW1lbnRzICovCisJaW50
IHJlZ3NfZm9yX2FyZ3M7CisJLyogaG93IG11Y2ggc3RhY2sgaXMgdXNlZCBmb3IgYWRkaXRpb25h
bCBhcmdzIHBhc3NlZCB0byBicGYgcHJvZ3JhbQorCSAqIHRoYXQgZGlkIG5vdCBmaXQgaW4gb3Jp
Z2luYWwgZnVuY3Rpb24gcmVnaXN0ZXJzCisJICoqLworCWludCBic3RhY2tfZm9yX2FyZ3M7CisJ
LyogaG9tZSBtdWNoIHN0YWNrIGlzIHVzZWQgZm9yIGFkZGl0aW9uYWwgYXJncyBwYXNzZWQgdG8g
dGhlCisJICogb3JpZ2luYWwgZnVuY3Rpb24gd2hlbiBjYWxsZWQgZnJvbSB0cmFtcG9saW5lICh0
aGlzIG9uZSBuZWVkcworCSAqIGFyZ3VtZW50cyB0byBiZSBwcm9wZXJseSBhbGlnbmVkKQorCSAq
LworCWludCBvc3RhY2tfZm9yX2FyZ3M7CisJdTggYXJnX2FsaWduW01BWF9CUEZfRlVOQ19BUkdT
XTsKK307CisKK3N0YXRpYyB1OCBjYWxjX2FyZ19hbGlnbihjb25zdCBzdHJ1Y3QgYnRmX2Z1bmNf
bW9kZWwgKm0sIGludCBpKQoreworCWlmIChtLT5hcmdfZmxhZ3NbaV0gJiBCVEZfRk1PREVMX1NU
UlVDVF9BUkcpCisJCXJldHVybiBtYXgoOCwgbS0+YXJnX2xhcmdlc3RfbWVtYmVyX3NpemVbaV0p
OworCXJldHVybiBtYXgoOCwgbS0+YXJnX3NpemVbaV0pOworfQorCitzdGF0aWMgdm9pZCBjYWxj
X2FyZ19hdXgoY29uc3Qgc3RydWN0IGJ0Zl9mdW5jX21vZGVsICptLAorCQkJIHN0cnVjdCBhcmdf
YXV4ICphKQogewogCWludCBpOworCWludCBucmVnczsKKwlpbnQgc2xvdHM7CisJaW50IHN0YWNr
X3Nsb3RzOworCisJZm9yIChpID0gMDsgaSA8IG0tPm5yX2FyZ3M7IGkrKykKKwkJYS0+YXJnX2Fs
aWduW2ldID0gY2FsY19hcmdfYWxpZ24obSwgaSk7CisKKwkvKiB2ZXJpZmllciBlbnN1cmVzIG0t
Pm5yX2FyZ3MgPD0gTUFYX0JQRl9GVU5DX0FSR1MgKi8KKwlmb3IgKGkgPSAwLCBucmVncyA9IDA7
IGkgPCBtLT5ucl9hcmdzOyBpKyspIHsKKwkJc2xvdHMgPSAobS0+YXJnX3NpemVbaV0gKyA3KSAv
IDg7CisJCWlmIChucmVncyArIHNsb3RzIDw9IDgpIC8qIHBhc3NlZCB0aHJvdWdoIHJlZ2lzdGVy
ID8gKi8KKwkJCW5yZWdzICs9IHNsb3RzOworCQllbHNlCisJCQlicmVhazsKKwl9CiAKLQlmb3Ig
KGkgPSAwOyBpIDwgbnJlZ3M7IGkrKykgewotCQllbWl0KEE2NF9TVFI2NEkoaSwgQTY0X1NQLCBh
cmdzX29mZiksIGN0eCk7Ci0JCWFyZ3Nfb2ZmICs9IDg7CisJYS0+YXJnc19pbl9yZWdzID0gaTsK
KwlhLT5yZWdzX2Zvcl9hcmdzID0gbnJlZ3M7CisJYS0+b3N0YWNrX2Zvcl9hcmdzID0gMDsKKwor
CS8qIHRoZSByZXN0IGFyZ3VtZW50cyBhcmUgcGFzc2VkIHRocm91Z2ggc3RhY2sgKi8KKwlmb3Ig
KGEtPm9zdGFja19mb3JfYXJncyA9IDAsIGEtPmJzdGFja19mb3JfYXJncyA9IDA7CisJICAgICBp
IDwgbS0+bnJfYXJnczsgaSsrKSB7CisJCXN0YWNrX3Nsb3RzID0gKG0tPmFyZ19zaXplW2ldICsg
NykgLyA4OworCQkvKiBBQVBDUyA2NCBDLjE0OiBhcmd1bWVudHMgcGFzc2VkIG9uIHN0YWNrIG11
c3QgYmUgYWxpZ25lZCB0bworCQkgKiBtYXgoOCwgYXJnX25hdHVyYWxfYWxpZ25tZW50KQorCQkg
Ki8KKwkJYS0+YnN0YWNrX2Zvcl9hcmdzICs9IHN0YWNrX3Nsb3RzICogODsKKwkJYS0+b3N0YWNr
X2Zvcl9hcmdzID0gcm91bmRfdXAoYS0+b3N0YWNrX2Zvcl9hcmdzICsKKwkJCQlzdGFja19zbG90
cyAqIDgsIGEtPmFyZ19hbGlnbltpXSk7CisJfQorfQorCitzdGF0aWMgdm9pZCBjbGVhcl9nYXJi
YWdlKHN0cnVjdCBqaXRfY3R4ICpjdHgsIGludCByZWcsIGludCBlZmZlY3RpdmVfYnl0ZXMpCit7
CisJaWYgKGVmZmVjdGl2ZV9ieXRlcykgeworCQlpbnQgZ2FyYmFnZV9iaXRzID0gNjQgLSA4ICog
ZWZmZWN0aXZlX2J5dGVzOworI2lmZGVmIENPTkZJR19DUFVfQklHX0VORElBTgorCQkvKiBnYXJi
YWdlIGJpdHMgYXJlIGF0IHRoZSByaWdodCBlbmQgKi8KKwkJZW1pdChBNjRfTFNSKDEsIHJlZywg
cmVnLCBnYXJiYWdlX2JpdHMpLCBjdHgpOworCQllbWl0KEE2NF9MU0woMSwgcmVnLCByZWcsIGdh
cmJhZ2VfYml0cyksIGN0eCk7CisjZWxzZQorCQkvKiBnYXJiYWdlIGJpdHMgYXJlIGF0IHRoZSBs
ZWZ0IGVuZCAqLworCQllbWl0KEE2NF9MU0woMSwgcmVnLCByZWcsIGdhcmJhZ2VfYml0cyksIGN0
eCk7CisJCWVtaXQoQTY0X0xTUigxLCByZWcsIHJlZywgZ2FyYmFnZV9iaXRzKSwgY3R4KTsKKyNl
bmRpZgogCX0KIH0KIAotc3RhdGljIHZvaWQgcmVzdG9yZV9hcmdzKHN0cnVjdCBqaXRfY3R4ICpj
dHgsIGludCBhcmdzX29mZiwgaW50IG5yZWdzKQorc3RhdGljIHZvaWQgc2F2ZV9hcmdzKHN0cnVj
dCBqaXRfY3R4ICpjdHgsIGludCBiYXJnc19vZmYsIGludCBvYXJnc19vZmYsCisJCSAgICAgIGNv
bnN0IHN0cnVjdCBidGZfZnVuY19tb2RlbCAqbSwKKwkJICAgICAgY29uc3Qgc3RydWN0IGFyZ19h
dXggKmEsCisJCSAgICAgIGJvb2wgZm9yX2NhbGxfb3JpZ2luKQogewogCWludCBpOworCWludCBy
ZWc7CisJaW50IGRvZmY7CisJaW50IHNvZmY7CisJaW50IHNsb3RzOworCXU4IHRtcCA9IGJwZjJh
NjRbVE1QX1JFR18xXTsKKworCS8qIHN0b3JlIGFyZ3VtZW50cyB0byB0aGUgc3RhY2sgZm9yIHRo
ZSBicGYgcHJvZ3JhbSwgb3IgcmVzdG9yZQorCSAqIGFyZ3VtZW50cyBmcm9tIHN0YWNrIGZvciB0
aGUgb3JpZ2luYWwgZnVuY3Rpb24KKwkgKi8KKwlmb3IgKHJlZyA9IDA7IHJlZyA8IGEtPnJlZ3Nf
Zm9yX2FyZ3M7IHJlZysrKSB7CisJCWVtaXQoZm9yX2NhbGxfb3JpZ2luID8KKwkJICAgICBBNjRf
TERSNjRJKHJlZywgQTY0X1NQLCBiYXJnc19vZmYpIDoKKwkJICAgICBBNjRfU1RSNjRJKHJlZywg
QTY0X1NQLCBiYXJnc19vZmYpLAorCQkgICAgIGN0eCk7CisJCWJhcmdzX29mZiArPSA4OworCX0K
KworCXNvZmYgPSAzMjsgLyogb24gc3RhY2sgYXJndW1lbnRzIHN0YXJ0IGZyb20gRlAgKyAzMiAq
LworCWRvZmYgPSAoZm9yX2NhbGxfb3JpZ2luID8gb2FyZ3Nfb2ZmIDogYmFyZ3Nfb2ZmKTsKKwor
CS8qIHNhdmUgb24gc3RhY2sgYXJndW1lbnRzICovCisJZm9yIChpID0gYS0+YXJnc19pbl9yZWdz
OyBpIDwgbS0+bnJfYXJnczsgaSsrKSB7CisJCXNsb3RzID0gKG0tPmFyZ19zaXplW2ldICsgNykg
LyA4OworCQkvKiBBQVBDUyBDLjE0OiBhZGRpdGlvbmFsIGFyZ3VtZW50cyBvbiBzdGFjayBtdXN0
IGJlCisJCSAqIGFsaWduZWQgb24gbWF4KDgsIGFyZ19uYXR1cmFsX2FsaWdubWVudCkKKwkJICov
CisJCXNvZmYgPSByb3VuZF91cChzb2ZmLCBhLT5hcmdfYWxpZ25baV0pOworCQlpZiAoZm9yX2Nh
bGxfb3JpZ2luKQorCQkJZG9mZiA9ICByb3VuZF91cChkb2ZmLCBhLT5hcmdfYWxpZ25baV0pOwor
CQkvKiB2ZXJpZmllciBlbnN1cmVzIGFyZ19zaXplIDw9IDE2LCBzbyBzbG90cyBlcXVhbHMgMSBv
ciAyICovCisJCXdoaWxlIChzbG90cy0tID4gMCkgeworCQkJZW1pdChBNjRfTERSNjRJKHRtcCwg
QTY0X0ZQLCBzb2ZmKSwgY3R4KTsKKwkJCS8qIGlmIHRoZXJlIGlzIHVudXNlZCBzcGFjZSBpbiB0
aGUgbGFzdCBzbG90LCBjbGVhcgorCQkJICogdGhlIGdhcmJhZ2UgY29udGFpbmVkIGluIHRoZSBz
cGFjZS4KKwkJCSAqLworCQkJaWYgKHNsb3RzID09IDAgJiYgIWZvcl9jYWxsX29yaWdpbikKKwkJ
CQljbGVhcl9nYXJiYWdlKGN0eCwgdG1wLCBtLT5hcmdfc2l6ZVtpXSAlIDgpOworCQkJZW1pdChB
NjRfU1RSNjRJKHRtcCwgQTY0X1NQLCBkb2ZmKSwgY3R4KTsKKwkJCXNvZmYgKz0gODsKKwkJCWRv
ZmYgKz0gODsKKwkJfQorCX0KK30KIAotCWZvciAoaSA9IDA7IGkgPCBucmVnczsgaSsrKSB7Ci0J
CWVtaXQoQTY0X0xEUjY0SShpLCBBNjRfU1AsIGFyZ3Nfb2ZmKSwgY3R4KTsKLQkJYXJnc19vZmYg
Kz0gODsKK3N0YXRpYyB2b2lkIHJlc3RvcmVfYXJncyhzdHJ1Y3Qgaml0X2N0eCAqY3R4LCBpbnQg
YmFyZ3Nfb2ZmLCBpbnQgbnJlZ3MpCit7CisJaW50IHJlZzsKKworCWZvciAocmVnID0gMDsgcmVn
IDwgbnJlZ3M7IHJlZysrKSB7CisJCWVtaXQoQTY0X0xEUjY0SShyZWcsIEE2NF9TUCwgYmFyZ3Nf
b2ZmKSwgY3R4KTsKKwkJYmFyZ3Nfb2ZmICs9IDg7CiAJfQogfQogCkBAIC0yMTk0LDE3ICsyMzEz
LDIxIEBAIHN0YXRpYyBib29sIGlzX3N0cnVjdF9vcHNfdHJhbXAoY29uc3Qgc3RydWN0IGJwZl90
cmFtcF9saW5rcyAqZmVudHJ5X2xpbmtzKQogICovCiBzdGF0aWMgaW50IHByZXBhcmVfdHJhbXBv
bGluZShzdHJ1Y3Qgaml0X2N0eCAqY3R4LCBzdHJ1Y3QgYnBmX3RyYW1wX2ltYWdlICppbSwKIAkJ
CSAgICAgIHN0cnVjdCBicGZfdHJhbXBfbGlua3MgKnRsaW5rcywgdm9pZCAqZnVuY19hZGRyLAot
CQkJICAgICAgaW50IG5yZWdzLCB1MzIgZmxhZ3MpCisJCQkgICAgICBjb25zdCBzdHJ1Y3QgYnRm
X2Z1bmNfbW9kZWwgKm0sCisJCQkgICAgICBjb25zdCBzdHJ1Y3QgYXJnX2F1eCAqYSwKKwkJCSAg
ICAgIHUzMiBmbGFncykKIHsKIAlpbnQgaTsKIAlpbnQgc3RhY2tfc2l6ZTsKIAlpbnQgcmV0YWRk
cl9vZmY7CiAJaW50IHJlZ3Nfb2ZmOwogCWludCByZXR2YWxfb2ZmOwotCWludCBhcmdzX29mZjsK
LQlpbnQgbnJlZ3Nfb2ZmOworCWludCBiYXJnc19vZmY7CisJaW50IG5mdW5jYXJnc19vZmY7CiAJ
aW50IGlwX29mZjsKIAlpbnQgcnVuX2N0eF9vZmY7CisJaW50IG9hcmdzX29mZjsKKwlpbnQgbmZ1
bmNhcmdzOwogCXN0cnVjdCBicGZfdHJhbXBfbGlua3MgKmZlbnRyeSA9ICZ0bGlua3NbQlBGX1RS
QU1QX0ZFTlRSWV07CiAJc3RydWN0IGJwZl90cmFtcF9saW5rcyAqZmV4aXQgPSAmdGxpbmtzW0JQ
Rl9UUkFNUF9GRVhJVF07CiAJc3RydWN0IGJwZl90cmFtcF9saW5rcyAqZm1vZF9yZXQgPSAmdGxp
bmtzW0JQRl9UUkFNUF9NT0RJRllfUkVUVVJOXTsKQEAgLTIyMTMsMzEgKzIzMzYsMzggQEAgc3Rh
dGljIGludCBwcmVwYXJlX3RyYW1wb2xpbmUoc3RydWN0IGppdF9jdHggKmN0eCwgc3RydWN0IGJw
Zl90cmFtcF9pbWFnZSAqaW0sCiAJYm9vbCBpc19zdHJ1Y3Rfb3BzID0gaXNfc3RydWN0X29wc190
cmFtcChmZW50cnkpOwogCiAJLyogdHJhbXBvbGluZSBzdGFjayBsYXlvdXQ6Ci0JICogICAgICAg
ICAgICAgICAgICBbIHBhcmVudCBpcCAgICAgICAgIF0KLQkgKiAgICAgICAgICAgICAgICAgIFsg
RlAgICAgICAgICAgICAgICAgXQotCSAqIFNQICsgcmV0YWRkcl9vZmYgWyBzZWxmIGlwICAgICAg
ICAgICBdCi0JICogICAgICAgICAgICAgICAgICBbIEZQICAgICAgICAgICAgICAgIF0KKwkgKiAg
ICAgICAgICAgICAgICAgICAgWyBwYXJlbnQgaXAgICAgICAgICBdCisJICogICAgICAgICAgICAg
ICAgICAgIFsgRlAgICAgICAgICAgICAgICAgXQorCSAqIFNQICsgcmV0YWRkcl9vZmYgICBbIHNl
bGYgaXAgICAgICAgICAgIF0KKwkgKiAgICAgICAgICAgICAgICAgICAgWyBGUCAgICAgICAgICAg
ICAgICBdCiAJICoKLQkgKiAgICAgICAgICAgICAgICAgIFsgcGFkZGluZyAgICAgICAgICAgXSBh
bGlnbiBTUCB0byBtdWx0aXBsZXMgb2YgMTYKKwkgKiAgICAgICAgICAgICAgICAgICAgWyBwYWRk
aW5nICAgICAgICAgICBdIGFsaWduIFNQIHRvIG11bHRpcGxlcyBvZiAxNgogCSAqCi0JICogICAg
ICAgICAgICAgICAgICBbIHgyMCAgICAgICAgICAgICAgIF0gY2FsbGVlIHNhdmVkIHJlZyB4MjAK
LQkgKiBTUCArIHJlZ3Nfb2ZmICAgIFsgeDE5ICAgICAgICAgICAgICAgXSBjYWxsZWUgc2F2ZWQg
cmVnIHgxOQorCSAqICAgICAgICAgICAgICAgICAgICBbIHgyMCAgICAgICAgICAgICAgIF0gY2Fs
bGVlIHNhdmVkIHJlZyB4MjAKKwkgKiBTUCArIHJlZ3Nfb2ZmICAgICAgWyB4MTkgICAgICAgICAg
ICAgICBdIGNhbGxlZSBzYXZlZCByZWcgeDE5CiAJICoKLQkgKiBTUCArIHJldHZhbF9vZmYgIFsg
cmV0dXJuIHZhbHVlICAgICAgXSBCUEZfVFJBTVBfRl9DQUxMX09SSUcgb3IKLQkgKiAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCUEZfVFJBTVBfRl9SRVRfRkVOVFJZX1JF
VAorCSAqIFNQICsgcmV0dmFsX29mZiAgICBbIHJldHVybiB2YWx1ZSAgICAgIF0gQlBGX1RSQU1Q
X0ZfQ0FMTF9PUklHIG9yCisJICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICBCUEZfVFJBTVBfRl9SRVRfRkVOVFJZX1JFVAorCSAqICAgICAgICAgICAgICAgICAgICBb
IGFyZyByZWcgTiAgICAgICAgIF0KKwkgKiAgICAgICAgICAgICAgICAgICAgWyAuLi4gICAgICAg
ICAgICAgICBdCisJICogU1AgKyBiYXJnc19vZmYgICAgIFsgYXJnIHJlZyAxICAgICAgICAgXSBm
b3IgYnBmCiAJICoKLQkgKiAgICAgICAgICAgICAgICAgIFsgYXJnIHJlZyBOICAgICAgICAgXQot
CSAqICAgICAgICAgICAgICAgICAgWyAuLi4gICAgICAgICAgICAgICBdCi0JICogU1AgKyBhcmdz
X29mZiAgICBbIGFyZyByZWcgMSAgICAgICAgIF0KKwkgKiBTUCArIG5mdW5jYXJnc19vZmYgWyBh
cmcgcmVncyBjb3VudCAgICBdCiAJICoKLQkgKiBTUCArIG5yZWdzX29mZiAgIFsgYXJnIHJlZ3Mg
Y291bnQgICAgXQorCSAqIFNQICsgaXBfb2ZmICAgICAgICBbIHRyYWNlZCBmdW5jdGlvbiAgIF0g
QlBGX1RSQU1QX0ZfSVBfQVJHIGZsYWcKIAkgKgotCSAqIFNQICsgaXBfb2ZmICAgICAgWyB0cmFj
ZWQgZnVuY3Rpb24gICBdIEJQRl9UUkFNUF9GX0lQX0FSRyBmbGFnCisJICogU1AgKyBydW5fY3R4
X29mZiAgIFsgYnBmX3RyYW1wX3J1bl9jdHggXQogCSAqCi0JICogU1AgKyBydW5fY3R4X29mZiBb
IGJwZl90cmFtcF9ydW5fY3R4IF0KKwkgKiAgICAgICAgICAgICAgICAgICAgWyBzdGFjayBhcmcg
TiAgICAgICBdCisJICogICAgICAgICAgICAgICAgICAgIFsgLi4uICAgICAgICAgICAgICAgXQor
CSAqIFNQICsgb2FyZ3Nfb2ZmICAgICBbIHN0YWNrIGFyZyAxICAgICAgIF0gZm9yIG9yaWdpbmFs
IGZ1bmMKIAkgKi8KIAogCXN0YWNrX3NpemUgPSAwOworCW9hcmdzX29mZiA9IHN0YWNrX3NpemU7
CisJaWYgKGZsYWdzICYgQlBGX1RSQU1QX0ZfQ0FMTF9PUklHKQorCQlzdGFja19zaXplICs9ICBh
LT5vc3RhY2tfZm9yX2FyZ3M7CisKIAlydW5fY3R4X29mZiA9IHN0YWNrX3NpemU7CiAJLyogcm9v
bSBmb3IgYnBmX3RyYW1wX3J1bl9jdHggKi8KIAlzdGFja19zaXplICs9IHJvdW5kX3VwKHNpemVv
ZihzdHJ1Y3QgYnBmX3RyYW1wX3J1bl9jdHgpLCA4KTsKQEAgLTIyNDcsMTMgKzIzNzcsMTQgQEAg
c3RhdGljIGludCBwcmVwYXJlX3RyYW1wb2xpbmUoc3RydWN0IGppdF9jdHggKmN0eCwgc3RydWN0
IGJwZl90cmFtcF9pbWFnZSAqaW0sCiAJaWYgKGZsYWdzICYgQlBGX1RSQU1QX0ZfSVBfQVJHKQog
CQlzdGFja19zaXplICs9IDg7CiAKLQlucmVnc19vZmYgPSBzdGFja19zaXplOworCW5mdW5jYXJn
c19vZmYgPSBzdGFja19zaXplOwogCS8qIHJvb20gZm9yIGFyZ3MgY291bnQgKi8KIAlzdGFja19z
aXplICs9IDg7CiAKLQlhcmdzX29mZiA9IHN0YWNrX3NpemU7CisJYmFyZ3Nfb2ZmID0gc3RhY2tf
c2l6ZTsKIAkvKiByb29tIGZvciBhcmdzICovCi0Jc3RhY2tfc2l6ZSArPSBucmVncyAqIDg7CisJ
bmZ1bmNhcmdzID0gYS0+cmVnc19mb3JfYXJncyArIGEtPmJzdGFja19mb3JfYXJncyAvIDg7CisJ
c3RhY2tfc2l6ZSArPSA4ICogbmZ1bmNhcmdzOwogCiAJLyogcm9vbSBmb3IgcmV0dXJuIHZhbHVl
ICovCiAJcmV0dmFsX29mZiA9IHN0YWNrX3NpemU7CkBAIC0yMzAwLDExICsyNDMxLDExIEBAIHN0
YXRpYyBpbnQgcHJlcGFyZV90cmFtcG9saW5lKHN0cnVjdCBqaXRfY3R4ICpjdHgsIHN0cnVjdCBi
cGZfdHJhbXBfaW1hZ2UgKmltLAogCX0KIAogCS8qIHNhdmUgYXJnIHJlZ3MgY291bnQqLwotCWVt
aXQoQTY0X01PVlooMSwgQTY0X1IoMTApLCBucmVncywgMCksIGN0eCk7Ci0JZW1pdChBNjRfU1RS
NjRJKEE2NF9SKDEwKSwgQTY0X1NQLCBucmVnc19vZmYpLCBjdHgpOworCWVtaXQoQTY0X01PVloo
MSwgQTY0X1IoMTApLCBuZnVuY2FyZ3MsIDApLCBjdHgpOworCWVtaXQoQTY0X1NUUjY0SShBNjRf
UigxMCksIEE2NF9TUCwgbmZ1bmNhcmdzX29mZiksIGN0eCk7CiAKLQkvKiBzYXZlIGFyZyByZWdz
ICovCi0Jc2F2ZV9hcmdzKGN0eCwgYXJnc19vZmYsIG5yZWdzKTsKKwkvKiBzYXZlIGFyZ3MgZm9y
IGJwZiAqLworCXNhdmVfYXJncyhjdHgsIGJhcmdzX29mZiwgb2FyZ3Nfb2ZmLCBtLCBhLCBmYWxz
ZSk7CiAKIAkvKiBzYXZlIGNhbGxlZSBzYXZlZCByZWdpc3RlcnMgKi8KIAllbWl0KEE2NF9TVFI2
NEkoQTY0X1IoMTkpLCBBNjRfU1AsIHJlZ3Nfb2ZmKSwgY3R4KTsKQEAgLTIzMjAsNyArMjQ1MSw3
IEBAIHN0YXRpYyBpbnQgcHJlcGFyZV90cmFtcG9saW5lKHN0cnVjdCBqaXRfY3R4ICpjdHgsIHN0
cnVjdCBicGZfdHJhbXBfaW1hZ2UgKmltLAogCX0KIAogCWZvciAoaSA9IDA7IGkgPCBmZW50cnkt
Pm5yX2xpbmtzOyBpKyspCi0JCWludm9rZV9icGZfcHJvZyhjdHgsIGZlbnRyeS0+bGlua3NbaV0s
IGFyZ3Nfb2ZmLAorCQlpbnZva2VfYnBmX3Byb2coY3R4LCBmZW50cnktPmxpbmtzW2ldLCBiYXJn
c19vZmYsCiAJCQkJcmV0dmFsX29mZiwgcnVuX2N0eF9vZmYsCiAJCQkJZmxhZ3MgJiBCUEZfVFJB
TVBfRl9SRVRfRkVOVFJZX1JFVCk7CiAKQEAgLTIzMzAsMTIgKzI0NjEsMTMgQEAgc3RhdGljIGlu
dCBwcmVwYXJlX3RyYW1wb2xpbmUoc3RydWN0IGppdF9jdHggKmN0eCwgc3RydWN0IGJwZl90cmFt
cF9pbWFnZSAqaW0sCiAJCWlmICghYnJhbmNoZXMpCiAJCQlyZXR1cm4gLUVOT01FTTsKIAotCQlp
bnZva2VfYnBmX21vZF9yZXQoY3R4LCBmbW9kX3JldCwgYXJnc19vZmYsIHJldHZhbF9vZmYsCisJ
CWludm9rZV9icGZfbW9kX3JldChjdHgsIGZtb2RfcmV0LCBiYXJnc19vZmYsIHJldHZhbF9vZmYs
CiAJCQkJICAgcnVuX2N0eF9vZmYsIGJyYW5jaGVzKTsKIAl9CiAKIAlpZiAoZmxhZ3MgJiBCUEZf
VFJBTVBfRl9DQUxMX09SSUcpIHsKLQkJcmVzdG9yZV9hcmdzKGN0eCwgYXJnc19vZmYsIG5yZWdz
KTsKKwkJLyogc2F2ZSBhcmdzIGZvciBvcmlnaW5hbCBmdW5jICovCisJCXNhdmVfYXJncyhjdHgs
IGJhcmdzX29mZiwgb2FyZ3Nfb2ZmLCBtLCBhLCB0cnVlKTsKIAkJLyogY2FsbCBvcmlnaW5hbCBm
dW5jICovCiAJCWVtaXQoQTY0X0xEUjY0SShBNjRfUigxMCksIEE2NF9TUCwgcmV0YWRkcl9vZmYp
LCBjdHgpOwogCQllbWl0KEE2NF9BRFIoQTY0X0xSLCBBQVJDSDY0X0lOU05fU0laRSAqIDIpLCBj
dHgpOwpAQCAtMjM1NCw3ICsyNDg2LDcgQEAgc3RhdGljIGludCBwcmVwYXJlX3RyYW1wb2xpbmUo
c3RydWN0IGppdF9jdHggKmN0eCwgc3RydWN0IGJwZl90cmFtcF9pbWFnZSAqaW0sCiAJfQogCiAJ
Zm9yIChpID0gMDsgaSA8IGZleGl0LT5ucl9saW5rczsgaSsrKQotCQlpbnZva2VfYnBmX3Byb2co
Y3R4LCBmZXhpdC0+bGlua3NbaV0sIGFyZ3Nfb2ZmLCByZXR2YWxfb2ZmLAorCQlpbnZva2VfYnBm
X3Byb2coY3R4LCBmZXhpdC0+bGlua3NbaV0sIGJhcmdzX29mZiwgcmV0dmFsX29mZiwKIAkJCQly
dW5fY3R4X29mZiwgZmFsc2UpOwogCiAJaWYgKGZsYWdzICYgQlBGX1RSQU1QX0ZfQ0FMTF9PUklH
KSB7CkBAIC0yMzY4LDcgKzI1MDAsNyBAQCBzdGF0aWMgaW50IHByZXBhcmVfdHJhbXBvbGluZShz
dHJ1Y3Qgaml0X2N0eCAqY3R4LCBzdHJ1Y3QgYnBmX3RyYW1wX2ltYWdlICppbSwKIAl9CiAKIAlp
ZiAoZmxhZ3MgJiBCUEZfVFJBTVBfRl9SRVNUT1JFX1JFR1MpCi0JCXJlc3RvcmVfYXJncyhjdHgs
IGFyZ3Nfb2ZmLCBucmVncyk7CisJCXJlc3RvcmVfYXJncyhjdHgsIGJhcmdzX29mZiwgYS0+cmVn
c19mb3JfYXJncyk7CiAKIAkvKiByZXN0b3JlIGNhbGxlZSBzYXZlZCByZWdpc3RlciB4MTkgYW5k
IHgyMCAqLwogCWVtaXQoQTY0X0xEUjY0SShBNjRfUigxOSksIEE2NF9TUCwgcmVnc19vZmYpLCBj
dHgpOwpAQCAtMjQyOCwxNCArMjU2MCwxMyBAQCBpbnQgYXJjaF9icGZfdHJhbXBvbGluZV9zaXpl
KGNvbnN0IHN0cnVjdCBidGZfZnVuY19tb2RlbCAqbSwgdTMyIGZsYWdzLAogCQkuaWR4ID0gMCwK
IAl9OwogCXN0cnVjdCBicGZfdHJhbXBfaW1hZ2UgaW07CisJc3RydWN0IGFyZ19hdXggIGFhdXg7
CiAJaW50IG5yZWdzLCByZXQ7CiAKIAlucmVncyA9IGJ0Zl9mdW5jX21vZGVsX25yZWdzKG0pOwot
CS8qIHRoZSBmaXJzdCA4IHJlZ2lzdGVycyBhcmUgdXNlZCBmb3IgYXJndW1lbnRzICovCi0JaWYg
KG5yZWdzID4gOCkKLQkJcmV0dXJuIC1FTk9UU1VQUDsKIAotCXJldCA9IHByZXBhcmVfdHJhbXBv
bGluZSgmY3R4LCAmaW0sIHRsaW5rcywgZnVuY19hZGRyLCBucmVncywgZmxhZ3MpOworCWNhbGNf
YXJnX2F1eChtLCAmYWF1eCk7CisJcmV0ID0gcHJlcGFyZV90cmFtcG9saW5lKCZjdHgsICZpbSwg
dGxpbmtzLCBmdW5jX2FkZHIsIG0sICZhYXV4LCBmbGFncyk7CiAJaWYgKHJldCA8IDApCiAJCXJl
dHVybiByZXQ7CiAKQEAgLTI0NjIsOSArMjU5MywxMCBAQCBpbnQgYXJjaF9wcmVwYXJlX2JwZl90
cmFtcG9saW5lKHN0cnVjdCBicGZfdHJhbXBfaW1hZ2UgKmltLCB2b2lkICpyb19pbWFnZSwKIAkJ
CQl1MzIgZmxhZ3MsIHN0cnVjdCBicGZfdHJhbXBfbGlua3MgKnRsaW5rcywKIAkJCQl2b2lkICpm
dW5jX2FkZHIpCiB7Ci0JaW50IHJldCwgbnJlZ3M7Ci0Jdm9pZCAqaW1hZ2UsICp0bXA7CiAJdTMy
IHNpemUgPSByb19pbWFnZV9lbmQgLSByb19pbWFnZTsKKwlzdHJ1Y3QgYXJnX2F1eCBhYXV4Owor
CXZvaWQgKmltYWdlLCAqdG1wOworCWludCByZXQ7CiAKIAkvKiBpbWFnZSBkb2Vzbid0IG5lZWQg
dG8gYmUgaW4gbW9kdWxlIG1lbW9yeSByYW5nZSwgc28gd2UgY2FuCiAJICogdXNlIGt2bWFsbG9j
LgpAQCAtMjQ4MCwxMyArMjYxMiwxMCBAQCBpbnQgYXJjaF9wcmVwYXJlX2JwZl90cmFtcG9saW5l
KHN0cnVjdCBicGZfdHJhbXBfaW1hZ2UgKmltLCB2b2lkICpyb19pbWFnZSwKIAkJLndyaXRlID0g
dHJ1ZSwKIAl9OwogCi0JbnJlZ3MgPSBidGZfZnVuY19tb2RlbF9ucmVncyhtKTsKLQkvKiB0aGUg
Zmlyc3QgOCByZWdpc3RlcnMgYXJlIHVzZWQgZm9yIGFyZ3VtZW50cyAqLwotCWlmIChucmVncyA+
IDgpCi0JCXJldHVybiAtRU5PVFNVUFA7CiAKIAlqaXRfZmlsbF9ob2xlKGltYWdlLCAodW5zaWdu
ZWQgaW50KShyb19pbWFnZV9lbmQgLSByb19pbWFnZSkpOwotCXJldCA9IHByZXBhcmVfdHJhbXBv
bGluZSgmY3R4LCBpbSwgdGxpbmtzLCBmdW5jX2FkZHIsIG5yZWdzLCBmbGFncyk7CisJY2FsY19h
cmdfYXV4KG0sICZhYXV4KTsKKwlyZXQgPSBwcmVwYXJlX3RyYW1wb2xpbmUoJmN0eCwgaW0sIHRs
aW5rcywgZnVuY19hZGRyLCBtLCAmYWF1eCwgZmxhZ3MpOwogCiAJaWYgKHJldCA+IDAgJiYgdmFs
aWRhdGVfY29kZSgmY3R4KSA8IDApIHsKIAkJcmV0ID0gLUVJTlZBTDsKCi0tIAoyLjQ5LjAKCl9f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCkxpbnV4LXN0bTMy
IG1haWxpbmcgbGlzdApMaW51eC1zdG0zMkBzdC1tZC1tYWlsbWFuLnN0b3JtcmVwbHkuY29tCmh0
dHBzOi8vc3QtbWQtbWFpbG1hbi5zdG9ybXJlcGx5LmNvbS9tYWlsbWFuL2xpc3RpbmZvL2xpbnV4
LXN0bTMyCg==
