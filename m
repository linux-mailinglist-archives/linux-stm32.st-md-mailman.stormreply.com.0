Return-Path: <linux-stm32-bounces@st-md-mailman.stormreply.com>
X-Original-To: lists+linux-stm32@lfdr.de
Delivered-To: lists+linux-stm32@lfdr.de
Received: from stm-ict-prod-mailman-01.stormreply.prv (st-md-mailman.stormreply.com [52.209.6.89])
	by mail.lfdr.de (Postfix) with ESMTPS id A8DCFA666D1
	for <lists+linux-stm32@lfdr.de>; Tue, 18 Mar 2025 04:09:46 +0100 (CET)
Received: from ip-172-31-3-47.eu-west-1.compute.internal (localhost [127.0.0.1])
	by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTP id 68AFBC78F6D;
	Tue, 18 Mar 2025 03:09:46 +0000 (UTC)
Received: from mgamail.intel.com (mgamail.intel.com [198.175.65.13])
 (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTPS id 803A4C78F67
 for <linux-stm32@st-md-mailman.stormreply.com>;
 Tue, 18 Mar 2025 03:09:44 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
 d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
 t=1742267384; x=1773803384;
 h=from:to:subject:date:message-id:in-reply-to:references:
 mime-version:content-transfer-encoding;
 bh=cYjUQVimiy+9d813+y2IjcrGqJtwx1brCToHd+IICi0=;
 b=YZzr7sN2lvDH3TH4KUaU10BjwSPgW9rP4rPtKhED4DBsWgdxNc9ZXLHh
 iKUZtRxE5JugaIgGiD6gyMaXMJsNvSHiuxPZcD0aAozO/LPDnVrufipIl
 gF0IzaGtL9xs+B8a2vby7TKBMT51+N11MCBR0quth1XXsphzETFVe7Y8I
 S7uBApWVsvfszwFoAj2hUH1eZZm6VXu6coXF1xVN728kBgWgxaW1EJlLX
 DAm6NJ0t+NmciHwFPX3FfZOawhzcaRczCvpWgqf0oaIsVPdrisR7lYVqt
 /OMxQnLknC/348+jzxYmn2eGoaCP4jtiCriNqpp6C48zlxG5/tipxacpW Q==;
X-CSE-ConnectionGUID: 6Rtd7gHNQRqFs3Kr3+/q3g==
X-CSE-MsgGUID: OS1PdoKLQDmsRWT2xAPkLw==
X-IronPort-AV: E=McAfee;i="6700,10204,11376"; a="54383157"
X-IronPort-AV: E=Sophos;i="6.14,255,1736841600"; d="scan'208";a="54383157"
Received: from fmviesa003.fm.intel.com ([10.60.135.143])
 by orvoesa105.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384;
 17 Mar 2025 20:09:42 -0700
X-CSE-ConnectionGUID: ZQ5XNG24RY+625FGj//3Rw==
X-CSE-MsgGUID: +pFUrcaaRiWAVkf1xmA5yg==
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="6.14,255,1736841600"; d="scan'208";a="126313907"
Received: from mohdfai2-ilbpg12-1.png.intel.com ([10.88.227.73])
 by fmviesa003.fm.intel.com with ESMTP; 17 Mar 2025 20:09:34 -0700
From: Faizal Rahim <faizal.abdul.rahim@linux.intel.com>
To: Tony Nguyen <anthony.l.nguyen@intel.com>,
 Przemek Kitszel <przemyslaw.kitszel@intel.com>,
 Andrew Lunn <andrew+netdev@lunn.ch>,
 "David S . Miller" <davem@davemloft.net>,
 Eric Dumazet <edumazet@google.com>, Jakub Kicinski <kuba@kernel.org>,
 Paolo Abeni <pabeni@redhat.com>,
 Maxime Coquelin <mcoquelin.stm32@gmail.com>,
 Alexandre Torgue <alexandre.torgue@foss.st.com>,
 Simon Horman <horms@kernel.org>, Vladimir Oltean <vladimir.oltean@nxp.com>,
 Russell King <linux@armlinux.org.uk>, Alexei Starovoitov <ast@kernel.org>,
 Daniel Borkmann <daniel@iogearbox.net>,
 Jesper Dangaard Brouer <hawk@kernel.org>,
 John Fastabend <john.fastabend@gmail.com>, Furong Xu <0x1207@gmail.com>,
 Choong Yong Liang <yong.liang.choong@linux.intel.com>,
 Russell King <rmk+kernel@armlinux.org.uk>,
 Hariprasad Kelam <hkelam@marvell.com>,
 Xiaolei Wang <xiaolei.wang@windriver.com>,
 Suraj Jaiswal <quic_jsuraj@quicinc.com>,
 Kory Maincent <kory.maincent@bootlin.com>, Gal Pressman <gal@nvidia.com>,
 Jesper Nilsson <jesper.nilsson@axis.com>,
 linux-arm-kernel@lists.infradead.org, netdev@vger.kernel.org,
 linux-kernel@vger.kernel.org, bpf@vger.kernel.org,
 intel-wired-lan@lists.osuosl.org, linux-stm32@st-md-mailman.stormreply.com,
 Chwee-Lin Choong <chwee.lin.choong@intel.com>,
 Vinicius Costa Gomes <vinicius.gomes@intel.com>,
 Faizal Rahim <faizal.abdul.rahim@linux.intel.com>,
 Kunihiko Hayashi <hayashi.kunihiko@socionext.com>,
 Serge Semin <fancer.lancer@gmail.com>
Date: Mon, 17 Mar 2025 23:07:38 -0400
Message-Id: <20250318030742.2567080-11-faizal.abdul.rahim@linux.intel.com>
X-Mailer: git-send-email 2.34.1
In-Reply-To: <20250318030742.2567080-1-faizal.abdul.rahim@linux.intel.com>
References: <20250318030742.2567080-1-faizal.abdul.rahim@linux.intel.com>
MIME-Version: 1.0
Subject: [Linux-stm32] [PATCH iwl-next v10 10/14] igc: add support for frame
	preemption verification
X-BeenThere: linux-stm32@st-md-mailman.stormreply.com
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: <linux-stm32.st-md-mailman.stormreply.com>
List-Unsubscribe: <https://st-md-mailman.stormreply.com/mailman/options/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=unsubscribe>
List-Archive: <http://st-md-mailman.stormreply.com/pipermail/linux-stm32/>
List-Post: <mailto:linux-stm32@st-md-mailman.stormreply.com>
List-Help: <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=help>
List-Subscribe: <https://st-md-mailman.stormreply.com/mailman/listinfo/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: linux-stm32-bounces@st-md-mailman.stormreply.com
Sender: "Linux-stm32" <linux-stm32-bounces@st-md-mailman.stormreply.com>

VGhpcyBwYXRjaCBpbXBsZW1lbnRzIHRoZSAiZXRodG9vbCAtLXNldC1tbSIgY2FsbGJhY2sgdG8g
dHJpZ2dlciB0aGUKZnJhbWUgcHJlZW1wdGlvbiB2ZXJpZmljYXRpb24gaGFuZHNoYWtlLgoKVXNl
cyB0aGUgTUFDIE1lcmdlIFNvZnR3YXJlIFZlcmlmaWNhdGlvbiAobW1zdikgbWVjaGFuaXNtIGlu
IGV0aHRvb2wKdG8gcGVyZm9ybSB0aGUgdmVyaWZpY2F0aW9uIGhhbmRzaGFrZSBmb3IgaWdjLgpU
aGUgc3RydWN0dXJlIGZwZS5tbXN2IGlzIHNldCBieSBtbXN2IGluIGV0aHRvb2wgYW5kIHNob3Vs
ZCByZW1haW4KcmVhZC1vbmx5IGZvciB0aGUgZHJpdmVyLgoKT3RoZXIgbW1zdiBjYWxsYmFja3M6
CmEpIGNvbmZpZ3VyZV90eCgpIC0+IG5vdCB1c2VkIHlldCBhdCB0aGlzIHBvaW50CiAgIC0gaWdj
IGxhY2tzIHJlZ2lzdGVycyB0byBjb25maWd1cmUgRlBFIGluIHRoZSB0cmFuc21pdCBkaXJlY3Rp
b24sIHNvCiAgICAgdGhpcyBBUEkgaXMgbm90IHV0aWxpemVkIGZvciBub3cuIFdoZW4gaWdjIHN1
cHBvcnRzIHByZWVtcHRpYmxlIHF1ZXVlLAogICAgIGRyaXZlciB3aWxsIHVzZSB0aGlzIEFQSSB0
byBtYW5hZ2UgaXRzIGNvbmZpZ3VyYXRpb24uCgpiKSBjb25maWd1cmVfcG1hYygpIC0+IG5vdCB1
c2VkCiAgIC0gdGhpcyBjYWxsYmFjayBkeW5hbWljYWxseSBjb250cm9scyBwbWFjX2VuYWJsZWQg
YXQgcnVudGltZS4gRm9yCiAgICAgZXhhbXBsZSwgbW1zdiBjYWxscyBjb25maWd1cmVfcG1hYygp
IGFuZCBkaXNhYmxlcyBwbWFjX2VuYWJsZWQgd2hlbgogICAgIHRoZSBsaW5rIHBhcnRuZXIgZ29l
cyBkb3duLCBldmVuIGlmIHRoZSB1c2VyIHByZXZpb3VzbHkgZW5hYmxlZCBpdC4KICAgICBUaGUg
aW50ZW50aW9uIGlzIHRvIHNhdmUgcG93ZXIgYnV0IGl0IGlzIG5vdCBmZWFzaWJsZSBpbiBpZ2MK
ICAgICBiZWNhdXNlIGl0IGNhdXNlcyBhbiBlbmRsZXNzIGFkYXB0ZXIgcmVzZXQgbG9vcDoKCiAg
IDEpIEJvYXJkIEEgYW5kIEJvYXJkIEIgY29tcGxldGUgdGhlIHZlcmlmaWNhdGlvbiBoYW5kc2hh
a2UuIFR4IG1vZGUKICAgICAgcmVnaXN0ZXIgZm9yIGJvdGggYm9hcmRzIGFyZSBpbiBUU04gbW9k
ZS4KICAgMikgQm9hcmQgQiBsaW5rIGdvZXMgZG93bi4KCiAgIE9uIEJvYXJkIEE6CiAgIDMpIG1t
c3YgY2FsbHMgY29uZmlndXJlX3BtYWMoKSB3aXRoIHBtYWNfZW5hYmxlZCA9IGZhbHNlLgogICA0
KSBjb25maWd1cmVfcG1hYygpIGluIGlnYyB1cGRhdGVzIGEgbmV3IGZpZWxkIGJhc2VkIG9uIHBt
YWNfZW5hYmxlZC4KICAgICAgRHJpdmVyIHVzZXMgdGhpcyBmaWVsZCBpbiBpZ2NfdHNuX25ld19m
bGFncygpIHRvIGluZGljYXRlIHRoYXQgdGhlCiAgICAgIHVzZXIgZW5hYmxlZC9kaXNhYmxlZCBG
UEUuCiAgIDUpIGNvbmZpZ3VyZV9wbWFjKCkgaW4gaWdjIGNhbGxzIGlnY190c25fb2ZmbG9hZF9h
cHBseSgpIHRvIGNoZWNrCiAgICAgIHdoZXRoZXIgYW4gYWRhcHRlciByZXNldCBpcyBuZWVkZWQu
IENhbGxzIGV4aXN0aW5nIGxvZ2ljIGluCiAgICAgIGlnY190c25fd2lsbF90eF9tb2RlX2NoYW5n
ZSgpIGFuZCBpZ2NfdHNuX25ld19mbGFncygpLgogICA2KSBTaW5jZSBwbWFjX2VuYWJsZWQgaXMg
bm93IGRpc2FibGVkIGFuZCBubyBvdGhlciBUU04gZmVhdHVyZSBpcwogICAgICBhY3RpdmUsIGln
Y190c25fd2lsbF90eF9tb2RlX2NoYW5nZSgpIGV2YWx1YXRlcyB0byB0cnVlIGJlY2F1c2UgVHgK
ICAgICAgbW9kZSB3aWxsIHN3aXRjaCBmcm9tIFRTTiB0byBMZWdhY3kuCiAgIDcpIERyaXZlciBy
ZXNldHMgdGhlIGFkYXB0ZXIuCiAgIDgpIFJlZ2lzdGVycyBhcmUgc2V0LCBhbmQgVHggbW9kZSBz
d2l0Y2hlcyB0byBMZWdhY3kuCiAgIDkpIFdoZW4gbGluayBwYXJ0bmVyIGlzIHVwLCBzdGVwcyAz
4oCTOCByZXBlYXQsIGJ1dCB0aGlzIHRpbWUgd2l0aAogICAgICBwbWFjX2VuYWJsZWQgPSB0cnVl
LCByZWFjdGl2YXRpbmcgVFNOLgogICAgICBpZ2NfdHNuX3dpbGxfdHhfbW9kZV9jaGFuZ2UoKSBl
dmFsdWF0ZXMgdG8gdHJ1ZSBhZ2Fpbiwgc2luY2UgVHgKICAgICAgbW9kZSB3aWxsIHN3aXRjaCBm
cm9tIExlZ2FjeSB0byBUU04uCiAgMTApIERyaXZlciByZXNldHMgdGhlIGFkYXB0ZXIuCiAgMTEp
IEFkYXB0ZXIgcmVzZXQgY29tcGxldGVzLCByZWdpc3RlcnMgYXJlIHNldCwgYW5kIFR4IG1vZGUg
c3dpdGNoZXMgdG8KICAgICAgVFNOLgoKICBPbiBCb2FyZCBCOgogIDEyKSBBZGFwdGVyIHJlc2V0
IG9uIEJvYXJkIEEgYXQgc3RlcCAxMCBjYXVzZXMgaXQgdG8gZGV0ZWN0IGl0cyBsaW5rCiAgICAg
IHBhcnRuZXIgYXMgZG93bi4KICAxMykgUmVwZWF0cyBzdGVwcyAz4oCTOC4KICAxNCkgT25jZSBy
ZXNldCBhZGFwdGVyIG9uIEJvYXJkIEEgaXMgY29tcGxldGVkIGF0IHN0ZXAgMTEsIGl0IGRldGVj
dHMKICAgICAgaXRzIGxpbmsgcGFydG5lciBhcyB1cC4KICAxNSkgUmVwZWF0cyBzdGVwcyA54oCT
MTEuCgogICAtIHRoaXMgY3ljbGUgcmVwZWF0cyBpbmRlZmluaXRlbHkuIFRvIGF2b2lkIHRoaXMg
aXNzdWUsIGlnYyBvbmx5IHVzZXMKICAgICBtbXN2LnBtYWNfZW5hYmxlZCB0byB0cmFjayB3aGV0
aGVyIEZQRSBpcyBlbmFibGVkIG9yIGRpc2FibGVkLgoKQ28tZGV2ZWxvcGVkLWJ5OiBWaW5pY2l1
cyBDb3N0YSBHb21lcyA8dmluaWNpdXMuZ29tZXNAaW50ZWwuY29tPgpTaWduZWQtb2ZmLWJ5OiBW
aW5pY2l1cyBDb3N0YSBHb21lcyA8dmluaWNpdXMuZ29tZXNAaW50ZWwuY29tPgpDby1kZXZlbG9w
ZWQtYnk6IENob29uZyBZb25nIExpYW5nIDx5b25nLmxpYW5nLmNob29uZ0BsaW51eC5pbnRlbC5j
b20+ClNpZ25lZC1vZmYtYnk6IENob29uZyBZb25nIExpYW5nIDx5b25nLmxpYW5nLmNob29uZ0Bs
aW51eC5pbnRlbC5jb20+CkNvLWRldmVsb3BlZC1ieTogQ2h3ZWUtTGluIENob29uZyA8Y2h3ZWUu
bGluLmNob29uZ0BpbnRlbC5jb20+ClNpZ25lZC1vZmYtYnk6IENod2VlLUxpbiBDaG9vbmcgPGNo
d2VlLmxpbi5jaG9vbmdAaW50ZWwuY29tPgpSZXZpZXdlZC1ieTogVmxhZGltaXIgT2x0ZWFuIDx2
bGFkaW1pci5vbHRlYW5AbnhwLmNvbT4KU2lnbmVkLW9mZi1ieTogRmFpemFsIFJhaGltIDxmYWl6
YWwuYWJkdWwucmFoaW1AbGludXguaW50ZWwuY29tPgotLS0KIGRyaXZlcnMvbmV0L2V0aGVybmV0
L2ludGVsL0tjb25maWcgICAgICAgICAgIHwgICAxICsKIGRyaXZlcnMvbmV0L2V0aGVybmV0L2lu
dGVsL2lnYy9pZ2MuaCAgICAgICAgIHwgIDEyICstCiBkcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRl
bC9pZ2MvaWdjX2Jhc2UuaCAgICB8ICAgMSArCiBkcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9p
Z2MvaWdjX2RlZmluZXMuaCB8ICAgOCArLQogZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdj
L2lnY19ldGh0b29sLmMgfCAgMjEgKysrCiBkcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2Mv
aWdjX21haW4uYyAgICB8ICA1MiArKysrKystCiBkcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9p
Z2MvaWdjX3Rzbi5jICAgICB8IDE0NiArKysrKysrKysrKysrKysrKystCiBkcml2ZXJzL25ldC9l
dGhlcm5ldC9pbnRlbC9pZ2MvaWdjX3Rzbi5oICAgICB8ICA1MCArKysrKysrCiA4IGZpbGVzIGNo
YW5nZWQsIDI4NiBpbnNlcnRpb25zKCspLCA1IGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL2Ry
aXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL0tjb25maWcgYi9kcml2ZXJzL25ldC9ldGhlcm5ldC9p
bnRlbC9LY29uZmlnCmluZGV4IDE2NDBkMmYyNzgzMy4uOTA2ZTBkYWFhMmIwIDEwMDY0NAotLS0g
YS9kcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9LY29uZmlnCisrKyBiL2RyaXZlcnMvbmV0L2V0
aGVybmV0L2ludGVsL0tjb25maWcKQEAgLTM2Nyw2ICszNjcsNyBAQCBjb25maWcgSUdDCiAJZGVm
YXVsdCBuCiAJZGVwZW5kcyBvbiBQQ0kKIAlkZXBlbmRzIG9uIFBUUF8xNTg4X0NMT0NLX09QVElP
TkFMCisJZGVwZW5kcyBvbiBFVEhUT09MX05FVExJTksKIAloZWxwCiAJICBUaGlzIGRyaXZlciBz
dXBwb3J0cyBJbnRlbChSKSBFdGhlcm5ldCBDb250cm9sbGVyIEkyMjUtTE0vSTIyNS1WCiAJICBm
YW1pbHkgb2YgYWRhcHRlcnMuCmRpZmYgLS1naXQgYS9kcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRl
bC9pZ2MvaWdjLmggYi9kcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2MvaWdjLmgKaW5kZXgg
YmE3YzU1ZDJkYzg1Li5kOTcwOTY4ZjMyMzMgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvbmV0L2V0aGVy
bmV0L2ludGVsL2lnYy9pZ2MuaAorKysgYi9kcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2Mv
aWdjLmgKQEAgLTQwLDYgKzQwLDEwIEBAIHZvaWQgaWdjX2V0aHRvb2xfc2V0X29wcyhzdHJ1Y3Qg
bmV0X2RldmljZSAqKTsKIAogI2RlZmluZSBJR0NfTUFYX1RYX1RTVEFNUF9SRUdTCQk0CiAKK3N0
cnVjdCBpZ2NfZnBlX3QgeworCXN0cnVjdCBldGh0b29sX21tc3YgbW1zdjsKK307CisKIGVudW0g
aWdjX21hY19maWx0ZXJfdHlwZSB7CiAJSUdDX01BQ19GSUxURVJfVFlQRV9EU1QgPSAwLAogCUlH
Q19NQUNfRklMVEVSX1RZUEVfU1JDCkBAIC0zMzIsNiArMzM2LDggQEAgc3RydWN0IGlnY19hZGFw
dGVyIHsKIAkJc3RydWN0IHRpbWVzcGVjNjQgcGVyaW9kOwogCX0gcGVyb3V0W0lHQ19OX1BFUk9V
VF07CiAKKwlzdHJ1Y3QgaWdjX2ZwZV90IGZwZTsKKwogCS8qIExFRHMgKi8KIAlzdHJ1Y3QgbXV0
ZXggbGVkX211dGV4OwogCXN0cnVjdCBpZ2NfbGVkX2NsYXNzZGV2ICpsZWRzOwpAQCAtMzg5LDEw
ICszOTUsMTEgQEAgZXh0ZXJuIGNoYXIgaWdjX2RyaXZlcl9uYW1lW107CiAjZGVmaW5lIElHQ19G
TEFHX1RTTl9RQlZfRU5BQkxFRAlCSVQoMTcpCiAjZGVmaW5lIElHQ19GTEFHX1RTTl9RQVZfRU5B
QkxFRAlCSVQoMTgpCiAjZGVmaW5lIElHQ19GTEFHX1RTTl9MRUdBQ1lfRU5BQkxFRAlCSVQoMTkp
CisjZGVmaW5lIElHQ19GTEFHX1RTTl9QUkVFTVBUX0VOQUJMRUQJQklUKDIwKQogCiAjZGVmaW5l
IElHQ19GTEFHX1RTTl9BTllfRU5BQkxFRAkJCQlcCiAJKElHQ19GTEFHX1RTTl9RQlZfRU5BQkxF
RCB8IElHQ19GTEFHX1RTTl9RQVZfRU5BQkxFRCB8CVwKLQkgSUdDX0ZMQUdfVFNOX0xFR0FDWV9F
TkFCTEVEKQorCSBJR0NfRkxBR19UU05fTEVHQUNZX0VOQUJMRUQgfCBJR0NfRkxBR19UU05fUFJF
RU1QVF9FTkFCTEVEKQogCiAjZGVmaW5lIElHQ19GTEFHX1JTU19GSUVMRF9JUFY0X1VEUAlCSVQo
NikKICNkZWZpbmUgSUdDX0ZMQUdfUlNTX0ZJRUxEX0lQVjZfVURQCUJJVCg3KQpAQCAtNzM3LDcg
Kzc0NCwxMCBAQCBzdHJ1Y3QgaWdjX25mY19ydWxlICppZ2NfZ2V0X25mY19ydWxlKHN0cnVjdCBp
Z2NfYWRhcHRlciAqYWRhcHRlciwKIAkJCQkgICAgICB1MzIgbG9jYXRpb24pOwogaW50IGlnY19h
ZGRfbmZjX3J1bGUoc3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVyLCBzdHJ1Y3QgaWdjX25mY19y
dWxlICpydWxlKTsKIHZvaWQgaWdjX2RlbF9uZmNfcnVsZShzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFk
YXB0ZXIsIHN0cnVjdCBpZ2NfbmZjX3J1bGUgKnJ1bGUpOwordm9pZCBpZ2NfZGlzYWJsZV9lbXB0
eV9hZGRyX3JlY3Yoc3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVyKTsKK2ludCBpZ2NfZW5hYmxl
X2VtcHR5X2FkZHJfcmVjdihzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIpOwogc3RydWN0IGln
Y19yaW5nICppZ2NfZ2V0X3R4X3Jpbmcoc3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVyLCBpbnQg
Y3B1KTsKK3ZvaWQgaWdjX2ZsdXNoX3R4X2Rlc2NyaXB0b3JzKHN0cnVjdCBpZ2NfcmluZyAqcmlu
Zyk7CiB2b2lkIGlnY19wdHBfaW5pdChzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIpOwogdm9p
ZCBpZ2NfcHRwX3Jlc2V0KHN0cnVjdCBpZ2NfYWRhcHRlciAqYWRhcHRlcik7CiB2b2lkIGlnY19w
dHBfc3VzcGVuZChzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIpOwpkaWZmIC0tZ2l0IGEvZHJp
dmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY19iYXNlLmggYi9kcml2ZXJzL25ldC9ldGhl
cm5ldC9pbnRlbC9pZ2MvaWdjX2Jhc2UuaAppbmRleCBiZjhjZGZiYmE5ZmYuLjYzMjBlYWJiNzJm
ZSAxMDA2NDQKLS0tIGEvZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY19iYXNlLmgK
KysrIGIvZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY19iYXNlLmgKQEAgLTQ5LDYg
KzQ5LDcgQEAgc3RydWN0IGlnY19hZHZfdHhfY29udGV4dF9kZXNjIHsKICNkZWZpbmUgSUdDX0FE
VlRYRF9EQ01EX0RFWFQJMHgyMDAwMDAwMCAvKiBEZXNjcmlwdG9yIGV4dGVuc2lvbiAoMT1BZHYp
ICovCiAjZGVmaW5lIElHQ19BRFZUWERfRENNRF9WTEUJMHg0MDAwMDAwMCAvKiBWTEFOIHBrdCBl
bmFibGUgKi8KICNkZWZpbmUgSUdDX0FEVlRYRF9EQ01EX1RTRQkweDgwMDAwMDAwIC8qIFRDUCBT
ZWcgZW5hYmxlICovCisjZGVmaW5lIElHQ19BRFZUWERfUEFZTEVOX01BU0sJMFhGRkZGQzAwMCAv
KiBBZHYgZGVzYyBQQVlMRU4gbWFzayAqLwogI2RlZmluZSBJR0NfQURWVFhEX1BBWUxFTl9TSElG
VAkxNCAvKiBBZHYgZGVzYyBQQVlMRU4gc2hpZnQgKi8KIAogI2RlZmluZSBJR0NfUkFSX0VOVFJJ
RVMJCTE2CmRpZmYgLS1naXQgYS9kcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2MvaWdjX2Rl
ZmluZXMuaCBiL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfZGVmaW5lcy5oCmlu
ZGV4IGQ3NTNhOGVjMzZhZS4uNTQyYzdjODgwMmEwIDEwMDY0NAotLS0gYS9kcml2ZXJzL25ldC9l
dGhlcm5ldC9pbnRlbC9pZ2MvaWdjX2RlZmluZXMuaAorKysgYi9kcml2ZXJzL25ldC9ldGhlcm5l
dC9pbnRlbC9pZ2MvaWdjX2RlZmluZXMuaApAQCAtMzA4LDYgKzMwOCw4IEBACiAjZGVmaW5lIElH
Q19UWERfRFRZUF9DCQkweDAwMDAwMDAwIC8qIENvbnRleHQgRGVzY3JpcHRvciAqLwogI2RlZmlu
ZSBJR0NfVFhEX1BPUFRTX0lYU00JMHgwMSAgICAgICAvKiBJbnNlcnQgSVAgY2hlY2tzdW0gKi8K
ICNkZWZpbmUgSUdDX1RYRF9QT1BUU19UWFNNCTB4MDIgICAgICAgLyogSW5zZXJ0IFRDUC9VRFAg
Y2hlY2tzdW0gKi8KKyNkZWZpbmUgSUdDX1RYRF9QT1BUU19TTURfTUFTSwkweDMwMDAgICAgIC8q
IEluZGljYXRlcyB3aGV0aGVyIGl0J3MgU01ELVYgb3IgU01ELVIgKi8KKwogI2RlZmluZSBJR0Nf
VFhEX0NNRF9FT1AJCTB4MDEwMDAwMDAgLyogRW5kIG9mIFBhY2tldCAqLwogI2RlZmluZSBJR0Nf
VFhEX0NNRF9JQwkJMHgwNDAwMDAwMCAvKiBJbnNlcnQgQ2hlY2tzdW0gKi8KICNkZWZpbmUgSUdD
X1RYRF9DTURfREVYVAkweDIwMDAwMDAwIC8qIERlc2MgZXh0ZW5zaW9uICgwID0gbGVnYWN5KSAq
LwpAQCAtMzYzLDYgKzM2NSw4IEBACiAjZGVmaW5lIElHQ19TUlJDVExfVElNRVIwU0VMKHRpbWVy
KQkoKCh0aW1lcikgJiAweDMpIDw8IDE3KQogCiAvKiBSZWNlaXZlIERlc2NyaXB0b3IgYml0IGRl
ZmluaXRpb25zICovCisjZGVmaW5lIElHQ19SWERfU1RBVF9TTURfVFlQRV9WCTB4MDEJLyogU01E
LVYgUGFja2V0ICovCisjZGVmaW5lIElHQ19SWERfU1RBVF9TTURfVFlQRV9SCTB4MDIJLyogU01E
LVIgUGFja2V0ICovCiAjZGVmaW5lIElHQ19SWERfU1RBVF9FT1AJMHgwMgkvKiBFbmQgb2YgUGFj
a2V0ICovCiAjZGVmaW5lIElHQ19SWERfU1RBVF9JWFNNCTB4MDQJLyogSWdub3JlIGNoZWNrc3Vt
ICovCiAjZGVmaW5lIElHQ19SWERfU1RBVF9VRFBDUwkweDEwCS8qIFVEUCB4c3VtIGNhbGN1bGF0
ZWQgKi8KQEAgLTM3Miw3ICszNzYsOCBAQAogI2RlZmluZSBJR0NfUlhERVhUX1NUQVRFUlJfTEIJ
MHgwMDA0MDAwMAogCiAvKiBBZHZhbmNlZCBSZWNlaXZlIERlc2NyaXB0b3IgYml0IGRlZmluaXRp
b25zICovCi0jZGVmaW5lIElHQ19SWERBRFZfU1RBVF9UU0lQCTB4MDgwMDAgLyogdGltZXN0YW1w
IGluIHBhY2tldCAqLworI2RlZmluZSBJR0NfUlhEQURWX1NUQVRfU01EX1RZUEVfTUFTSwkweDA2
MDAwCisjZGVmaW5lIElHQ19SWERBRFZfU1RBVF9UU0lQCQkweDA4MDAwIC8qIHRpbWVzdGFtcCBp
biBwYWNrZXQgKi8KIAogI2RlZmluZSBJR0NfUlhERVhUX1NUQVRFUlJfTDRFCQkweDIwMDAwMDAw
CiAjZGVmaW5lIElHQ19SWERFWFRfU1RBVEVSUl9JUEUJCTB4NDAwMDAwMDAKQEAgLTU3NSw2ICs1
ODAsNyBAQAogCiAvKiBUcmFuc21pdCBTY2hlZHVsaW5nICovCiAjZGVmaW5lIElHQ19UUUFWQ1RS
TF9UUkFOU01JVF9NT0RFX1RTTgkweDAwMDAwMDAxCisjZGVmaW5lIElHQ19UUUFWQ1RSTF9QUkVF
TVBUX0VOQQkweDAwMDAwMDAyCiAjZGVmaW5lIElHQ19UUUFWQ1RSTF9FTkhBTkNFRF9RQVYJMHgw
MDAwMDAwOAogI2RlZmluZSBJR0NfVFFBVkNUUkxfRlVUU0NERElTCQkweDAwMDAwMDgwCiAKZGlm
ZiAtLWdpdCBhL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfZXRodG9vbC5jIGIv
ZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY19ldGh0b29sLmMKaW5kZXggODE3ODM4
Njc3ODE3Li5iNjRkNWM2YzFkMjAgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvbmV0L2V0aGVybmV0L2lu
dGVsL2lnYy9pZ2NfZXRodG9vbC5jCisrKyBiL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2ln
Yy9pZ2NfZXRodG9vbC5jCkBAIC04LDYgKzgsNyBAQAogCiAjaW5jbHVkZSAiaWdjLmgiCiAjaW5j
bHVkZSAiaWdjX2RpYWcuaCIKKyNpbmNsdWRlICJpZ2NfdHNuLmgiCiAKIC8qIGZvcndhcmQgZGVj
bGFyYXRpb24gKi8KIHN0cnVjdCBpZ2Nfc3RhdHMgewpAQCAtMTc4MSw2ICsxNzgyLDI1IEBAIHN0
YXRpYyBpbnQgaWdjX2V0aHRvb2xfc2V0X2VlZShzdHJ1Y3QgbmV0X2RldmljZSAqbmV0ZGV2LAog
CXJldHVybiAwOwogfQogCitzdGF0aWMgaW50IGlnY19ldGh0b29sX3NldF9tbShzdHJ1Y3QgbmV0
X2RldmljZSAqbmV0ZGV2LAorCQkJICAgICAgc3RydWN0IGV0aHRvb2xfbW1fY2ZnICpjbWQsCisJ
CQkgICAgICBzdHJ1Y3QgbmV0bGlua19leHRfYWNrICpleHRhY2spCit7CisJc3RydWN0IGlnY19h
ZGFwdGVyICphZGFwdGVyID0gbmV0ZGV2X3ByaXYobmV0ZGV2KTsKKwlzdHJ1Y3QgaWdjX2ZwZV90
ICpmcGUgPSAmYWRhcHRlci0+ZnBlOworCisJaWYgKGZwZS0+bW1zdi5wbWFjX2VuYWJsZWQgIT0g
Y21kLT5wbWFjX2VuYWJsZWQpIHsKKwkJaWYgKGNtZC0+cG1hY19lbmFibGVkKQorCQkJc3RhdGlj
X2JyYW5jaF9pbmMoJmlnY19mcGVfZW5hYmxlZCk7CisJCWVsc2UKKwkJCXN0YXRpY19icmFuY2hf
ZGVjKCZpZ2NfZnBlX2VuYWJsZWQpOworCX0KKworCWV0aHRvb2xfbW1zdl9zZXRfbW0oJmZwZS0+
bW1zdiwgY21kKTsKKworCXJldHVybiBpZ2NfdHNuX29mZmxvYWRfYXBwbHkoYWRhcHRlcik7Cit9
CisKIHN0YXRpYyBpbnQgaWdjX2V0aHRvb2xfZ2V0X2xpbmtfa3NldHRpbmdzKHN0cnVjdCBuZXRf
ZGV2aWNlICpuZXRkZXYsCiAJCQkJCSAgc3RydWN0IGV0aHRvb2xfbGlua19rc2V0dGluZ3MgKmNt
ZCkKIHsKQEAgLTIwNzYsNiArMjA5Niw3IEBAIHN0YXRpYyBjb25zdCBzdHJ1Y3QgZXRodG9vbF9v
cHMgaWdjX2V0aHRvb2xfb3BzID0gewogCS5nZXRfbGlua19rc2V0dGluZ3MJPSBpZ2NfZXRodG9v
bF9nZXRfbGlua19rc2V0dGluZ3MsCiAJLnNldF9saW5rX2tzZXR0aW5ncwk9IGlnY19ldGh0b29s
X3NldF9saW5rX2tzZXR0aW5ncywKIAkuc2VsZl90ZXN0CQk9IGlnY19ldGh0b29sX2RpYWdfdGVz
dCwKKwkuc2V0X21tCQkJPSBpZ2NfZXRodG9vbF9zZXRfbW0sCiB9OwogCiB2b2lkIGlnY19ldGh0
b29sX3NldF9vcHMoc3RydWN0IG5ldF9kZXZpY2UgKm5ldGRldikKZGlmZiAtLWdpdCBhL2RyaXZl
cnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfbWFpbi5jIGIvZHJpdmVycy9uZXQvZXRoZXJu
ZXQvaW50ZWwvaWdjL2lnY19tYWluLmMKaW5kZXggNmYwMTEwZTNhYzIyLi43MWMzNzdjYjdhODgg
MTAwNjQ0Ci0tLSBhL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfbWFpbi5jCisr
KyBiL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfbWFpbi5jCkBAIC0yNTQ4LDcg
KzI1NDgsNyBAQCBzdGF0aWMgaW50IGlnY194ZHBfcnVuX3Byb2coc3RydWN0IGlnY19hZGFwdGVy
ICphZGFwdGVyLCBzdHJ1Y3QgeGRwX2J1ZmYgKnhkcCkKIH0KIAogLyogVGhpcyBmdW5jdGlvbiBh
c3N1bWVzIF9fbmV0aWZfdHhfbG9jayBpcyBoZWxkIGJ5IHRoZSBjYWxsZXIuICovCi1zdGF0aWMg
dm9pZCBpZ2NfZmx1c2hfdHhfZGVzY3JpcHRvcnMoc3RydWN0IGlnY19yaW5nICpyaW5nKQordm9p
ZCBpZ2NfZmx1c2hfdHhfZGVzY3JpcHRvcnMoc3RydWN0IGlnY19yaW5nICpyaW5nKQogewogCS8q
IE9uY2UgdGFpbCBwb2ludGVyIGlzIHVwZGF0ZWQsIGhhcmR3YXJlIGNhbiBmZXRjaCB0aGUgZGVz
Y3JpcHRvcnMKIAkgKiBhbnkgdGltZSBzbyB3ZSBpc3N1ZSBhIHdyaXRlIG1lbWJhciBoZXJlIHRv
IGVuc3VyZSBhbGwgbWVtb3J5CkBAIC0yNjM3LDYgKzI2MzcsMTQgQEAgc3RhdGljIGludCBpZ2Nf
Y2xlYW5fcnhfaXJxKHN0cnVjdCBpZ2NfcV92ZWN0b3IgKnFfdmVjdG9yLCBjb25zdCBpbnQgYnVk
Z2V0KQogCQkJc2l6ZSAtPSBJR0NfVFNfSERSX0xFTjsKIAkJfQogCisJCWlmIChpZ2NfZnBlX2lz
X3BtYWNfZW5hYmxlZChhZGFwdGVyKSAmJgorCQkgICAgaWdjX2ZwZV9oYW5kbGVfbXBhY2tldChh
ZGFwdGVyLCByeF9kZXNjLCBzaXplLCBwa3RidWYpKSB7CisJCQkvKiBBZHZhbmNlIHRoZSByaW5n
IG5leHQtdG8tY2xlYW4gKi8KKwkJCWlnY19pc19ub25fZW9wKHJ4X3JpbmcsIHJ4X2Rlc2MpOwor
CQkJY2xlYW5lZF9jb3VudCsrOworCQkJY29udGludWU7CisJCX0KKwogCQlpZiAoIXNrYikgewog
CQkJeGRwX2luaXRfYnVmZigmY3R4LnhkcCwgdHJ1ZXNpemUsICZyeF9yaW5nLT54ZHBfcnhxKTsK
IAkJCXhkcF9wcmVwYXJlX2J1ZmYoJmN0eC54ZHAsIHBrdGJ1ZiAtIGlnY19yeF9vZmZzZXQocnhf
cmluZyksCkBAIC0zMTQ0LDYgKzMxNTIsMTEgQEAgc3RhdGljIGJvb2wgaWdjX2NsZWFuX3R4X2ly
cShzdHJ1Y3QgaWdjX3FfdmVjdG9yICpxX3ZlY3RvciwgaW50IG5hcGlfYnVkZ2V0KQogCQlpZiAo
IShlb3BfZGVzYy0+d2Iuc3RhdHVzICYgY3B1X3RvX2xlMzIoSUdDX1RYRF9TVEFUX0REKSkpCiAJ
CQlicmVhazsKIAorCQlpZiAoaWdjX2ZwZV9pc19wbWFjX2VuYWJsZWQoYWRhcHRlcikgJiYKKwkJ
ICAgIGlnY19mcGVfdHJhbnNtaXR0ZWRfc21kX3YodHhfZGVzYykpCisJCQlldGh0b29sX21tc3Zf
ZXZlbnRfaGFuZGxlKCZhZGFwdGVyLT5mcGUubW1zdiwKKwkJCQkJCSAgRVRIVE9PTF9NTVNWX0xE
X1NFTlRfVkVSSUZZX01QQUNLRVQpOworCiAJCS8qIEhvbGQgdGhlIGNvbXBsZXRpb25zIHdoaWxl
IHRoZXJlJ3MgYSBwZW5kaW5nIHR4IGhhcmR3YXJlCiAJCSAqIHRpbWVzdGFtcCByZXF1ZXN0IGZy
b20gWERQIFR4IG1ldGFkYXRhLgogCQkgKi8KQEAgLTQwMzUsNiArNDA0OCwzMCBAQCBzdGF0aWMg
aW50IGlnY191Y191bnN5bmMoc3RydWN0IG5ldF9kZXZpY2UgKm5ldGRldiwgY29uc3QgdW5zaWdu
ZWQgY2hhciAqYWRkcikKIAlyZXR1cm4gMDsKIH0KIAorLyoqCisgKiBpZ2NfZW5hYmxlX2VtcHR5
X2FkZHJfcmVjdiAtIEVuYWJsZSBSeCBvZiBwYWNrZXRzIHdpdGggYWxsLXplcm9lcyBNQUMgYWRk
cmVzcworICogQGFkYXB0ZXI6IFBvaW50ZXIgdG8gdGhlIGlnY19hZGFwdGVyIHN0cnVjdHVyZS4K
KyAqCisgKiBGcmFtZSBwcmVlbXB0aW9uIHZlcmlmaWNhdGlvbiByZXF1aXJlcyB0aGF0IHBhY2tl
dHMgd2l0aCB0aGUgYWxsLXplcm9lcworICogTUFDIGFkZHJlc3MgYXJlIGFsbG93ZWQgdG8gYmUg
cmVjZWl2ZWQgYnkgdGhlIGRyaXZlci4gVGhpcyBmdW5jdGlvbiBhZGRzIHRoZQorICogYWxsLXpl
cm9lcyBkZXN0aW5hdGlvbiBhZGRyZXNzIHRvIHRoZSBsaXN0IG9mIGFjY2VwdGFibGUgYWRkcmVz
c2VzLgorICoKKyAqIFJldHVybjogMCBvbiBzdWNjZXNzLCBuZWdhdGl2ZSB2YWx1ZSBvdGhlcndp
c2UuCisgKi8KK2ludCBpZ2NfZW5hYmxlX2VtcHR5X2FkZHJfcmVjdihzdHJ1Y3QgaWdjX2FkYXB0
ZXIgKmFkYXB0ZXIpCit7CisJdTggZW1wdHlbRVRIX0FMRU5dID0ge307CisKKwlyZXR1cm4gaWdj
X2FkZF9tYWNfZmlsdGVyKGFkYXB0ZXIsIElHQ19NQUNfRklMVEVSX1RZUEVfRFNULCBlbXB0eSwg
LTEpOworfQorCit2b2lkIGlnY19kaXNhYmxlX2VtcHR5X2FkZHJfcmVjdihzdHJ1Y3QgaWdjX2Fk
YXB0ZXIgKmFkYXB0ZXIpCit7CisJdTggZW1wdHlbRVRIX0FMRU5dID0ge307CisKKwlpZ2NfZGVs
X21hY19maWx0ZXIoYWRhcHRlciwgSUdDX01BQ19GSUxURVJfVFlQRV9EU1QsIGVtcHR5KTsKK30K
KwogLyoqCiAgKiBpZ2Nfc2V0X3J4X21vZGUgLSBTZWNvbmRhcnkgVW5pY2FzdCwgTXVsdGljYXN0
IGFuZCBQcm9taXNjdW91cyBtb2RlIHNldAogICogQG5ldGRldjogbmV0d29yayBpbnRlcmZhY2Ug
ZGV2aWNlIHN0cnVjdHVyZQpAQCAtNTMxMCw2ICs1MzQ3LDkgQEAgdm9pZCBpZ2NfZG93bihzdHJ1
Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIpCiAJaWdjX2Rpc2FibGVfYWxsX3R4X3JpbmdzX2h3KGFk
YXB0ZXIpOwogCWlnY19jbGVhbl9hbGxfdHhfcmluZ3MoYWRhcHRlcik7CiAJaWdjX2NsZWFuX2Fs
bF9yeF9yaW5ncyhhZGFwdGVyKTsKKworCWlmIChhZGFwdGVyLT5mcGUubW1zdi5wbWFjX2VuYWJs
ZWQpCisJCWV0aHRvb2xfbW1zdl9zdG9wKCZhZGFwdGVyLT5mcGUubW1zdik7CiB9CiAKIHZvaWQg
aWdjX3JlaW5pdF9sb2NrZWQoc3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVyKQpAQCAtNTgzNCw2
ICs1ODc0LDEwIEBAIHN0YXRpYyB2b2lkIGlnY193YXRjaGRvZ190YXNrKHN0cnVjdCB3b3JrX3N0
cnVjdCAqd29yaykKIAkJCSAqLwogCQkJaWdjX3Rzbl9hZGp1c3RfdHh0aW1lX29mZnNldChhZGFw
dGVyKTsKIAorCQkJaWYgKGFkYXB0ZXItPmZwZS5tbXN2LnBtYWNfZW5hYmxlZCkKKwkJCQlldGh0
b29sX21tc3ZfbGlua19zdGF0ZV9oYW5kbGUoJmFkYXB0ZXItPmZwZS5tbXN2LAorCQkJCQkJCSAg
ICAgICB0cnVlKTsKKwogCQkJaWYgKGFkYXB0ZXItPmxpbmtfc3BlZWQgIT0gU1BFRURfMTAwMCkK
IAkJCQlnb3RvIG5vX3dhaXQ7CiAKQEAgLTU4NjksNiArNTkxMywxMCBAQCBzdGF0aWMgdm9pZCBp
Z2Nfd2F0Y2hkb2dfdGFzayhzdHJ1Y3Qgd29ya19zdHJ1Y3QgKndvcmspCiAJCQluZXRkZXZfaW5m
byhuZXRkZXYsICJOSUMgTGluayBpcyBEb3duXG4iKTsKIAkJCW5ldGlmX2NhcnJpZXJfb2ZmKG5l
dGRldik7CiAKKwkJCWlmIChhZGFwdGVyLT5mcGUubW1zdi5wbWFjX2VuYWJsZWQpCisJCQkJZXRo
dG9vbF9tbXN2X2xpbmtfc3RhdGVfaGFuZGxlKCZhZGFwdGVyLT5mcGUubW1zdiwKKwkJCQkJCQkg
ICAgICAgZmFsc2UpOworCiAJCQkvKiBsaW5rIHN0YXRlIGhhcyBjaGFuZ2VkLCBzY2hlZHVsZSBw
aHkgaW5mbyB1cGRhdGUgKi8KIAkJCWlmICghdGVzdF9iaXQoX19JR0NfRE9XTiwgJmFkYXB0ZXIt
PnN0YXRlKSkKIAkJCQltb2RfdGltZXIoJmFkYXB0ZXItPnBoeV9pbmZvX3RpbWVyLApAQCAtNzE4
OSw2ICs3MjM3LDggQEAgc3RhdGljIGludCBpZ2NfcHJvYmUoc3RydWN0IHBjaV9kZXYgKnBkZXYs
CiAKIAlpZ2NfdHNuX2NsZWFyX3NjaGVkdWxlKGFkYXB0ZXIpOwogCisJaWdjX2ZwZV9pbml0KGFk
YXB0ZXIpOworCiAJLyogcmVzZXQgdGhlIGhhcmR3YXJlIHdpdGggdGhlIG5ldyBzZXR0aW5ncyAq
LwogCWlnY19yZXNldChhZGFwdGVyKTsKIApkaWZmIC0tZ2l0IGEvZHJpdmVycy9uZXQvZXRoZXJu
ZXQvaW50ZWwvaWdjL2lnY190c24uYyBiL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9p
Z2NfdHNuLmMKaW5kZXggNWIzYjFiYzBiNjRhLi44YTE3MjU2ODgzODEgMTAwNjQ0Ci0tLSBhL2Ry
aXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfdHNuLmMKKysrIGIvZHJpdmVycy9uZXQv
ZXRoZXJuZXQvaW50ZWwvaWdjL2lnY190c24uYwpAQCAtMiw5ICsyLDEzNSBAQAogLyogQ29weXJp
Z2h0IChjKSAgMjAxOSBJbnRlbCBDb3Jwb3JhdGlvbiAqLwogCiAjaW5jbHVkZSAiaWdjLmgiCisj
aW5jbHVkZSAiaWdjX2Jhc2UuaCIKICNpbmNsdWRlICJpZ2NfaHcuaCIKICNpbmNsdWRlICJpZ2Nf
dHNuLmgiCiAKK0RFRklORV9TVEFUSUNfS0VZX0ZBTFNFKGlnY19mcGVfZW5hYmxlZCk7CisKK3N0
YXRpYyBpbnQgaWdjX2ZwZV9pbml0X3NtZF9mcmFtZShzdHJ1Y3QgaWdjX3JpbmcgKnJpbmcsCisJ
CQkJICBzdHJ1Y3QgaWdjX3R4X2J1ZmZlciAqYnVmZmVyLAorCQkJCSAgc3RydWN0IHNrX2J1ZmYg
KnNrYikKK3sKKwlkbWFfYWRkcl90IGRtYSA9IGRtYV9tYXBfc2luZ2xlKHJpbmctPmRldiwgc2ti
LT5kYXRhLCBza2ItPmxlbiwKKwkJCQkJRE1BX1RPX0RFVklDRSk7CisKKwlpZiAoZG1hX21hcHBp
bmdfZXJyb3IocmluZy0+ZGV2LCBkbWEpKSB7CisJCW5ldGRldl9lcnJfb25jZShyaW5nLT5uZXRk
ZXYsICJGYWlsZWQgdG8gbWFwIERNQSBmb3IgVFhcbiIpOworCQlyZXR1cm4gLUVOT01FTTsKKwl9
CisKKwlidWZmZXItPnNrYiA9IHNrYjsKKwlidWZmZXItPnByb3RvY29sID0gMDsKKwlidWZmZXIt
PmJ5dGVjb3VudCA9IHNrYi0+bGVuOworCWJ1ZmZlci0+Z3NvX3NlZ3MgPSAxOworCWJ1ZmZlci0+
dGltZV9zdGFtcCA9IGppZmZpZXM7CisJZG1hX3VubWFwX2xlbl9zZXQoYnVmZmVyLCBsZW4sIHNr
Yi0+bGVuKTsKKwlkbWFfdW5tYXBfYWRkcl9zZXQoYnVmZmVyLCBkbWEsIGRtYSk7CisKKwlyZXR1
cm4gMDsKK30KKworc3RhdGljIGludCBpZ2NfZnBlX2luaXRfdHhfZGVzY3JpcHRvcihzdHJ1Y3Qg
aWdjX3JpbmcgKnJpbmcsCisJCQkJICAgICAgc3RydWN0IHNrX2J1ZmYgKnNrYiwKKwkJCQkgICAg
ICBlbnVtIGlnY190eGRfcG9wdHNfdHlwZSB0eXBlKQoreworCXUzMiBjbWRfdHlwZSwgb2xpbmZv
X3N0YXR1cyA9IDA7CisJc3RydWN0IGlnY190eF9idWZmZXIgKmJ1ZmZlcjsKKwl1bmlvbiBpZ2Nf
YWR2X3R4X2Rlc2MgKmRlc2M7CisJaW50IGVycjsKKworCWlmICghaWdjX2Rlc2NfdW51c2VkKHJp
bmcpKQorCQlyZXR1cm4gLUVCVVNZOworCisJYnVmZmVyID0gJnJpbmctPnR4X2J1ZmZlcl9pbmZv
W3JpbmctPm5leHRfdG9fdXNlXTsKKwllcnIgPSBpZ2NfZnBlX2luaXRfc21kX2ZyYW1lKHJpbmcs
IGJ1ZmZlciwgc2tiKTsKKwlpZiAoZXJyKQorCQlyZXR1cm4gZXJyOworCisJY21kX3R5cGUgPSBJ
R0NfQURWVFhEX0RUWVBfREFUQSB8IElHQ19BRFZUWERfRENNRF9ERVhUIHwKKwkJICAgSUdDX0FE
VlRYRF9EQ01EX0lGQ1MgfCBJR0NfVFhEX0RDTUQgfAorCQkgICBidWZmZXItPmJ5dGVjb3VudDsK
KworCW9saW5mb19zdGF0dXMgfD0gRklFTERfUFJFUChJR0NfQURWVFhEX1BBWUxFTl9NQVNLLCBi
dWZmZXItPmJ5dGVjb3VudCk7CisKKwlzd2l0Y2ggKHR5cGUpIHsKKwljYXNlIFNNRF9WOgorCWNh
c2UgU01EX1I6CisJCW9saW5mb19zdGF0dXMgfD0gRklFTERfUFJFUChJR0NfVFhEX1BPUFRTX1NN
RF9NQVNLLCB0eXBlKTsKKwkJYnJlYWs7CisJfQorCisJZGVzYyA9IElHQ19UWF9ERVNDKHJpbmcs
IHJpbmctPm5leHRfdG9fdXNlKTsKKwlkZXNjLT5yZWFkLmNtZF90eXBlX2xlbiA9IGNwdV90b19s
ZTMyKGNtZF90eXBlKTsKKwlkZXNjLT5yZWFkLm9saW5mb19zdGF0dXMgPSBjcHVfdG9fbGUzMihv
bGluZm9fc3RhdHVzKTsKKwlkZXNjLT5yZWFkLmJ1ZmZlcl9hZGRyID0gY3B1X3RvX2xlNjQoZG1h
X3VubWFwX2FkZHIoYnVmZmVyLCBkbWEpKTsKKworCW5ldGRldl90eF9zZW50X3F1ZXVlKHR4cmlu
Z190eHEocmluZyksIHNrYi0+bGVuKTsKKworCWJ1ZmZlci0+bmV4dF90b193YXRjaCA9IGRlc2M7
CisJcmluZy0+bmV4dF90b191c2UgPSAocmluZy0+bmV4dF90b191c2UgKyAxKSAlIHJpbmctPmNv
dW50OworCisJcmV0dXJuIDA7Cit9CisKK3N0YXRpYyBpbnQgaWdjX2ZwZV94bWl0X3NtZF9mcmFt
ZShzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIsCisJCQkJICBlbnVtIGlnY190eGRfcG9wdHNf
dHlwZSB0eXBlKQoreworCWludCBjcHUgPSBzbXBfcHJvY2Vzc29yX2lkKCk7CisJc3RydWN0IG5l
dGRldl9xdWV1ZSAqbnE7CisJc3RydWN0IGlnY19yaW5nICpyaW5nOworCXN0cnVjdCBza19idWZm
ICpza2I7CisJaW50IGVycjsKKworCXJpbmcgPSBpZ2NfZ2V0X3R4X3JpbmcoYWRhcHRlciwgY3B1
KTsKKwlucSA9IHR4cmluZ190eHEocmluZyk7CisKKwlza2IgPSBhbGxvY19za2IoU01EX0ZSQU1F
X1NJWkUsIEdGUF9BVE9NSUMpOworCWlmICghc2tiKQorCQlyZXR1cm4gLUVOT01FTTsKKworCXNr
Yl9wdXRfemVybyhza2IsIFNNRF9GUkFNRV9TSVpFKTsKKworCV9fbmV0aWZfdHhfbG9jayhucSwg
Y3B1KTsKKworCWVyciA9IGlnY19mcGVfaW5pdF90eF9kZXNjcmlwdG9yKHJpbmcsIHNrYiwgdHlw
ZSk7CisJaWdjX2ZsdXNoX3R4X2Rlc2NyaXB0b3JzKHJpbmcpOworCisJX19uZXRpZl90eF91bmxv
Y2sobnEpOworCisJcmV0dXJuIGVycjsKK30KKworc3RhdGljIHZvaWQgaWdjX2ZwZV9zZW5kX21w
YWNrZXQoc3RydWN0IGV0aHRvb2xfbW1zdiAqbW1zdiwKKwkJCQkgZW51bSBldGh0b29sX21wYWNr
ZXQgdHlwZSkKK3sKKwlzdHJ1Y3QgaWdjX2ZwZV90ICpmcGUgPSBjb250YWluZXJfb2YobW1zdiwg
c3RydWN0IGlnY19mcGVfdCwgbW1zdik7CisJc3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVyOwor
CWludCBlcnI7CisKKwlhZGFwdGVyID0gY29udGFpbmVyX29mKGZwZSwgc3RydWN0IGlnY19hZGFw
dGVyLCBmcGUpOworCisJaWYgKHR5cGUgPT0gRVRIVE9PTF9NUEFDS0VUX1ZFUklGWSkgeworCQll
cnIgPSBpZ2NfZnBlX3htaXRfc21kX2ZyYW1lKGFkYXB0ZXIsIFNNRF9WKTsKKwkJaWYgKGVyciAm
JiBuZXRfcmF0ZWxpbWl0KCkpCisJCQluZXRkZXZfZXJyKGFkYXB0ZXItPm5ldGRldiwgIkVycm9y
IHNlbmRpbmcgU01ELVZcbiIpOworCX0gZWxzZSBpZiAodHlwZSA9PSBFVEhUT09MX01QQUNLRVRf
UkVTUE9OU0UpIHsKKwkJZXJyID0gaWdjX2ZwZV94bWl0X3NtZF9mcmFtZShhZGFwdGVyLCBTTURf
Uik7CisJCWlmIChlcnIgJiYgbmV0X3JhdGVsaW1pdCgpKQorCQkJbmV0ZGV2X2VycihhZGFwdGVy
LT5uZXRkZXYsICJFcnJvciBzZW5kaW5nIFNNRC1SIGZyYW1lXG4iKTsKKwl9Cit9CisKK3N0YXRp
YyBjb25zdCBzdHJ1Y3QgZXRodG9vbF9tbXN2X29wcyBpZ2NfbW1zdl9vcHMgPSB7CisJLnNlbmRf
bXBhY2tldCA9IGlnY19mcGVfc2VuZF9tcGFja2V0LAorfTsKKwordm9pZCBpZ2NfZnBlX2luaXQo
c3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVyKQoreworCWV0aHRvb2xfbW1zdl9pbml0KCZhZGFw
dGVyLT5mcGUubW1zdiwgYWRhcHRlci0+bmV0ZGV2LCAmaWdjX21tc3Zfb3BzKTsKK30KKwogc3Rh
dGljIGJvb2wgaXNfYW55X2xhdW5jaHRpbWUoc3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVyKQog
ewogCWludCBpOwpAQCAtNDksNiArMTc1LDkgQEAgc3RhdGljIHVuc2lnbmVkIGludCBpZ2NfdHNu
X25ld19mbGFncyhzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIpCiAJaWYgKGFkYXB0ZXItPnN0
cmljdF9wcmlvcml0eV9lbmFibGUpCiAJCW5ld19mbGFncyB8PSBJR0NfRkxBR19UU05fTEVHQUNZ
X0VOQUJMRUQ7CiAKKwlpZiAoYWRhcHRlci0+ZnBlLm1tc3YucG1hY19lbmFibGVkKQorCQluZXdf
ZmxhZ3MgfD0gSUdDX0ZMQUdfVFNOX1BSRUVNUFRfRU5BQkxFRDsKKwogCXJldHVybiBuZXdfZmxh
Z3M7CiB9CiAKQEAgLTE2Nyw3ICsyOTYsOCBAQCBzdGF0aWMgaW50IGlnY190c25fZGlzYWJsZV9v
ZmZsb2FkKHN0cnVjdCBpZ2NfYWRhcHRlciAqYWRhcHRlcikKIAogCXRxYXZjdHJsID0gcmQzMihJ
R0NfVFFBVkNUUkwpOwogCXRxYXZjdHJsICY9IH4oSUdDX1RRQVZDVFJMX1RSQU5TTUlUX01PREVf
VFNOIHwKLQkJICAgICAgSUdDX1RRQVZDVFJMX0VOSEFOQ0VEX1FBViB8IElHQ19UUUFWQ1RSTF9G
VVRTQ0RESVMpOworCQkgICAgICBJR0NfVFFBVkNUUkxfRU5IQU5DRURfUUFWIHwgSUdDX1RRQVZD
VFJMX0ZVVFNDRERJUyB8CisJCSAgICAgIElHQ19UUUFWQ1RSTF9QUkVFTVBUX0VOQSk7CiAKIAl3
cjMyKElHQ19UUUFWQ1RSTCwgdHFhdmN0cmwpOwogCkBAIC0zODYsMTAgKzUxNiwxNCBAQCBzdGF0
aWMgaW50IGlnY190c25fZW5hYmxlX29mZmxvYWQoc3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVy
KQogCQl3cjMyKElHQ19UWFFDVEwoaSksIHR4cWN0bCk7CiAJfQogCi0JdHFhdmN0cmwgPSByZDMy
KElHQ19UUUFWQ1RSTCkgJiB+SUdDX1RRQVZDVFJMX0ZVVFNDRERJUzsKKwl0cWF2Y3RybCA9IHJk
MzIoSUdDX1RRQVZDVFJMKSAmIH4oSUdDX1RRQVZDVFJMX0ZVVFNDRERJUyB8CisJCSAgIElHQ19U
UUFWQ1RSTF9QUkVFTVBUX0VOQSk7CiAKIAl0cWF2Y3RybCB8PSBJR0NfVFFBVkNUUkxfVFJBTlNN
SVRfTU9ERV9UU04gfCBJR0NfVFFBVkNUUkxfRU5IQU5DRURfUUFWOwogCisJaWYgKGFkYXB0ZXIt
PmZwZS5tbXN2LnBtYWNfZW5hYmxlZCkKKwkJdHFhdmN0cmwgfD0gSUdDX1RRQVZDVFJMX1BSRUVN
UFRfRU5BOworCiAJYWRhcHRlci0+cWJ2X2NvdW50Kys7CiAKIAljeWNsZSA9IGFkYXB0ZXItPmN5
Y2xlX3RpbWU7CkBAIC00NTAsNiArNTg0LDE0IEBAIGludCBpZ2NfdHNuX3Jlc2V0KHN0cnVjdCBp
Z2NfYWRhcHRlciAqYWRhcHRlcikKIAl1bnNpZ25lZCBpbnQgbmV3X2ZsYWdzOwogCWludCBlcnIg
PSAwOwogCisJaWYgKGFkYXB0ZXItPmZwZS5tbXN2LnBtYWNfZW5hYmxlZCkgeworCQllcnIgPSBp
Z2NfZW5hYmxlX2VtcHR5X2FkZHJfcmVjdihhZGFwdGVyKTsKKwkJaWYgKGVyciAmJiBuZXRfcmF0
ZWxpbWl0KCkpCisJCQluZXRkZXZfZXJyKGFkYXB0ZXItPm5ldGRldiwgIkVycm9yIGFkZGluZyBl
bXB0eSBhZGRyZXNzIHRvIE1BQyBmaWx0ZXJcbiIpOworCX0gZWxzZSB7CisJCWlnY19kaXNhYmxl
X2VtcHR5X2FkZHJfcmVjdihhZGFwdGVyKTsKKwl9CisKIAluZXdfZmxhZ3MgPSBpZ2NfdHNuX25l
d19mbGFncyhhZGFwdGVyKTsKIAogCWlmICghKG5ld19mbGFncyAmIElHQ19GTEFHX1RTTl9BTllf
RU5BQkxFRCkpCmRpZmYgLS1naXQgYS9kcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2MvaWdj
X3Rzbi5oIGIvZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY190c24uaAppbmRleCA5
OGVjODQ1YTg2YmYuLmJiMzBkMTVjZWM3NiAxMDA2NDQKLS0tIGEvZHJpdmVycy9uZXQvZXRoZXJu
ZXQvaW50ZWwvaWdjL2lnY190c24uaAorKysgYi9kcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9p
Z2MvaWdjX3Rzbi5oCkBAIC00LDkgKzQsNTkgQEAKICNpZm5kZWYgX0lHQ19UU05fSF8KICNkZWZp
bmUgX0lHQ19UU05fSF8KIAorI2RlZmluZSBTTURfRlJBTUVfU0laRQkJCTYwCisKK2VudW0gaWdj
X3R4ZF9wb3B0c190eXBlIHsKKwlTTURfViA9IDB4MDEsCisJU01EX1IgPSAweDAyLAorfTsKKwor
REVDTEFSRV9TVEFUSUNfS0VZX0ZBTFNFKGlnY19mcGVfZW5hYmxlZCk7CisKK3ZvaWQgaWdjX2Zw
ZV9pbml0KHN0cnVjdCBpZ2NfYWRhcHRlciAqYWRhcHRlcik7CiBpbnQgaWdjX3Rzbl9vZmZsb2Fk
X2FwcGx5KHN0cnVjdCBpZ2NfYWRhcHRlciAqYWRhcHRlcik7CiBpbnQgaWdjX3Rzbl9yZXNldChz
dHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIpOwogdm9pZCBpZ2NfdHNuX2FkanVzdF90eHRpbWVf
b2Zmc2V0KHN0cnVjdCBpZ2NfYWRhcHRlciAqYWRhcHRlcik7CiBib29sIGlnY190c25faXNfdGFw
cmlvX2FjdGl2YXRlZF9ieV91c2VyKHN0cnVjdCBpZ2NfYWRhcHRlciAqYWRhcHRlcik7CiAKK3N0
YXRpYyBpbmxpbmUgYm9vbCBpZ2NfZnBlX2lzX3BtYWNfZW5hYmxlZChzdHJ1Y3QgaWdjX2FkYXB0
ZXIgKmFkYXB0ZXIpCit7CisJcmV0dXJuIHN0YXRpY19icmFuY2hfdW5saWtlbHkoJmlnY19mcGVf
ZW5hYmxlZCkgJiYKKwkgICAgICAgYWRhcHRlci0+ZnBlLm1tc3YucG1hY19lbmFibGVkOworfQor
CitzdGF0aWMgaW5saW5lIGJvb2wgaWdjX2ZwZV9oYW5kbGVfbXBhY2tldChzdHJ1Y3QgaWdjX2Fk
YXB0ZXIgKmFkYXB0ZXIsCisJCQkJCSAgdW5pb24gaWdjX2Fkdl9yeF9kZXNjICpyeF9kZXNjLAor
CQkJCQkgIHVuc2lnbmVkIGludCBzaXplLCB2b2lkICpwa3RidWYpCit7CisJdTMyIHN0YXR1c19l
cnJvciA9IGxlMzJfdG9fY3B1KHJ4X2Rlc2MtPndiLnVwcGVyLnN0YXR1c19lcnJvcik7CisJaW50
IHNtZDsKKworCXNtZCA9IEZJRUxEX0dFVChJR0NfUlhEQURWX1NUQVRfU01EX1RZUEVfTUFTSywg
c3RhdHVzX2Vycm9yKTsKKwlpZiAoc21kICE9IElHQ19SWERfU1RBVF9TTURfVFlQRV9WICYmIHNt
ZCAhPSBJR0NfUlhEX1NUQVRfU01EX1RZUEVfUikKKwkJcmV0dXJuIGZhbHNlOworCisJaWYgKHNp
emUgPT0gU01EX0ZSQU1FX1NJWkUgJiYgbWVtX2lzX3plcm8ocGt0YnVmLCBTTURfRlJBTUVfU0la
RSkpIHsKKwkJc3RydWN0IGV0aHRvb2xfbW1zdiAqbW1zdiA9ICZhZGFwdGVyLT5mcGUubW1zdjsK
KwkJZW51bSBldGh0b29sX21tc3ZfZXZlbnQgZXZlbnQ7CisKKwkJaWYgKHNtZCA9PSBJR0NfUlhE
X1NUQVRfU01EX1RZUEVfVikKKwkJCWV2ZW50ID0gRVRIVE9PTF9NTVNWX0xQX1NFTlRfVkVSSUZZ
X01QQUNLRVQ7CisJCWVsc2UKKwkJCWV2ZW50ID0gRVRIVE9PTF9NTVNWX0xQX1NFTlRfUkVTUE9O
U0VfTVBBQ0tFVDsKKworCQlldGh0b29sX21tc3ZfZXZlbnRfaGFuZGxlKG1tc3YsIGV2ZW50KTsK
Kwl9CisKKwlyZXR1cm4gdHJ1ZTsKK30KKworc3RhdGljIGlubGluZSBib29sIGlnY19mcGVfdHJh
bnNtaXR0ZWRfc21kX3YodW5pb24gaWdjX2Fkdl90eF9kZXNjICp0eF9kZXNjKQoreworCXUzMiBv
bGluZm9fc3RhdHVzID0gbGUzMl90b19jcHUodHhfZGVzYy0+cmVhZC5vbGluZm9fc3RhdHVzKTsK
Kwl1OCBzbWQgPSBGSUVMRF9HRVQoSUdDX1RYRF9QT1BUU19TTURfTUFTSywgb2xpbmZvX3N0YXR1
cyk7CisKKwlyZXR1cm4gc21kID09IFNNRF9WOworfQorCiAjZW5kaWYgLyogX0lHQ19CQVNFX0gg
Ki8KLS0gCjIuMzQuMQoKX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX18KTGludXgtc3RtMzIgbWFpbGluZyBsaXN0CkxpbnV4LXN0bTMyQHN0LW1kLW1haWxtYW4u
c3Rvcm1yZXBseS5jb20KaHR0cHM6Ly9zdC1tZC1tYWlsbWFuLnN0b3JtcmVwbHkuY29tL21haWxt
YW4vbGlzdGluZm8vbGludXgtc3RtMzIK
