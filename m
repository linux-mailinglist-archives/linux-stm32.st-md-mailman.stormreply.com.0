Return-Path: <linux-stm32-bounces@st-md-mailman.stormreply.com>
X-Original-To: lists+linux-stm32@lfdr.de
Delivered-To: lists+linux-stm32@lfdr.de
Received: from stm-ict-prod-mailman-01.stormreply.prv (st-md-mailman.stormreply.com [52.209.6.89])
	by mail.lfdr.de (Postfix) with ESMTPS id 850115A29E3
	for <lists+linux-stm32@lfdr.de>; Fri, 26 Aug 2022 16:46:58 +0200 (CEST)
Received: from ip-172-31-3-47.eu-west-1.compute.internal (localhost [127.0.0.1])
	by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTP id 25109C640FE;
	Fri, 26 Aug 2022 14:46:58 +0000 (UTC)
Received: from mga17.intel.com (mga17.intel.com [192.55.52.151])
 (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTPS id 63BA5C04004
 for <linux-stm32@st-md-mailman.stormreply.com>;
 Fri, 26 Aug 2022 14:46:55 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
 d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
 t=1661525215; x=1693061215;
 h=from:to:cc:subject:date:message-id:in-reply-to:
 references:mime-version:content-transfer-encoding;
 bh=+9WLc5C172ycFMdRe1d0gEXq1sKMGhIlzTBQWSRwNto=;
 b=UPyKYIgxtPRrAtTJVNKo0C89iWPmXcA9WbOG7uNvj+6j1sqLG8SdboxH
 UXBA0t6iUcxE1A4kRaD/GttF8PiPJlgg6vBqe2OMvE5ybt7IQ8lrbRzvA
 RDWtVs0duYMrf31e6KtRIzpEq1w8EScb8FSXKc+vT4zBV1ngieszbHX3X
 3oEQfQAntBj/4FKTln2p3zuvsFvB65lZfaf703BwLEwESe0coRxwyckTw
 brkdtRQUpaFL0y8uE9Ynx8al/2KvUXm5LFhuWKWy9EZjZXjxykuDAnSAi
 cn38jufJNV2PRuu4B87q/ceJyAMT+ckQKacNgw34PwiDgE+BhdZgtUrsW g==;
X-IronPort-AV: E=McAfee;i="6500,9779,10451"; a="274916972"
X-IronPort-AV: E=Sophos;i="5.93,265,1654585200"; d="scan'208";a="274916972"
Received: from fmsmga008.fm.intel.com ([10.253.24.58])
 by fmsmga107.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384;
 26 Aug 2022 07:46:53 -0700
X-IronPort-AV: E=Sophos;i="5.93,265,1654585200"; d="scan'208";a="671488400"
Received: from syeghiay-mobl.ger.corp.intel.com (HELO
 ijarvine-MOBL2.ger.corp.intel.com) ([10.252.41.100])
 by fmsmga008-auth.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384;
 26 Aug 2022 07:46:47 -0700
From: =?UTF-8?q?Ilpo=20J=C3=A4rvinen?= <ilpo.jarvinen@linux.intel.com>
To: Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
 Jiri Slaby <jirislaby@kernel.org>, linux-serial@vger.kernel.org,
 Jonathan Corbet <corbet@lwn.net>,
 =?UTF-8?q?Ilpo=20J=C3=A4rvinen?= <ilpo.jarvinen@linux.intel.com>,
 Andy Shevchenko <andriy.shevchenko@linux.intel.com>,
 Vladimir Zapolskiy <vz@mleia.com>, Russell King <linux@armlinux.org.uk>,
 Richard Genoud <richard.genoud@gmail.com>,
 Nicolas Ferre <nicolas.ferre@microchip.com>,
 Alexandre Belloni <alexandre.belloni@bootlin.com>,
 Claudiu Beznea <claudiu.beznea@microchip.com>,
 Shawn Guo <shawnguo@kernel.org>, Sascha Hauer <s.hauer@pengutronix.de>,
 Pengutronix Kernel Team <kernel@pengutronix.de>,
 Fabio Estevam <festevam@gmail.com>, NXP Linux Team <linux-imx@nxp.com>,
 Maxime Coquelin <mcoquelin.stm32@gmail.com>,
 Alexandre Torgue <alexandre.torgue@foss.st.com>, linux-doc@vger.kernel.org,
 linux-kernel@vger.kernel.org, linux-arm-kernel@lists.infradead.org,
 linux-stm32@st-md-mailman.stormreply.com
Date: Fri, 26 Aug 2022 17:46:29 +0300
Message-Id: <20220826144629.11507-4-ilpo.jarvinen@linux.intel.com>
X-Mailer: git-send-email 2.30.2
In-Reply-To: <20220826144629.11507-1-ilpo.jarvinen@linux.intel.com>
References: <20220826144629.11507-1-ilpo.jarvinen@linux.intel.com>
MIME-Version: 1.0
Cc: Lino Sanfilippo <LinoSanfilippo@gmx.de>
Subject: [Linux-stm32] [PATCH 3/3] serial: Add kserial_rs485 to avoid wasted
	space due to .padding
X-BeenThere: linux-stm32@st-md-mailman.stormreply.com
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: <linux-stm32.st-md-mailman.stormreply.com>
List-Unsubscribe: <https://st-md-mailman.stormreply.com/mailman/options/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=unsubscribe>
List-Archive: <http://st-md-mailman.stormreply.com/pipermail/linux-stm32/>
List-Post: <mailto:linux-stm32@st-md-mailman.stormreply.com>
List-Help: <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=help>
List-Subscribe: <https://st-md-mailman.stormreply.com/mailman/listinfo/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: linux-stm32-bounces@st-md-mailman.stormreply.com
Sender: "Linux-stm32" <linux-stm32-bounces@st-md-mailman.stormreply.com>

U3RydWN0IHNlcmlhbF9yczQ4NSBoYXMgYSAucGFkZGluZyBmaWVsZCB0byBtYWtlIHVhcGkgdXBk
YXRlcyBlYXNpZXIuCkl0IHdhc3RlcyBzcGFjZSwgaG93ZXZlci4gQ3JlYXRlIHN0cnVjdCBrc2Vy
aWFsX3JzNDg1IHdoaWNoIGlzIGEga2VybmVyCmNvdW50ZXJwYXJ0IHcvbyBwYWRkaW5nLgoKa2Vy
bmVsX3NlcmlhbF9yczQ4NV90b191c2VyX3JzNDg1KCkncyByczQ4NSBjYW4gbm93IGJlY29tZSBj
b25zdCBhcwpwYWRkaW5nIGlzIGRlYWx0IHdpdGhpbiB0aGUgbG9jYWwgdmFyaWFibGUuCgpTaWdu
ZWQtb2ZmLWJ5OiBJbHBvIErDpHJ2aW5lbiA8aWxwby5qYXJ2aW5lbkBsaW51eC5pbnRlbC5jb20+
Ci0tLQogLi4uL2RyaXZlci1hcGkvc2VyaWFsL3NlcmlhbC1yczQ4NS5yc3QgICAgICAgIHwgIDIg
Ky0KIGRyaXZlcnMvdHR5L3NlcmlhbC84MjUwLzgyNTAuaCAgICAgICAgICAgICAgICB8ICA0ICst
CiBkcml2ZXJzL3R0eS9zZXJpYWwvODI1MC84MjUwX2R3bGliLmMgICAgICAgICAgfCAgNiArLS0K
IGRyaXZlcnMvdHR5L3NlcmlhbC84MjUwLzgyNTBfZXhhci5jICAgICAgICAgICB8IDEyICsrLS0t
CiBkcml2ZXJzL3R0eS9zZXJpYWwvODI1MC84MjUwX2ZpbnRlay5jICAgICAgICAgfCAgNiArLS0K
IGRyaXZlcnMvdHR5L3NlcmlhbC84MjUwLzgyNTBfbHBjMTh4eC5jICAgICAgICB8ICA0ICstCiBk
cml2ZXJzL3R0eS9zZXJpYWwvODI1MC84MjUwX3BjaS5jICAgICAgICAgICAgfCAgNCArLQogZHJp
dmVycy90dHkvc2VyaWFsLzgyNTAvODI1MF9wb3J0LmMgICAgICAgICAgIHwgIDQgKy0KIGRyaXZl
cnMvdHR5L3NlcmlhbC9hbWJhLXBsMDExLmMgICAgICAgICAgICAgICB8ICA0ICstCiBkcml2ZXJz
L3R0eS9zZXJpYWwvYXI5MzN4X3VhcnQuYyAgICAgICAgICAgICAgfCAgOCArKy0tCiBkcml2ZXJz
L3R0eS9zZXJpYWwvYXRtZWxfc2VyaWFsLmMgICAgICAgICAgICAgfCAgNCArLQogZHJpdmVycy90
dHkvc2VyaWFsL2ZzbF9scHVhcnQuYyAgICAgICAgICAgICAgIHwgIDYgKy0tCiBkcml2ZXJzL3R0
eS9zZXJpYWwvaW14LmMgICAgICAgICAgICAgICAgICAgICAgfCAgNiArLS0KIGRyaXZlcnMvdHR5
L3NlcmlhbC9tYXgzMTB4LmMgICAgICAgICAgICAgICAgICB8ICA0ICstCiBkcml2ZXJzL3R0eS9z
ZXJpYWwvbWNmLmMgICAgICAgICAgICAgICAgICAgICAgfCAgNCArLQogZHJpdmVycy90dHkvc2Vy
aWFsL29tYXAtc2VyaWFsLmMgICAgICAgICAgICAgIHwgIDYgKy0tCiBkcml2ZXJzL3R0eS9zZXJp
YWwvc2MxNmlzN3h4LmMgICAgICAgICAgICAgICAgfCAgNiArLS0KIGRyaXZlcnMvdHR5L3Nlcmlh
bC9zZXJpYWxfY29yZS5jICAgICAgICAgICAgICB8IDQ4ICsrKysrKysrKysrKystLS0tLS0KIGRy
aXZlcnMvdHR5L3NlcmlhbC9zdG0zMi11c2FydC5jICAgICAgICAgICAgICB8IDEyICsrLS0tCiBp
bmNsdWRlL2xpbnV4L3NlcmlhbF9jb3JlLmggICAgICAgICAgICAgICAgICAgfCAyMCArKysrKyst
LQogaW5jbHVkZS91YXBpL2xpbnV4L3NlcmlhbC5oICAgICAgICAgICAgICAgICAgIHwgIDMgKy0K
IDIxIGZpbGVzIGNoYW5nZWQsIDEwNCBpbnNlcnRpb25zKCspLCA2OSBkZWxldGlvbnMoLSkKCmRp
ZmYgLS1naXQgYS9Eb2N1bWVudGF0aW9uL2RyaXZlci1hcGkvc2VyaWFsL3NlcmlhbC1yczQ4NS5y
c3QgYi9Eb2N1bWVudGF0aW9uL2RyaXZlci1hcGkvc2VyaWFsL3NlcmlhbC1yczQ4NS5yc3QKaW5k
ZXggNmViYWQ3NWM3NGVkLi43ZTQ5NjMzNmEwMWIgMTAwNjQ0Ci0tLSBhL0RvY3VtZW50YXRpb24v
ZHJpdmVyLWFwaS9zZXJpYWwvc2VyaWFsLXJzNDg1LnJzdAorKysgYi9Eb2N1bWVudGF0aW9uL2Ry
aXZlci1hcGkvc2VyaWFsL3NlcmlhbC1yczQ4NS5yc3QKQEAgLTQxLDcgKzQxLDcgQEAgUlM0ODUg
U2VyaWFsIENvbW11bmljYXRpb25zCiAgICBpbXBsZW1lbnQgdGhlIHJzNDg1X2NvbmZpZyBjYWxs
YmFjayBhbmQgcHJvdmlkZSByczQ4NV9zdXBwb3J0ZWQgaW4gdGhlCiAgICB1YXJ0X3BvcnQgc3Ry
dWN0dXJlLiBUaGUgc2VyaWFsIGNvcmUgY2FsbHMgcnM0ODVfY29uZmlnIHRvIGRvIHRoZSBkZXZp
Y2UKICAgIHNwZWNpZmljIHBhcnQgaW4gcmVzcG9uc2UgdG8gVElPQ1NSUzQ4NSBpb2N0bCAoc2Vl
IGJlbG93KS4gVGhlIHJzNDg1X2NvbmZpZwotICAgY2FsbGJhY2sgcmVjZWl2ZXMgYSBwb2ludGVy
IHRvIGEgc2FuaXRpemF0ZWQgc2VyaWFsX3JzNDg1IHN0cnVjdHVyZS4gVGhlCisgICBjYWxsYmFj
ayByZWNlaXZlcyBhIHBvaW50ZXIgdG8gYSBzYW5pdGl6YXRlZCBrc2VyaWFsX3JzNDg1IHN0cnVj
dHVyZS4gVGhlCiAgICBzZXJpYWxfcnM0ODUgdXNlcnNwYWNlIHByb3ZpZGVzIGlzIHNhbml0aXpl
ZCBiZWZvcmUgY2FsbGluZyByczQ4NV9jb25maWcKICAgIHVzaW5nIHJzNDg1X3N1cHBvcnRlZCB0
aGF0IGluZGljYXRlcyB3aGF0IFJTNDg1IGZlYXR1cmVzIHRoZSBkcml2ZXIgc3VwcG9ydHMKICAg
IGZvciB0aGUgdWFydF9wb3J0LiBUSU9DR1JTNDg1IGlvY3RsIGNhbiBiZSB1c2VkIHRvIHJlYWQg
YmFjayB0aGUKZGlmZiAtLWdpdCBhL2RyaXZlcnMvdHR5L3NlcmlhbC84MjUwLzgyNTAuaCBiL2Ry
aXZlcnMvdHR5L3NlcmlhbC84MjUwLzgyNTAuaAppbmRleCAyODcxNTNkMzI1MzYuLjRlMjJmOGQ1
MGU5MSAxMDA2NDQKLS0tIGEvZHJpdmVycy90dHkvc2VyaWFsLzgyNTAvODI1MC5oCisrKyBiL2Ry
aXZlcnMvdHR5L3NlcmlhbC84MjUwLzgyNTAuaApAQCAtMjA0LDExICsyMDQsMTEgQEAgdm9pZCBz
ZXJpYWw4MjUwX3JwbV9nZXRfdHgoc3RydWN0IHVhcnRfODI1MF9wb3J0ICpwKTsKIHZvaWQgc2Vy
aWFsODI1MF9ycG1fcHV0X3R4KHN0cnVjdCB1YXJ0XzgyNTBfcG9ydCAqcCk7CiAKIGludCBzZXJp
YWw4MjUwX2VtNDg1X2NvbmZpZyhzdHJ1Y3QgdWFydF9wb3J0ICpwb3J0LCBzdHJ1Y3Qga3Rlcm1p
b3MgKnRlcm1pb3MsCi0JCQkgICAgc3RydWN0IHNlcmlhbF9yczQ4NSAqcnM0ODUpOworCQkJICAg
IHN0cnVjdCBrc2VyaWFsX3JzNDg1ICpyczQ4NSk7CiB2b2lkIHNlcmlhbDgyNTBfZW00ODVfc3Rh
cnRfdHgoc3RydWN0IHVhcnRfODI1MF9wb3J0ICpwKTsKIHZvaWQgc2VyaWFsODI1MF9lbTQ4NV9z
dG9wX3R4KHN0cnVjdCB1YXJ0XzgyNTBfcG9ydCAqcCk7CiB2b2lkIHNlcmlhbDgyNTBfZW00ODVf
ZGVzdHJveShzdHJ1Y3QgdWFydF84MjUwX3BvcnQgKnApOwotZXh0ZXJuIHN0cnVjdCBzZXJpYWxf
cnM0ODUgc2VyaWFsODI1MF9lbTQ4NV9zdXBwb3J0ZWQ7CitleHRlcm4gc3RydWN0IGtzZXJpYWxf
cnM0ODUgc2VyaWFsODI1MF9lbTQ4NV9zdXBwb3J0ZWQ7CiAKIC8qIE1DUiA8LT4gVElPQ00gY29u
dmVyc2lvbiAqLwogc3RhdGljIGlubGluZSBpbnQgc2VyaWFsODI1MF9USU9DTV90b19NQ1IoaW50
IHRpb2NtKQpkaWZmIC0tZ2l0IGEvZHJpdmVycy90dHkvc2VyaWFsLzgyNTAvODI1MF9kd2xpYi5j
IGIvZHJpdmVycy90dHkvc2VyaWFsLzgyNTAvODI1MF9kd2xpYi5jCmluZGV4IGRiZTRkNDRmNjBk
NC4uYTYyOGVkMmMyMzViIDEwMDY0NAotLS0gYS9kcml2ZXJzL3R0eS9zZXJpYWwvODI1MC84MjUw
X2R3bGliLmMKKysrIGIvZHJpdmVycy90dHkvc2VyaWFsLzgyNTAvODI1MF9kd2xpYi5jCkBAIC0x
MzQsNyArMTM0LDcgQEAgc3RhdGljIHZvaWQgZHc4MjUwX3VwZGF0ZV9yYXIoc3RydWN0IHVhcnRf
cG9ydCAqcCwgdTMyIGFkZHIpCiAJCWR3ODI1MF93cml0ZWxfZXh0KHAsIERXX1VBUlRfUkVfRU4s
IHJlX2VuKTsKIH0KIAotc3RhdGljIHZvaWQgZHc4MjUwX3JzNDg1X3NldF9hZGRyKHN0cnVjdCB1
YXJ0X3BvcnQgKnAsIHN0cnVjdCBzZXJpYWxfcnM0ODUgKnJzNDg1LAorc3RhdGljIHZvaWQgZHc4
MjUwX3JzNDg1X3NldF9hZGRyKHN0cnVjdCB1YXJ0X3BvcnQgKnAsIHN0cnVjdCBrc2VyaWFsX3Jz
NDg1ICpyczQ4NSwKIAkJCQkgIHN0cnVjdCBrdGVybWlvcyAqdGVybWlvcykKIHsKIAl1MzIgbGNy
ID0gZHc4MjUwX3JlYWRsX2V4dChwLCBEV19VQVJUX0xDUl9FWFQpOwpAQCAtMTc3LDcgKzE3Nyw3
IEBAIHN0YXRpYyB2b2lkIGR3ODI1MF9yczQ4NV9zZXRfYWRkcihzdHJ1Y3QgdWFydF9wb3J0ICpw
LCBzdHJ1Y3Qgc2VyaWFsX3JzNDg1ICpyczQ4CiB9CiAKIHN0YXRpYyBpbnQgZHc4MjUwX3JzNDg1
X2NvbmZpZyhzdHJ1Y3QgdWFydF9wb3J0ICpwLCBzdHJ1Y3Qga3Rlcm1pb3MgKnRlcm1pb3MsCi0J
CQkgICAgICAgc3RydWN0IHNlcmlhbF9yczQ4NSAqcnM0ODUpCisJCQkgICAgICAgc3RydWN0IGtz
ZXJpYWxfcnM0ODUgKnJzNDg1KQogewogCXUzMiB0Y3I7CiAKQEAgLTIzMiw3ICsyMzIsNyBAQCBz
dGF0aWMgYm9vbCBkdzgyNTBfZGV0ZWN0X3JzNDg1X2h3KHN0cnVjdCB1YXJ0X3BvcnQgKnApCiAJ
cmV0dXJuIHJlZzsKIH0KIAotc3RhdGljIGNvbnN0IHN0cnVjdCBzZXJpYWxfcnM0ODUgZHc4MjUw
X3JzNDg1X3N1cHBvcnRlZCA9IHsKK3N0YXRpYyBjb25zdCBzdHJ1Y3Qga3NlcmlhbF9yczQ4NSBk
dzgyNTBfcnM0ODVfc3VwcG9ydGVkID0gewogCS5mbGFncyA9IFNFUl9SUzQ4NV9FTkFCTEVEIHwg
U0VSX1JTNDg1X1JYX0RVUklOR19UWCB8IFNFUl9SUzQ4NV9SVFNfT05fU0VORCB8CiAJCSBTRVJf
UlM0ODVfUlRTX0FGVEVSX1NFTkQgfCBTRVJfUlM0ODVfQUREUkIgfCBTRVJfUlM0ODVfQUREUl9S
RUNWIHwKIAkJIFNFUl9SUzQ4NV9BRERSX0RFU1QsCmRpZmYgLS1naXQgYS9kcml2ZXJzL3R0eS9z
ZXJpYWwvODI1MC84MjUwX2V4YXIuYyBiL2RyaXZlcnMvdHR5L3NlcmlhbC84MjUwLzgyNTBfZXhh
ci5jCmluZGV4IDMxNGEwNWUwMDlkZi4uOWZlZjIwNTZhOWI1IDEwMDY0NAotLS0gYS9kcml2ZXJz
L3R0eS9zZXJpYWwvODI1MC84MjUwX2V4YXIuYworKysgYi9kcml2ZXJzL3R0eS9zZXJpYWwvODI1
MC84MjUwX2V4YXIuYwpAQCAtMTEzLDggKzExMyw4IEBAIHN0cnVjdCBleGFyODI1MDsKIAogc3Ry
dWN0IGV4YXI4MjUwX3BsYXRmb3JtIHsKIAlpbnQgKCpyczQ4NV9jb25maWcpKHN0cnVjdCB1YXJ0
X3BvcnQgKnBvcnQsIHN0cnVjdCBrdGVybWlvcyAqdGVybWlvcywKLQkJCSAgICBzdHJ1Y3Qgc2Vy
aWFsX3JzNDg1ICpyczQ4NSk7Ci0JY29uc3Qgc3RydWN0IHNlcmlhbF9yczQ4NSAqcnM0ODVfc3Vw
cG9ydGVkOworCQkJICAgIHN0cnVjdCBrc2VyaWFsX3JzNDg1ICpyczQ4NSk7CisJY29uc3Qgc3Ry
dWN0IGtzZXJpYWxfcnM0ODUgKnJzNDg1X3N1cHBvcnRlZDsKIAlpbnQgKCpyZWdpc3Rlcl9ncGlv
KShzdHJ1Y3QgcGNpX2RldiAqLCBzdHJ1Y3QgdWFydF84MjUwX3BvcnQgKik7CiAJdm9pZCAoKnVu
cmVnaXN0ZXJfZ3Bpbykoc3RydWN0IHVhcnRfODI1MF9wb3J0ICopOwogfTsKQEAgLTQxMSw3ICs0
MTEsNyBAQCBzdGF0aWMgdm9pZCB4cjE3djM1eF91bnJlZ2lzdGVyX2dwaW8oc3RydWN0IHVhcnRf
ODI1MF9wb3J0ICpwb3J0KQogfQogCiBzdGF0aWMgaW50IGdlbmVyaWNfcnM0ODVfY29uZmlnKHN0
cnVjdCB1YXJ0X3BvcnQgKnBvcnQsIHN0cnVjdCBrdGVybWlvcyAqdGVybWlvcywKLQkJCQlzdHJ1
Y3Qgc2VyaWFsX3JzNDg1ICpyczQ4NSkKKwkJCQlzdHJ1Y3Qga3NlcmlhbF9yczQ4NSAqcnM0ODUp
CiB7CiAJYm9vbCBpc19yczQ4NSA9ICEhKHJzNDg1LT5mbGFncyAmIFNFUl9SUzQ4NV9FTkFCTEVE
KTsKIAl1OCBfX2lvbWVtICpwID0gcG9ydC0+bWVtYmFzZTsKQEAgLTQzMSw3ICs0MzEsNyBAQCBz
dGF0aWMgaW50IGdlbmVyaWNfcnM0ODVfY29uZmlnKHN0cnVjdCB1YXJ0X3BvcnQgKnBvcnQsIHN0
cnVjdCBrdGVybWlvcyAqdGVybWlvcwogCXJldHVybiAwOwogfQogCi1zdGF0aWMgY29uc3Qgc3Ry
dWN0IHNlcmlhbF9yczQ4NSBnZW5lcmljX3JzNDg1X3N1cHBvcnRlZCA9IHsKK3N0YXRpYyBjb25z
dCBzdHJ1Y3Qga3NlcmlhbF9yczQ4NSBnZW5lcmljX3JzNDg1X3N1cHBvcnRlZCA9IHsKIAkuZmxh
Z3MgPSBTRVJfUlM0ODVfRU5BQkxFRCwKIH07CiAKQEAgLTQ0Myw3ICs0NDMsNyBAQCBzdGF0aWMg
Y29uc3Qgc3RydWN0IGV4YXI4MjUwX3BsYXRmb3JtIGV4YXI4MjUwX2RlZmF1bHRfcGxhdGZvcm0g
PSB7CiB9OwogCiBzdGF0aWMgaW50IGlvdDIwNDBfcnM0ODVfY29uZmlnKHN0cnVjdCB1YXJ0X3Bv
cnQgKnBvcnQsIHN0cnVjdCBrdGVybWlvcyAqdGVybWlvcywKLQkJCQlzdHJ1Y3Qgc2VyaWFsX3Jz
NDg1ICpyczQ4NSkKKwkJCQlzdHJ1Y3Qga3NlcmlhbF9yczQ4NSAqcnM0ODUpCiB7CiAJYm9vbCBp
c19yczQ4NSA9ICEhKHJzNDg1LT5mbGFncyAmIFNFUl9SUzQ4NV9FTkFCTEVEKTsKIAl1OCBfX2lv
bWVtICpwID0gcG9ydC0+bWVtYmFzZTsKQEAgLTQ3NSw3ICs0NzUsNyBAQCBzdGF0aWMgaW50IGlv
dDIwNDBfcnM0ODVfY29uZmlnKHN0cnVjdCB1YXJ0X3BvcnQgKnBvcnQsIHN0cnVjdCBrdGVybWlv
cyAqdGVybWlvcwogCXJldHVybiBnZW5lcmljX3JzNDg1X2NvbmZpZyhwb3J0LCB0ZXJtaW9zLCBy
czQ4NSk7CiB9CiAKLXN0YXRpYyBjb25zdCBzdHJ1Y3Qgc2VyaWFsX3JzNDg1IGlvdDIwNDBfcnM0
ODVfc3VwcG9ydGVkID0geworc3RhdGljIGNvbnN0IHN0cnVjdCBrc2VyaWFsX3JzNDg1IGlvdDIw
NDBfcnM0ODVfc3VwcG9ydGVkID0gewogCS5mbGFncyA9IFNFUl9SUzQ4NV9FTkFCTEVEIHwgU0VS
X1JTNDg1X1JYX0RVUklOR19UWCB8IFNFUl9SUzQ4NV9URVJNSU5BVEVfQlVTLAogfTsKIApkaWZm
IC0tZ2l0IGEvZHJpdmVycy90dHkvc2VyaWFsLzgyNTAvODI1MF9maW50ZWsuYyBiL2RyaXZlcnMv
dHR5L3NlcmlhbC84MjUwLzgyNTBfZmludGVrLmMKaW5kZXggNjViNmIzY2JhZmY2Li5kM2QyZTI1
ZGQwNmIgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvdHR5L3NlcmlhbC84MjUwLzgyNTBfZmludGVrLmMK
KysrIGIvZHJpdmVycy90dHkvc2VyaWFsLzgyNTAvODI1MF9maW50ZWsuYwpAQCAtMTkyLDcgKzE5
Miw3IEBAIHN0YXRpYyBpbnQgZmludGVrXzgyNTBfZ2V0X2xkbl9yYW5nZShzdHJ1Y3QgZmludGVr
XzgyNTAgKnBkYXRhLCBpbnQgKm1pbiwKIH0KIAogc3RhdGljIGludCBmaW50ZWtfODI1MF9yczQ4
NV9jb25maWcoc3RydWN0IHVhcnRfcG9ydCAqcG9ydCwgc3RydWN0IGt0ZXJtaW9zICp0ZXJtaW9z
LAotCQkJICAgICAgc3RydWN0IHNlcmlhbF9yczQ4NSAqcnM0ODUpCisJCQkgICAgICBzdHJ1Y3Qg
a3NlcmlhbF9yczQ4NSAqcnM0ODUpCiB7CiAJdWludDhfdCBjb25maWcgPSAwOwogCXN0cnVjdCBm
aW50ZWtfODI1MCAqcGRhdGEgPSBwb3J0LT5wcml2YXRlX2RhdGE7CkBAIC00MTEsMTMgKzQxMSwx
MyBAQCBzdGF0aWMgaW50IHByb2JlX3NldHVwX3BvcnQoc3RydWN0IGZpbnRla184MjUwICpwZGF0
YSwKIH0KIAogLyogT25seSB0aGUgZmlyc3QgcG9ydCBzdXBwb3J0cyBkZWxheXMgKi8KLXN0YXRp
YyBjb25zdCBzdHJ1Y3Qgc2VyaWFsX3JzNDg1IGZpbnRla184MjUwX3JzNDg1X3N1cHBvcnRlZF9w
b3J0MCA9IHsKK3N0YXRpYyBjb25zdCBzdHJ1Y3Qga3NlcmlhbF9yczQ4NSBmaW50ZWtfODI1MF9y
czQ4NV9zdXBwb3J0ZWRfcG9ydDAgPSB7CiAJLmZsYWdzID0gU0VSX1JTNDg1X0VOQUJMRUQgfCBT
RVJfUlM0ODVfUlRTX09OX1NFTkQgfCBTRVJfUlM0ODVfUlRTX0FGVEVSX1NFTkQsCiAJLmRlbGF5
X3J0c19iZWZvcmVfc2VuZCA9IDEsCiAJLmRlbGF5X3J0c19hZnRlcl9zZW5kID0gMSwKIH07CiAK
LXN0YXRpYyBjb25zdCBzdHJ1Y3Qgc2VyaWFsX3JzNDg1IGZpbnRla184MjUwX3JzNDg1X3N1cHBv
cnRlZCA9IHsKK3N0YXRpYyBjb25zdCBzdHJ1Y3Qga3NlcmlhbF9yczQ4NSBmaW50ZWtfODI1MF9y
czQ4NV9zdXBwb3J0ZWQgPSB7CiAJLmZsYWdzID0gU0VSX1JTNDg1X0VOQUJMRUQgfCBTRVJfUlM0
ODVfUlRTX09OX1NFTkQgfCBTRVJfUlM0ODVfUlRTX0FGVEVSX1NFTkQsCiB9OwogCmRpZmYgLS1n
aXQgYS9kcml2ZXJzL3R0eS9zZXJpYWwvODI1MC84MjUwX2xwYzE4eHguYyBiL2RyaXZlcnMvdHR5
L3NlcmlhbC84MjUwLzgyNTBfbHBjMTh4eC5jCmluZGV4IDZkYzg1YWFiYTVkMC4uMDYxOTQyNzY4
M2NmIDEwMDY0NAotLS0gYS9kcml2ZXJzL3R0eS9zZXJpYWwvODI1MC84MjUwX2xwYzE4eHguYwor
KysgYi9kcml2ZXJzL3R0eS9zZXJpYWwvODI1MC84MjUwX2xwYzE4eHguYwpAQCAtMzMsNyArMzMs
NyBAQCBzdHJ1Y3QgbHBjMTh4eF91YXJ0X2RhdGEgewogfTsKIAogc3RhdGljIGludCBscGMxOHh4
X3JzNDg1X2NvbmZpZyhzdHJ1Y3QgdWFydF9wb3J0ICpwb3J0LCBzdHJ1Y3Qga3Rlcm1pb3MgKnRl
cm1pb3MsCi0JCQkJc3RydWN0IHNlcmlhbF9yczQ4NSAqcnM0ODUpCisJCQkJc3RydWN0IGtzZXJp
YWxfcnM0ODUgKnJzNDg1KQogewogCXN0cnVjdCB1YXJ0XzgyNTBfcG9ydCAqdXAgPSB1cF90b191
ODI1MHAocG9ydCk7CiAJdTMyIHJzNDg1X2N0cmxfcmVnID0gMDsKQEAgLTgxLDcgKzgxLDcgQEAg
c3RhdGljIHZvaWQgbHBjMTh4eF91YXJ0X3NlcmlhbF9vdXQoc3RydWN0IHVhcnRfcG9ydCAqcCwg
aW50IG9mZnNldCwgaW50IHZhbHVlKQogCXdyaXRlbCh2YWx1ZSwgcC0+bWVtYmFzZSArIG9mZnNl
dCk7CiB9CiAKLXN0YXRpYyBjb25zdCBzdHJ1Y3Qgc2VyaWFsX3JzNDg1IGxwYzE4eHhfcnM0ODVf
c3VwcG9ydGVkID0geworc3RhdGljIGNvbnN0IHN0cnVjdCBrc2VyaWFsX3JzNDg1IGxwYzE4eHhf
cnM0ODVfc3VwcG9ydGVkID0gewogCS5mbGFncyA9IFNFUl9SUzQ4NV9FTkFCTEVEIHwgU0VSX1JT
NDg1X1JUU19PTl9TRU5EIHwgU0VSX1JTNDg1X1JUU19BRlRFUl9TRU5ELAogCS5kZWxheV9ydHNf
YWZ0ZXJfc2VuZCA9IDEsCiAJLyogRGVsYXkgUlRTIGJlZm9yZSBzZW5kIGlzIG5vdCBzdXBwb3J0
ZWQgKi8KZGlmZiAtLWdpdCBhL2RyaXZlcnMvdHR5L3NlcmlhbC84MjUwLzgyNTBfcGNpLmMgYi9k
cml2ZXJzL3R0eS9zZXJpYWwvODI1MC84MjUwX3BjaS5jCmluZGV4IDZmNjZkYzJlYmFjYy4uODY3
NWIwZDk2NThkIDEwMDY0NAotLS0gYS9kcml2ZXJzL3R0eS9zZXJpYWwvODI1MC84MjUwX3BjaS5j
CisrKyBiL2RyaXZlcnMvdHR5L3NlcmlhbC84MjUwLzgyNTBfcGNpLmMKQEAgLTE1NTQsNyArMTU1
NCw3IEBAIHBjaV9icmNtX3RydW1hbmFnZV9zZXR1cChzdHJ1Y3Qgc2VyaWFsX3ByaXZhdGUgKnBy
aXYsCiAKIC8qIFdlIHNob3VsZCBkbyBwcm9wZXIgSC9XIHRyYW5zY2VpdmVyIHNldHRpbmcgYmVm
b3JlIGNoYW5nZSB0byBSUzQ4NSBtb2RlICovCiBzdGF0aWMgaW50IHBjaV9maW50ZWtfcnM0ODVf
Y29uZmlnKHN0cnVjdCB1YXJ0X3BvcnQgKnBvcnQsIHN0cnVjdCBrdGVybWlvcyAqdGVybWlvcywK
LQkJCSAgICAgICBzdHJ1Y3Qgc2VyaWFsX3JzNDg1ICpyczQ4NSkKKwkJCSAgICAgICBzdHJ1Y3Qg
a3NlcmlhbF9yczQ4NSAqcnM0ODUpCiB7CiAJc3RydWN0IHBjaV9kZXYgKnBjaV9kZXYgPSB0b19w
Y2lfZGV2KHBvcnQtPmRldik7CiAJdTggc2V0dGluZzsKQEAgLTE1ODMsNyArMTU4Myw3IEBAIHN0
YXRpYyBpbnQgcGNpX2ZpbnRla19yczQ4NV9jb25maWcoc3RydWN0IHVhcnRfcG9ydCAqcG9ydCwg
c3RydWN0IGt0ZXJtaW9zICp0ZXJtCiAJcmV0dXJuIDA7CiB9CiAKLXN0YXRpYyBjb25zdCBzdHJ1
Y3Qgc2VyaWFsX3JzNDg1IHBjaV9maW50ZWtfcnM0ODVfc3VwcG9ydGVkID0geworc3RhdGljIGNv
bnN0IHN0cnVjdCBrc2VyaWFsX3JzNDg1IHBjaV9maW50ZWtfcnM0ODVfc3VwcG9ydGVkID0gewog
CS5mbGFncyA9IFNFUl9SUzQ4NV9FTkFCTEVEIHwgU0VSX1JTNDg1X1JUU19PTl9TRU5ELAogCS8q
IEY4MTUwNC81MDgvNTEyIGRvZXMgbm90IHN1cHBvcnQgUlRTIGRlbGF5IGJlZm9yZSBvciBhZnRl
ciBzZW5kICovCiB9OwpkaWZmIC0tZ2l0IGEvZHJpdmVycy90dHkvc2VyaWFsLzgyNTAvODI1MF9w
b3J0LmMgYi9kcml2ZXJzL3R0eS9zZXJpYWwvODI1MC84MjUwX3BvcnQuYwppbmRleCAzOWIzNWE2
MTk1OGMuLjIzNDViNmZiYWM2ZCAxMDA2NDQKLS0tIGEvZHJpdmVycy90dHkvc2VyaWFsLzgyNTAv
ODI1MF9wb3J0LmMKKysrIGIvZHJpdmVycy90dHkvc2VyaWFsLzgyNTAvODI1MF9wb3J0LmMKQEAg
LTY0Nyw3ICs2NDcsNyBAQCB2b2lkIHNlcmlhbDgyNTBfZW00ODVfZGVzdHJveShzdHJ1Y3QgdWFy
dF84MjUwX3BvcnQgKnApCiB9CiBFWFBPUlRfU1lNQk9MX0dQTChzZXJpYWw4MjUwX2VtNDg1X2Rl
c3Ryb3kpOwogCi1zdHJ1Y3Qgc2VyaWFsX3JzNDg1IHNlcmlhbDgyNTBfZW00ODVfc3VwcG9ydGVk
ID0geworc3RydWN0IGtzZXJpYWxfcnM0ODUgc2VyaWFsODI1MF9lbTQ4NV9zdXBwb3J0ZWQgPSB7
CiAJLmZsYWdzID0gU0VSX1JTNDg1X0VOQUJMRUQgfCBTRVJfUlM0ODVfUlRTX09OX1NFTkQgfCBT
RVJfUlM0ODVfUlRTX0FGVEVSX1NFTkQgfAogCQkgU0VSX1JTNDg1X1RFUk1JTkFURV9CVVMgfCBT
RVJfUlM0ODVfUlhfRFVSSU5HX1RYLAogCS5kZWxheV9ydHNfYmVmb3JlX3NlbmQgPSAxLApAQCAt
NjY1LDcgKzY2NSw3IEBAIEVYUE9SVF9TWU1CT0xfR1BMKHNlcmlhbDgyNTBfZW00ODVfc3VwcG9y
dGVkKTsKICAqIGhhcmR3YXJlLCByZWx5aW5nIG9uIHNvZnR3YXJlIGVtdWxhdGlvbiBpbnN0ZWFk
LgogICovCiBpbnQgc2VyaWFsODI1MF9lbTQ4NV9jb25maWcoc3RydWN0IHVhcnRfcG9ydCAqcG9y
dCwgc3RydWN0IGt0ZXJtaW9zICp0ZXJtaW9zLAotCQkJICAgIHN0cnVjdCBzZXJpYWxfcnM0ODUg
KnJzNDg1KQorCQkJICAgIHN0cnVjdCBrc2VyaWFsX3JzNDg1ICpyczQ4NSkKIHsKIAlzdHJ1Y3Qg
dWFydF84MjUwX3BvcnQgKnVwID0gdXBfdG9fdTgyNTBwKHBvcnQpOwogCmRpZmYgLS1naXQgYS9k
cml2ZXJzL3R0eS9zZXJpYWwvYW1iYS1wbDAxMS5jIGIvZHJpdmVycy90dHkvc2VyaWFsL2FtYmEt
cGwwMTEuYwppbmRleCAxNWYwZTRkODhjNWEuLmU3OGNkMDc1OWRjMSAxMDA2NDQKLS0tIGEvZHJp
dmVycy90dHkvc2VyaWFsL2FtYmEtcGwwMTEuYworKysgYi9kcml2ZXJzL3R0eS9zZXJpYWwvYW1i
YS1wbDAxMS5jCkBAIC0yMjE1LDcgKzIyMTUsNyBAQCBzdGF0aWMgaW50IHBsMDExX3ZlcmlmeV9w
b3J0KHN0cnVjdCB1YXJ0X3BvcnQgKnBvcnQsIHN0cnVjdCBzZXJpYWxfc3RydWN0ICpzZXIpCiB9
CiAKIHN0YXRpYyBpbnQgcGwwMTFfcnM0ODVfY29uZmlnKHN0cnVjdCB1YXJ0X3BvcnQgKnBvcnQs
IHN0cnVjdCBrdGVybWlvcyAqdGVybWlvcywKLQkJCSAgICAgIHN0cnVjdCBzZXJpYWxfcnM0ODUg
KnJzNDg1KQorCQkJICAgICAgc3RydWN0IGtzZXJpYWxfcnM0ODUgKnJzNDg1KQogewogCXN0cnVj
dCB1YXJ0X2FtYmFfcG9ydCAqdWFwID0KIAkJY29udGFpbmVyX29mKHBvcnQsIHN0cnVjdCB1YXJ0
X2FtYmFfcG9ydCwgcG9ydCk7CkBAIC0yNzY1LDcgKzI3NjUsNyBAQCBzdGF0aWMgaW50IHBsMDEx
X3JlZ2lzdGVyX3BvcnQoc3RydWN0IHVhcnRfYW1iYV9wb3J0ICp1YXApCiAJcmV0dXJuIHJldDsK
IH0KIAotc3RhdGljIGNvbnN0IHN0cnVjdCBzZXJpYWxfcnM0ODUgcGwwMTFfcnM0ODVfc3VwcG9y
dGVkID0geworc3RhdGljIGNvbnN0IHN0cnVjdCBrc2VyaWFsX3JzNDg1IHBsMDExX3JzNDg1X3N1
cHBvcnRlZCA9IHsKIAkuZmxhZ3MgPSBTRVJfUlM0ODVfRU5BQkxFRCB8IFNFUl9SUzQ4NV9SVFNf
T05fU0VORCB8IFNFUl9SUzQ4NV9SVFNfQUZURVJfU0VORCB8CiAJCSBTRVJfUlM0ODVfUlhfRFVS
SU5HX1RYLAogCS5kZWxheV9ydHNfYmVmb3JlX3NlbmQgPSAxLApkaWZmIC0tZ2l0IGEvZHJpdmVy
cy90dHkvc2VyaWFsL2FyOTMzeF91YXJ0LmMgYi9kcml2ZXJzL3R0eS9zZXJpYWwvYXI5MzN4X3Vh
cnQuYwppbmRleCAzMmNhZWFjMTI5ODUuLjMwYzcxNmI0YTEwNSAxMDA2NDQKLS0tIGEvZHJpdmVy
cy90dHkvc2VyaWFsL2FyOTMzeF91YXJ0LmMKKysrIGIvZHJpdmVycy90dHkvc2VyaWFsL2FyOTMz
eF91YXJ0LmMKQEAgLTM5MSw3ICszOTEsNyBAQCBzdGF0aWMgdm9pZCBhcjkzM3hfdWFydF9yeF9j
aGFycyhzdHJ1Y3QgYXI5MzN4X3VhcnRfcG9ydCAqdXApCiBzdGF0aWMgdm9pZCBhcjkzM3hfdWFy
dF90eF9jaGFycyhzdHJ1Y3QgYXI5MzN4X3VhcnRfcG9ydCAqdXApCiB7CiAJc3RydWN0IGNpcmNf
YnVmICp4bWl0ID0gJnVwLT5wb3J0LnN0YXRlLT54bWl0OwotCXN0cnVjdCBzZXJpYWxfcnM0ODUg
KnJzNDg1Y29uZiA9ICZ1cC0+cG9ydC5yczQ4NTsKKwlzdHJ1Y3Qga3NlcmlhbF9yczQ4NSAqcnM0
ODVjb25mID0gJnVwLT5wb3J0LnJzNDg1OwogCWludCBjb3VudDsKIAlib29sIGhhbGZfZHVwbGV4
X3NlbmQgPSBmYWxzZTsKIApAQCAtNTgxLDcgKzU4MSw3IEBAIHN0YXRpYyBjb25zdCBzdHJ1Y3Qg
dWFydF9vcHMgYXI5MzN4X3VhcnRfb3BzID0gewogfTsKIAogc3RhdGljIGludCBhcjkzM3hfY29u
ZmlnX3JzNDg1KHN0cnVjdCB1YXJ0X3BvcnQgKnBvcnQsIHN0cnVjdCBrdGVybWlvcyAqdGVybWlv
cywKLQkJCQlzdHJ1Y3Qgc2VyaWFsX3JzNDg1ICpyczQ4NWNvbmYpCisJCQkJc3RydWN0IGtzZXJp
YWxfcnM0ODUgKnJzNDg1Y29uZikKIHsKIAlyZXR1cm4gMDsKIH0KQEAgLTY5Myw4ICs2OTMsOCBA
QCBzdGF0aWMgc3RydWN0IHVhcnRfZHJpdmVyIGFyOTMzeF91YXJ0X2RyaXZlciA9IHsKIAkuY29u
cwkJPSBOVUxMLCAvKiBmaWxsZWQgaW4gcnVudGltZSAqLwogfTsKIAotc3RhdGljIGNvbnN0IHN0
cnVjdCBzZXJpYWxfcnM0ODUgYXI5MzN4X25vX3JzNDg1ID0ge307Ci1zdGF0aWMgY29uc3Qgc3Ry
dWN0IHNlcmlhbF9yczQ4NSBhcjkzM3hfcnM0ODVfc3VwcG9ydGVkID0geworc3RhdGljIGNvbnN0
IHN0cnVjdCBrc2VyaWFsX3JzNDg1IGFyOTMzeF9ub19yczQ4NSA9IHt9Oworc3RhdGljIGNvbnN0
IHN0cnVjdCBrc2VyaWFsX3JzNDg1IGFyOTMzeF9yczQ4NV9zdXBwb3J0ZWQgPSB7CiAJLmZsYWdz
ID0gU0VSX1JTNDg1X0VOQUJMRUQgfCBTRVJfUlM0ODVfUlRTX09OX1NFTkQgfCBTRVJfUlM0ODVf
UlRTX0FGVEVSX1NFTkQsCiB9OwogCmRpZmYgLS1naXQgYS9kcml2ZXJzL3R0eS9zZXJpYWwvYXRt
ZWxfc2VyaWFsLmMgYi9kcml2ZXJzL3R0eS9zZXJpYWwvYXRtZWxfc2VyaWFsLmMKaW5kZXggMzBi
YTllZWY3YjM5Li5iZTAyOTY3MTQ1ODUgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvdHR5L3NlcmlhbC9h
dG1lbF9zZXJpYWwuYworKysgYi9kcml2ZXJzL3R0eS9zZXJpYWwvYXRtZWxfc2VyaWFsLmMKQEAg
LTI4NCw3ICsyODQsNyBAQCBzdGF0aWMgdm9pZCBhdG1lbF90YXNrbGV0X3NjaGVkdWxlKHN0cnVj
dCBhdG1lbF91YXJ0X3BvcnQgKmF0bWVsX3BvcnQsCiAKIC8qIEVuYWJsZSBvciBkaXNhYmxlIHRo
ZSByczQ4NSBzdXBwb3J0ICovCiBzdGF0aWMgaW50IGF0bWVsX2NvbmZpZ19yczQ4NShzdHJ1Y3Qg
dWFydF9wb3J0ICpwb3J0LCBzdHJ1Y3Qga3Rlcm1pb3MgKnRlcm1pb3MsCi0JCQkgICAgICBzdHJ1
Y3Qgc2VyaWFsX3JzNDg1ICpyczQ4NWNvbmYpCisJCQkgICAgICBzdHJ1Y3Qga3NlcmlhbF9yczQ4
NSAqcnM0ODVjb25mKQogewogCXN0cnVjdCBhdG1lbF91YXJ0X3BvcnQgKmF0bWVsX3BvcnQgPSB0
b19hdG1lbF91YXJ0X3BvcnQocG9ydCk7CiAJdW5zaWduZWQgaW50IG1vZGU7CkBAIC0yNDcxLDcg
KzI0NzEsNyBAQCBzdGF0aWMgY29uc3Qgc3RydWN0IHVhcnRfb3BzIGF0bWVsX3BvcHMgPSB7CiAj
ZW5kaWYKIH07CiAKLXN0YXRpYyBjb25zdCBzdHJ1Y3Qgc2VyaWFsX3JzNDg1IGF0bWVsX3JzNDg1
X3N1cHBvcnRlZCA9IHsKK3N0YXRpYyBjb25zdCBzdHJ1Y3Qga3NlcmlhbF9yczQ4NSBhdG1lbF9y
czQ4NV9zdXBwb3J0ZWQgPSB7CiAJLmZsYWdzID0gU0VSX1JTNDg1X0VOQUJMRUQgfCBTRVJfUlM0
ODVfUlRTX0FGVEVSX1NFTkQgfCBTRVJfUlM0ODVfUlhfRFVSSU5HX1RYLAogCS5kZWxheV9ydHNf
YmVmb3JlX3NlbmQgPSAxLAogCS5kZWxheV9ydHNfYWZ0ZXJfc2VuZCA9IDEsCmRpZmYgLS1naXQg
YS9kcml2ZXJzL3R0eS9zZXJpYWwvZnNsX2xwdWFydC5jIGIvZHJpdmVycy90dHkvc2VyaWFsL2Zz
bF9scHVhcnQuYwppbmRleCBmNmMzM2NkMjI4YzguLjdiMjhjYjhiZWUxZSAxMDA2NDQKLS0tIGEv
ZHJpdmVycy90dHkvc2VyaWFsL2ZzbF9scHVhcnQuYworKysgYi9kcml2ZXJzL3R0eS9zZXJpYWwv
ZnNsX2xwdWFydC5jCkBAIC0xMzc0LDcgKzEzNzQsNyBAQCBzdGF0aWMgdm9pZCBscHVhcnRfZG1h
X3J4X2ZyZWUoc3RydWN0IHVhcnRfcG9ydCAqcG9ydCkKIH0KIAogc3RhdGljIGludCBscHVhcnRf
Y29uZmlnX3JzNDg1KHN0cnVjdCB1YXJ0X3BvcnQgKnBvcnQsIHN0cnVjdCBrdGVybWlvcyAqdGVy
bWlvcywKLQkJCXN0cnVjdCBzZXJpYWxfcnM0ODUgKnJzNDg1KQorCQkJc3RydWN0IGtzZXJpYWxf
cnM0ODUgKnJzNDg1KQogewogCXN0cnVjdCBscHVhcnRfcG9ydCAqc3BvcnQgPSBjb250YWluZXJf
b2YocG9ydCwKIAkJCXN0cnVjdCBscHVhcnRfcG9ydCwgcG9ydCk7CkBAIC0xNDA0LDcgKzE0MDQs
NyBAQCBzdGF0aWMgaW50IGxwdWFydF9jb25maWdfcnM0ODUoc3RydWN0IHVhcnRfcG9ydCAqcG9y
dCwgc3RydWN0IGt0ZXJtaW9zICp0ZXJtaW9zLAogfQogCiBzdGF0aWMgaW50IGxwdWFydDMyX2Nv
bmZpZ19yczQ4NShzdHJ1Y3QgdWFydF9wb3J0ICpwb3J0LCBzdHJ1Y3Qga3Rlcm1pb3MgKnRlcm1p
b3MsCi0JCQlzdHJ1Y3Qgc2VyaWFsX3JzNDg1ICpyczQ4NSkKKwkJCXN0cnVjdCBrc2VyaWFsX3Jz
NDg1ICpyczQ4NSkKIHsKIAlzdHJ1Y3QgbHB1YXJ0X3BvcnQgKnNwb3J0ID0gY29udGFpbmVyX29m
KHBvcnQsCiAJCQlzdHJ1Y3QgbHB1YXJ0X3BvcnQsIHBvcnQpOwpAQCAtMjYzMyw3ICsyNjMzLDcg
QEAgc3RhdGljIHN0cnVjdCB1YXJ0X2RyaXZlciBscHVhcnRfcmVnID0gewogCS5jb25zCQk9IExQ
VUFSVF9DT05TT0xFLAogfTsKIAotc3RhdGljIGNvbnN0IHN0cnVjdCBzZXJpYWxfcnM0ODUgbHB1
YXJ0X3JzNDg1X3N1cHBvcnRlZCA9IHsKK3N0YXRpYyBjb25zdCBzdHJ1Y3Qga3NlcmlhbF9yczQ4
NSBscHVhcnRfcnM0ODVfc3VwcG9ydGVkID0gewogCS5mbGFncyA9IFNFUl9SUzQ4NV9FTkFCTEVE
IHwgU0VSX1JTNDg1X1JUU19PTl9TRU5EIHwgU0VSX1JTNDg1X1JUU19BRlRFUl9TRU5ELAogCS8q
IGRlbGF5X3J0c18qIGFuZCBSWF9EVVJJTkdfVFggYXJlIG5vdCBzdXBwb3J0ZWQgKi8KIH07CmRp
ZmYgLS1naXQgYS9kcml2ZXJzL3R0eS9zZXJpYWwvaW14LmMgYi9kcml2ZXJzL3R0eS9zZXJpYWwv
aW14LmMKaW5kZXggNTIyNDQ1YThmNjY2Li4wNzY4ZTgyNzAxNTMgMTAwNjQ0Ci0tLSBhL2RyaXZl
cnMvdHR5L3NlcmlhbC9pbXguYworKysgYi9kcml2ZXJzL3R0eS9zZXJpYWwvaW14LmMKQEAgLTE5
MDgsNyArMTkwOCw3IEBAIHN0YXRpYyB2b2lkIGlteF91YXJ0X3BvbGxfcHV0X2NoYXIoc3RydWN0
IHVhcnRfcG9ydCAqcG9ydCwgdW5zaWduZWQgY2hhciBjKQogCiAvKiBjYWxsZWQgd2l0aCBwb3J0
LmxvY2sgdGFrZW4gYW5kIGlycXMgb2ZmIG9yIGZyb20gLnByb2JlIHdpdGhvdXQgbG9ja2luZyAq
Lwogc3RhdGljIGludCBpbXhfdWFydF9yczQ4NV9jb25maWcoc3RydWN0IHVhcnRfcG9ydCAqcG9y
dCwgc3RydWN0IGt0ZXJtaW9zICp0ZXJtaW9zLAotCQkJCSBzdHJ1Y3Qgc2VyaWFsX3JzNDg1ICpy
czQ4NWNvbmYpCisJCQkJIHN0cnVjdCBrc2VyaWFsX3JzNDg1ICpyczQ4NWNvbmYpCiB7CiAJc3Ry
dWN0IGlteF9wb3J0ICpzcG9ydCA9IChzdHJ1Y3QgaW14X3BvcnQgKilwb3J0OwogCXUzMiB1Y3Iy
OwpAQCAtMjE5Niw4ICsyMTk2LDggQEAgc3RhdGljIGVudW0gaHJ0aW1lcl9yZXN0YXJ0IGlteF90
cmlnZ2VyX3N0b3BfdHgoc3RydWN0IGhydGltZXIgKnQpCiAJcmV0dXJuIEhSVElNRVJfTk9SRVNU
QVJUOwogfQogCi1zdGF0aWMgY29uc3Qgc3RydWN0IHNlcmlhbF9yczQ4NSBpbXhfbm9fcnM0ODUg
PSB7fTsJLyogTm8gUlM0ODUgaWYgbm8gUlRTICovCi1zdGF0aWMgY29uc3Qgc3RydWN0IHNlcmlh
bF9yczQ4NSBpbXhfcnM0ODVfc3VwcG9ydGVkID0geworc3RhdGljIGNvbnN0IHN0cnVjdCBrc2Vy
aWFsX3JzNDg1IGlteF9ub19yczQ4NSA9IHt9OwkvKiBObyBSUzQ4NSBpZiBubyBSVFMgKi8KK3N0
YXRpYyBjb25zdCBzdHJ1Y3Qga3NlcmlhbF9yczQ4NSBpbXhfcnM0ODVfc3VwcG9ydGVkID0gewog
CS5mbGFncyA9IFNFUl9SUzQ4NV9FTkFCTEVEIHwgU0VSX1JTNDg1X1JUU19PTl9TRU5EIHwgU0VS
X1JTNDg1X1JUU19BRlRFUl9TRU5EIHwKIAkJIFNFUl9SUzQ4NV9SWF9EVVJJTkdfVFgsCiAJLmRl
bGF5X3J0c19iZWZvcmVfc2VuZCA9IDEsCmRpZmYgLS1naXQgYS9kcml2ZXJzL3R0eS9zZXJpYWwv
bWF4MzEweC5jIGIvZHJpdmVycy90dHkvc2VyaWFsL21heDMxMHguYwppbmRleCBhYjEwY2E0YTQ1
YjUuLjZhOGFiNjNkMTA3MiAxMDA2NDQKLS0tIGEvZHJpdmVycy90dHkvc2VyaWFsL21heDMxMHgu
YworKysgYi9kcml2ZXJzL3R0eS9zZXJpYWwvbWF4MzEweC5jCkBAIC0xMDM3LDcgKzEwMzcsNyBA
QCBzdGF0aWMgdm9pZCBtYXgzMTB4X3JzX3Byb2Moc3RydWN0IHdvcmtfc3RydWN0ICp3cykKIH0K
IAogc3RhdGljIGludCBtYXgzMTB4X3JzNDg1X2NvbmZpZyhzdHJ1Y3QgdWFydF9wb3J0ICpwb3J0
LCBzdHJ1Y3Qga3Rlcm1pb3MgKnRlcm1pb3MsCi0JCQkJc3RydWN0IHNlcmlhbF9yczQ4NSAqcnM0
ODUpCisJCQkJc3RydWN0IGtzZXJpYWxfcnM0ODUgKnJzNDg1KQogewogCXN0cnVjdCBtYXgzMTB4
X29uZSAqb25lID0gdG9fbWF4MzEweF9wb3J0KHBvcnQpOwogCkBAIC0xMjU3LDcgKzEyNTcsNyBA
QCBzdGF0aWMgaW50IG1heDMxMHhfZ3Bpb19zZXRfY29uZmlnKHN0cnVjdCBncGlvX2NoaXAgKmNo
aXAsIHVuc2lnbmVkIGludCBvZmZzZXQsCiB9CiAjZW5kaWYKIAotc3RhdGljIGNvbnN0IHN0cnVj
dCBzZXJpYWxfcnM0ODUgbWF4MzEweF9yczQ4NV9zdXBwb3J0ZWQgPSB7CitzdGF0aWMgY29uc3Qg
c3RydWN0IGtzZXJpYWxfcnM0ODUgbWF4MzEweF9yczQ4NV9zdXBwb3J0ZWQgPSB7CiAJLmZsYWdz
ID0gU0VSX1JTNDg1X0VOQUJMRUQgfCBTRVJfUlM0ODVfUlRTX09OX1NFTkQgfCBTRVJfUlM0ODVf
UlhfRFVSSU5HX1RYLAogCS5kZWxheV9ydHNfYmVmb3JlX3NlbmQgPSAxLAogCS5kZWxheV9ydHNf
YWZ0ZXJfc2VuZCA9IDEsCmRpZmYgLS1naXQgYS9kcml2ZXJzL3R0eS9zZXJpYWwvbWNmLmMgYi9k
cml2ZXJzL3R0eS9zZXJpYWwvbWNmLmMKaW5kZXggZjRhYWFhZGQwNzQyLi45Yzg2MjE4YWUyOWQg
MTAwNjQ0Ci0tLSBhL2RyaXZlcnMvdHR5L3NlcmlhbC9tY2YuYworKysgYi9kcml2ZXJzL3R0eS9z
ZXJpYWwvbWNmLmMKQEAgLTQzMiw3ICs0MzIsNyBAQCBzdGF0aWMgaW50IG1jZl92ZXJpZnlfcG9y
dChzdHJ1Y3QgdWFydF9wb3J0ICpwb3J0LCBzdHJ1Y3Qgc2VyaWFsX3N0cnVjdCAqc2VyKQogCiAv
KiBFbmFibGUgb3IgZGlzYWJsZSB0aGUgUlM0ODUgc3VwcG9ydCAqLwogc3RhdGljIGludCBtY2Zf
Y29uZmlnX3JzNDg1KHN0cnVjdCB1YXJ0X3BvcnQgKnBvcnQsIHN0cnVjdCBrdGVybWlvcyAqdGVy
bWlvcywKLQkJCSAgICBzdHJ1Y3Qgc2VyaWFsX3JzNDg1ICpyczQ4NSkKKwkJCSAgICBzdHJ1Y3Qg
a3NlcmlhbF9yczQ4NSAqcnM0ODUpCiB7CiAJdW5zaWduZWQgY2hhciBtcjEsIG1yMjsKIApAQCAt
NDUzLDcgKzQ1Myw3IEBAIHN0YXRpYyBpbnQgbWNmX2NvbmZpZ19yczQ4NShzdHJ1Y3QgdWFydF9w
b3J0ICpwb3J0LCBzdHJ1Y3Qga3Rlcm1pb3MgKnRlcm1pb3MsCiAJcmV0dXJuIDA7CiB9CiAKLXN0
YXRpYyBjb25zdCBzdHJ1Y3Qgc2VyaWFsX3JzNDg1IG1jZl9yczQ4NV9zdXBwb3J0ZWQgPSB7Citz
dGF0aWMgY29uc3Qgc3RydWN0IGtzZXJpYWxfcnM0ODUgbWNmX3JzNDg1X3N1cHBvcnRlZCA9IHsK
IAkuZmxhZ3MgPSBTRVJfUlM0ODVfRU5BQkxFRCB8IFNFUl9SUzQ4NV9SVFNfQUZURVJfU0VORCwK
IH07CiAKZGlmZiAtLWdpdCBhL2RyaXZlcnMvdHR5L3NlcmlhbC9vbWFwLXNlcmlhbC5jIGIvZHJp
dmVycy90dHkvc2VyaWFsL29tYXAtc2VyaWFsLmMKaW5kZXggMGFhNjY2ZTI0N2Q1Li4wMTNkODQz
ODMzYTkgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvdHR5L3NlcmlhbC9vbWFwLXNlcmlhbC5jCisrKyBi
L2RyaXZlcnMvdHR5L3NlcmlhbC9vbWFwLXNlcmlhbC5jCkBAIC0xMzI1LDcgKzEzMjUsNyBAQCBz
dGF0aWMgaW5saW5lIHZvaWQgc2VyaWFsX29tYXBfYWRkX2NvbnNvbGVfcG9ydChzdHJ1Y3QgdWFy
dF9vbWFwX3BvcnQgKnVwKQogLyogRW5hYmxlIG9yIGRpc2FibGUgdGhlIHJzNDg1IHN1cHBvcnQg
Ki8KIHN0YXRpYyBpbnQKIHNlcmlhbF9vbWFwX2NvbmZpZ19yczQ4NShzdHJ1Y3QgdWFydF9wb3J0
ICpwb3J0LCBzdHJ1Y3Qga3Rlcm1pb3MgKnRlcm1pb3MsCi0JCQkgc3RydWN0IHNlcmlhbF9yczQ4
NSAqcnM0ODUpCisJCQkgc3RydWN0IGtzZXJpYWxfcnM0ODUgKnJzNDg1KQogewogCXN0cnVjdCB1
YXJ0X29tYXBfcG9ydCAqdXAgPSB0b191YXJ0X29tYXBfcG9ydChwb3J0KTsKIAl1bnNpZ25lZCBp
bnQgbW9kZTsKQEAgLTE1MTYsNyArMTUxNiw3IEBAIHN0YXRpYyBzdHJ1Y3Qgb21hcF91YXJ0X3Bv
cnRfaW5mbyAqb2ZfZ2V0X3VhcnRfcG9ydF9pbmZvKHN0cnVjdCBkZXZpY2UgKmRldikKIHN0YXRp
YyBpbnQgc2VyaWFsX29tYXBfcHJvYmVfcnM0ODUoc3RydWN0IHVhcnRfb21hcF9wb3J0ICp1cCwK
IAkJCQkgICBzdHJ1Y3QgZGV2aWNlICpkZXYpCiB7Ci0Jc3RydWN0IHNlcmlhbF9yczQ4NSAqcnM0
ODVjb25mID0gJnVwLT5wb3J0LnJzNDg1OworCXN0cnVjdCBrc2VyaWFsX3JzNDg1ICpyczQ4NWNv
bmYgPSAmdXAtPnBvcnQucnM0ODU7CiAJc3RydWN0IGRldmljZV9ub2RlICpucCA9IGRldi0+b2Zf
bm9kZTsKIAllbnVtIGdwaW9kX2ZsYWdzIGdmbGFnczsKIAlpbnQgcmV0OwpAQCAtMTU1OSw3ICsx
NTU5LDcgQEAgc3RhdGljIGludCBzZXJpYWxfb21hcF9wcm9iZV9yczQ4NShzdHJ1Y3QgdWFydF9v
bWFwX3BvcnQgKnVwLAogCXJldHVybiAwOwogfQogCi1zdGF0aWMgY29uc3Qgc3RydWN0IHNlcmlh
bF9yczQ4NSBzZXJpYWxfb21hcF9yczQ4NV9zdXBwb3J0ZWQgPSB7CitzdGF0aWMgY29uc3Qgc3Ry
dWN0IGtzZXJpYWxfcnM0ODUgc2VyaWFsX29tYXBfcnM0ODVfc3VwcG9ydGVkID0gewogCS5mbGFn
cyA9IFNFUl9SUzQ4NV9FTkFCTEVEIHwgU0VSX1JTNDg1X1JUU19PTl9TRU5EIHwgU0VSX1JTNDg1
X1JUU19BRlRFUl9TRU5EIHwKIAkJIFNFUl9SUzQ4NV9SWF9EVVJJTkdfVFgsCiAJLmRlbGF5X3J0
c19iZWZvcmVfc2VuZCA9IDEsCmRpZmYgLS1naXQgYS9kcml2ZXJzL3R0eS9zZXJpYWwvc2MxNmlz
N3h4LmMgYi9kcml2ZXJzL3R0eS9zZXJpYWwvc2MxNmlzN3h4LmMKaW5kZXggMjU5ZTA4Y2MzNDdj
Li5lMjFmMzBkOWZiMmYgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvdHR5L3NlcmlhbC9zYzE2aXM3eHgu
YworKysgYi9kcml2ZXJzL3R0eS9zZXJpYWwvc2MxNmlzN3h4LmMKQEAgLTgzNiw3ICs4MzYsNyBA
QCBzdGF0aWMgdm9pZCBzYzE2aXM3eHhfcmVjb25mX3JzNDg1KHN0cnVjdCB1YXJ0X3BvcnQgKnBv
cnQpCiAJY29uc3QgdTMyIG1hc2sgPSBTQzE2SVM3WFhfRUZDUl9BVVRPX1JTNDg1X0JJVCB8CiAJ
CQkgU0MxNklTN1hYX0VGQ1JfUlRTX0lOVkVSVF9CSVQ7CiAJdTMyIGVmY3IgPSAwOwotCXN0cnVj
dCBzZXJpYWxfcnM0ODUgKnJzNDg1ID0gJnBvcnQtPnJzNDg1OworCXN0cnVjdCBrc2VyaWFsX3Jz
NDg1ICpyczQ4NSA9ICZwb3J0LT5yczQ4NTsKIAl1bnNpZ25lZCBsb25nIGlycWZsYWdzOwogCiAJ
c3Bpbl9sb2NrX2lycXNhdmUoJnBvcnQtPmxvY2ssIGlycWZsYWdzKTsKQEAgLTExMjgsNyArMTEy
OCw3IEBAIHN0YXRpYyB2b2lkIHNjMTZpczd4eF9zZXRfdGVybWlvcyhzdHJ1Y3QgdWFydF9wb3J0
ICpwb3J0LAogfQogCiBzdGF0aWMgaW50IHNjMTZpczd4eF9jb25maWdfcnM0ODUoc3RydWN0IHVh
cnRfcG9ydCAqcG9ydCwgc3RydWN0IGt0ZXJtaW9zICp0ZXJtaW9zLAotCQkJCSAgc3RydWN0IHNl
cmlhbF9yczQ4NSAqcnM0ODUpCisJCQkJICBzdHJ1Y3Qga3NlcmlhbF9yczQ4NSAqcnM0ODUpCiB7
CiAJc3RydWN0IHNjMTZpczd4eF9wb3J0ICpzID0gZGV2X2dldF9kcnZkYXRhKHBvcnQtPmRldik7
CiAJc3RydWN0IHNjMTZpczd4eF9vbmUgKm9uZSA9IHRvX3NjMTZpczd4eF9vbmUocG9ydCwgcG9y
dCk7CkBAIC0xMzUzLDcgKzEzNTMsNyBAQCBzdGF0aWMgaW50IHNjMTZpczd4eF9ncGlvX2RpcmVj
dGlvbl9vdXRwdXQoc3RydWN0IGdwaW9fY2hpcCAqY2hpcCwKIH0KICNlbmRpZgogCi1zdGF0aWMg
Y29uc3Qgc3RydWN0IHNlcmlhbF9yczQ4NSBzYzE2aXM3eHhfcnM0ODVfc3VwcG9ydGVkID0gewor
c3RhdGljIGNvbnN0IHN0cnVjdCBrc2VyaWFsX3JzNDg1IHNjMTZpczd4eF9yczQ4NV9zdXBwb3J0
ZWQgPSB7CiAJLmZsYWdzID0gU0VSX1JTNDg1X0VOQUJMRUQgfCBTRVJfUlM0ODVfUlRTX0FGVEVS
X1NFTkQsCiAJLmRlbGF5X3J0c19iZWZvcmVfc2VuZCA9IDEsCiAJLmRlbGF5X3J0c19hZnRlcl9z
ZW5kID0gMSwJLyogTm90IHN1cHBvcnRlZCBidXQga2VlcCByZXR1cm5pbmcgLUVJTlZBTCAqLwpk
aWZmIC0tZ2l0IGEvZHJpdmVycy90dHkvc2VyaWFsL3NlcmlhbF9jb3JlLmMgYi9kcml2ZXJzL3R0
eS9zZXJpYWwvc2VyaWFsX2NvcmUuYwppbmRleCA2ZDU3Y2ZkZWRhOWQuLjRlMmZmZWUyY2FiYyAx
MDA2NDQKLS0tIGEvZHJpdmVycy90dHkvc2VyaWFsL3NlcmlhbF9jb3JlLmMKKysrIGIvZHJpdmVy
cy90dHkvc2VyaWFsL3NlcmlhbF9jb3JlLmMKQEAgLTEyOTEsNyArMTI5MSw3IEBAIHN0YXRpYyBp
bnQgdWFydF9nZXRfaWNvdW50KHN0cnVjdCB0dHlfc3RydWN0ICp0dHksCiAJCQkJIFNFUl9SUzQ4
NV9SVFNfQUZURVJfU0VORCB8IFNFUl9SUzQ4NV9SWF9EVVJJTkdfVFggfCBcCiAJCQkJIFNFUl9S
UzQ4NV9URVJNSU5BVEVfQlVTKQogCi1zdGF0aWMgaW50IHVhcnRfY2hlY2tfcnM0ODVfZmxhZ3Mo
c3RydWN0IHVhcnRfcG9ydCAqcG9ydCwgc3RydWN0IHNlcmlhbF9yczQ4NSAqcnM0ODUpCitzdGF0
aWMgaW50IHVhcnRfY2hlY2tfcnM0ODVfZmxhZ3Moc3RydWN0IHVhcnRfcG9ydCAqcG9ydCwgc3Ry
dWN0IGtzZXJpYWxfcnM0ODUgKnJzNDg1KQogewogCXUzMiBmbGFncyA9IHJzNDg1LT5mbGFnczsK
IApAQCAtMTMyMCw3ICsxMzIwLDcgQEAgc3RhdGljIGludCB1YXJ0X2NoZWNrX3JzNDg1X2ZsYWdz
KHN0cnVjdCB1YXJ0X3BvcnQgKnBvcnQsIHN0cnVjdCBzZXJpYWxfcnM0ODUgKnIKIH0KIAogc3Rh
dGljIHZvaWQgdWFydF9zYW5pdGl6ZV9zZXJpYWxfcnM0ODVfZGVsYXlzKHN0cnVjdCB1YXJ0X3Bv
cnQgKnBvcnQsCi0JCQkJCSAgICAgIHN0cnVjdCBzZXJpYWxfcnM0ODUgKnJzNDg1KQorCQkJCQkg
ICAgICBzdHJ1Y3Qga3NlcmlhbF9yczQ4NSAqcnM0ODUpCiB7CiAJaWYgKCFwb3J0LT5yczQ4NV9z
dXBwb3J0ZWQuZGVsYXlfcnRzX2JlZm9yZV9zZW5kKSB7CiAJCWlmIChyczQ4NS0+ZGVsYXlfcnRz
X2JlZm9yZV9zZW5kKSB7CkBAIC0xMzUxLDcgKzEzNTEsNyBAQCBzdGF0aWMgdm9pZCB1YXJ0X3Nh
bml0aXplX3NlcmlhbF9yczQ4NV9kZWxheXMoc3RydWN0IHVhcnRfcG9ydCAqcG9ydCwKIAl9CiB9
CiAKLXN0YXRpYyB2b2lkIHVhcnRfc2FuaXRpemVfc2VyaWFsX3JzNDg1KHN0cnVjdCB1YXJ0X3Bv
cnQgKnBvcnQsIHN0cnVjdCBzZXJpYWxfcnM0ODUgKnJzNDg1KQorc3RhdGljIHZvaWQgdWFydF9z
YW5pdGl6ZV9zZXJpYWxfcnM0ODUoc3RydWN0IHVhcnRfcG9ydCAqcG9ydCwgc3RydWN0IGtzZXJp
YWxfcnM0ODUgKnJzNDg1KQogewogCXUzMiBzdXBwb3J0ZWRfZmxhZ3MgPSBwb3J0LT5yczQ4NV9z
dXBwb3J0ZWQuZmxhZ3M7CiAKQEAgLTEzNzgsNyArMTM3OCw3IEBAIHN0YXRpYyB2b2lkIHVhcnRf
c2FuaXRpemVfc2VyaWFsX3JzNDg1KHN0cnVjdCB1YXJ0X3BvcnQgKnBvcnQsIHN0cnVjdCBzZXJp
YWxfcnM0CiB9CiAKIHN0YXRpYyB2b2lkIHVhcnRfc2V0X3JzNDg1X3Rlcm1pbmF0aW9uKHN0cnVj
dCB1YXJ0X3BvcnQgKnBvcnQsCi0JCQkJICAgICAgIGNvbnN0IHN0cnVjdCBzZXJpYWxfcnM0ODUg
KnJzNDg1KQorCQkJCSAgICAgICBjb25zdCBzdHJ1Y3Qga3NlcmlhbF9yczQ4NSAqcnM0ODUpCiB7
CiAJaWYgKCEocnM0ODUtPmZsYWdzICYgU0VSX1JTNDg1X0VOQUJMRUQpKQogCQlyZXR1cm47CkBA
IC0xMzg5LDcgKzEzODksNyBAQCBzdGF0aWMgdm9pZCB1YXJ0X3NldF9yczQ4NV90ZXJtaW5hdGlv
bihzdHJ1Y3QgdWFydF9wb3J0ICpwb3J0LAogCiBpbnQgdWFydF9yczQ4NV9jb25maWcoc3RydWN0
IHVhcnRfcG9ydCAqcG9ydCkKIHsKLQlzdHJ1Y3Qgc2VyaWFsX3JzNDg1ICpyczQ4NSA9ICZwb3J0
LT5yczQ4NTsKKwlzdHJ1Y3Qga3NlcmlhbF9yczQ4NSAqcnM0ODUgPSAmcG9ydC0+cnM0ODU7CiAJ
aW50IHJldDsKIAogCXVhcnRfc2FuaXRpemVfc2VyaWFsX3JzNDg1KHBvcnQsIHJzNDg1KTsKQEAg
LTE0MDMsMjMgKzE0MDMsMzAgQEAgaW50IHVhcnRfcnM0ODVfY29uZmlnKHN0cnVjdCB1YXJ0X3Bv
cnQgKnBvcnQpCiB9CiBFWFBPUlRfU1lNQk9MX0dQTCh1YXJ0X3JzNDg1X2NvbmZpZyk7CiAKLXN0
YXRpYyBpbnQgdXNlcl9yczQ4NV90b19rZXJuZWxfc2VyaWFsX3JzNDg1KHN0cnVjdCBzZXJpYWxf
cnM0ODUgKnJzNDg1LAorc3RhdGljIGludCB1c2VyX3JzNDg1X3RvX2tlcm5lbF9zZXJpYWxfcnM0
ODUoc3RydWN0IGtzZXJpYWxfcnM0ODUgKnJzNDg1LAogCQkJCQkgICAgIGNvbnN0IHN0cnVjdCBz
ZXJpYWxfcnM0ODUgX191c2VyICpyczQ4NV91c2VyKQogewotCWlmIChjb3B5X2Zyb21fdXNlcihy
czQ4NSwgcnM0ODVfdXNlciwgc2l6ZW9mKCpyczQ4NSkpKQorCXN0cnVjdCBzZXJpYWxfcnM0ODUg
cnM0ODVfdWFwaTsKKworCWlmIChjb3B5X2Zyb21fdXNlcigmcnM0ODVfdWFwaSwgcnM0ODVfdXNl
ciwgc2l6ZW9mKCpyczQ4NSkpKQogCQlyZXR1cm4gLUVGQVVMVDsKIAorCSpyczQ4NSA9ICooKHN0
cnVjdCBrc2VyaWFsX3JzNDg1ICopJnJzNDg1X3VhcGkpOworCiAJcmV0dXJuIDA7CiB9CiAKIHN0
YXRpYyBpbnQga2VybmVsX3NlcmlhbF9yczQ4NV90b191c2VyX3JzNDg1KHN0cnVjdCBzZXJpYWxf
cnM0ODUgX191c2VyICpyczQ4NV91c2VyLAotCQkJCQkgICAgIHN0cnVjdCBzZXJpYWxfcnM0ODUg
KnJzNDg1KQorCQkJCQkgICAgIGNvbnN0IHN0cnVjdCBrc2VyaWFsX3JzNDg1ICpyczQ4NSkKIHsK
KwlzdHJ1Y3Qgc2VyaWFsX3JzNDg1IHJzNDg1X3VhcGk7CisKKwkqKChzdHJ1Y3Qga3NlcmlhbF9y
czQ4NSAqKSZyczQ4NV91YXBpKSA9ICpyczQ4NTsKIAkvKiBSZXR1cm4gY2xlYW4gcGFkZGluZyBh
cmVhIHRvIHVzZXJzcGFjZSAqLwotCW1lbXNldChyczQ4NS0+cGFkZGluZzAsIDAsIHNpemVvZihy
czQ4NS0+cGFkZGluZzApKTsKLQltZW1zZXQocnM0ODUtPnBhZGRpbmcxLCAwLCBzaXplb2YocnM0
ODUtPnBhZGRpbmcxKSk7CisJbWVtc2V0KHJzNDg1X3VhcGkucGFkZGluZzAsIDAsIHNpemVvZihy
czQ4NV91YXBpLnBhZGRpbmcwKSk7CisJbWVtc2V0KHJzNDg1X3VhcGkucGFkZGluZzEsIDAsIHNp
emVvZihyczQ4NV91YXBpLnBhZGRpbmcxKSk7CiAKLQlpZiAoY29weV90b191c2VyKHJzNDg1X3Vz
ZXIsIHJzNDg1LCBzaXplb2YoKnJzNDg1KSkpCisJaWYgKGNvcHlfdG9fdXNlcihyczQ4NV91c2Vy
LCAmcnM0ODVfdWFwaSwgc2l6ZW9mKHJzNDg1X3VhcGkpKSkKIAkJcmV0dXJuIC1FRkFVTFQ7CiAK
IAlyZXR1cm4gMDsKQEAgLTE0MjksNyArMTQzNiw3IEBAIHN0YXRpYyBpbnQgdWFydF9nZXRfcnM0
ODVfY29uZmlnKHN0cnVjdCB1YXJ0X3BvcnQgKnBvcnQsCiAJCQkgc3RydWN0IHNlcmlhbF9yczQ4
NSBfX3VzZXIgKnJzNDg1X3VzZXIpCiB7CiAJdW5zaWduZWQgbG9uZyBmbGFnczsKLQlzdHJ1Y3Qg
c2VyaWFsX3JzNDg1IHJzNDg1OworCXN0cnVjdCBrc2VyaWFsX3JzNDg1IHJzNDg1OwogCiAJc3Bp
bl9sb2NrX2lycXNhdmUoJnBvcnQtPmxvY2ssIGZsYWdzKTsKIAlyczQ4NSA9IHBvcnQtPnJzNDg1
OwpAQCAtMTQ0MSw3ICsxNDQ4LDcgQEAgc3RhdGljIGludCB1YXJ0X2dldF9yczQ4NV9jb25maWco
c3RydWN0IHVhcnRfcG9ydCAqcG9ydCwKIHN0YXRpYyBpbnQgdWFydF9zZXRfcnM0ODVfY29uZmln
KHN0cnVjdCB0dHlfc3RydWN0ICp0dHksIHN0cnVjdCB1YXJ0X3BvcnQgKnBvcnQsCiAJCQkgc3Ry
dWN0IHNlcmlhbF9yczQ4NSBfX3VzZXIgKnJzNDg1X3VzZXIpCiB7Ci0Jc3RydWN0IHNlcmlhbF9y
czQ4NSByczQ4NTsKKwlzdHJ1Y3Qga3NlcmlhbF9yczQ4NSByczQ4NTsKIAlpbnQgcmV0OwogCXVu
c2lnbmVkIGxvbmcgZmxhZ3M7CiAKQEAgLTM0MTUsNyArMzQyMiw3IEBAIEVYUE9SVF9TWU1CT0xf
R1BMKHVhcnRfdHJ5X3RvZ2dsZV9zeXNycSk7CiAgKi8KIGludCB1YXJ0X2dldF9yczQ4NV9tb2Rl
KHN0cnVjdCB1YXJ0X3BvcnQgKnBvcnQpCiB7Ci0Jc3RydWN0IHNlcmlhbF9yczQ4NSAqcnM0ODVj
b25mID0gJnBvcnQtPnJzNDg1OworCXN0cnVjdCBrc2VyaWFsX3JzNDg1ICpyczQ4NWNvbmYgPSAm
cG9ydC0+cnM0ODU7CiAJc3RydWN0IGRldmljZSAqZGV2ID0gcG9ydC0+ZGV2OwogCXUzMiByczQ4
NV9kZWxheVsyXTsKIAlpbnQgcmV0OwpAQCAtMzQ3MSw2ICszNDc4LDE5IEBAIGludCB1YXJ0X2dl
dF9yczQ4NV9tb2RlKHN0cnVjdCB1YXJ0X3BvcnQgKnBvcnQpCiB9CiBFWFBPUlRfU1lNQk9MX0dQ
TCh1YXJ0X2dldF9yczQ4NV9tb2RlKTsKIAorLyogQ29tcGlsZS10aW1lIGFzc2VydHMgZm9yIGtz
ZXJpYWxfcnM0ODUgYW5kIHNlcmlhbF9yczQ4NSBlcXVhbGl0eSAoZXhjZXB0IHBhZGRpbmcpICov
CitzdGF0aWNfYXNzZXJ0KG9mZnNldG9mKHN0cnVjdCBrc2VyaWFsX3JzNDg1LCBmbGFncykgPT0K
KwkgICAgICBvZmZzZXRvZihzdHJ1Y3Qgc2VyaWFsX3JzNDg1LCBmbGFncykpOworc3RhdGljX2Fz
c2VydChvZmZzZXRvZihzdHJ1Y3Qga3NlcmlhbF9yczQ4NSwgZGVsYXlfcnRzX2JlZm9yZV9zZW5k
KSA9PQorCSAgICAgIG9mZnNldG9mKHN0cnVjdCBzZXJpYWxfcnM0ODUsIGRlbGF5X3J0c19iZWZv
cmVfc2VuZCkpOworc3RhdGljX2Fzc2VydChvZmZzZXRvZihzdHJ1Y3Qga3NlcmlhbF9yczQ4NSwg
ZGVsYXlfcnRzX2FmdGVyX3NlbmQpID09CisJICAgICAgb2Zmc2V0b2Yoc3RydWN0IHNlcmlhbF9y
czQ4NSwgZGVsYXlfcnRzX2FmdGVyX3NlbmQpKTsKK3N0YXRpY19hc3NlcnQob2Zmc2V0b2Yoc3Ry
dWN0IGtzZXJpYWxfcnM0ODUsIGFkZHJfcmVjdikgPT0KKwkgICAgICBvZmZzZXRvZihzdHJ1Y3Qg
c2VyaWFsX3JzNDg1LCBhZGRyX3JlY3YpKTsKK3N0YXRpY19hc3NlcnQob2Zmc2V0b2Yoc3RydWN0
IGtzZXJpYWxfcnM0ODUsIGFkZHJfZGVzdCkgPT0KKwkgICAgICBvZmZzZXRvZihzdHJ1Y3Qgc2Vy
aWFsX3JzNDg1LCBhZGRyX2Rlc3QpKTsKK3N0YXRpY19hc3NlcnQoc2l6ZW9mKHN0cnVjdCBrc2Vy
aWFsX3JzNDg1KSA8PSBzaXplb2Yoc3RydWN0IHNlcmlhbF9yczQ4NSkpOworCiAvKiBDb21waWxl
LXRpbWUgYXNzZXJ0aW9ucyBmb3Igc2VyaWFsX3JzNDg1IGxheW91dCAqLwogc3RhdGljX2Fzc2Vy
dChvZmZzZXRvZihzdHJ1Y3Qgc2VyaWFsX3JzNDg1LCBwYWRkaW5nKSA9PQogICAgICAgICAgICAg
ICAob2Zmc2V0b2Yoc3RydWN0IHNlcmlhbF9yczQ4NSwgZGVsYXlfcnRzX2FmdGVyX3NlbmQpICsg
c2l6ZW9mKF9fdTMyKSkpOwpkaWZmIC0tZ2l0IGEvZHJpdmVycy90dHkvc2VyaWFsL3N0bTMyLXVz
YXJ0LmMgYi9kcml2ZXJzL3R0eS9zZXJpYWwvc3RtMzItdXNhcnQuYwppbmRleCAyYzg1ZGJmMTY1
YzQuLjg2MDZiZGE5ZjdmYSAxMDA2NDQKLS0tIGEvZHJpdmVycy90dHkvc2VyaWFsL3N0bTMyLXVz
YXJ0LmMKKysrIGIvZHJpdmVycy90dHkvc2VyaWFsL3N0bTMyLXVzYXJ0LmMKQEAgLTE2OSw3ICsx
NjksNyBAQCBzdGF0aWMgdm9pZCBzdG0zMl91c2FydF9jb25maWdfcmVnX3JzNDg1KHUzMiAqY3Ix
LCB1MzIgKmNyMywgdTMyIGRlbGF5X0FERSwKIH0KIAogc3RhdGljIGludCBzdG0zMl91c2FydF9j
b25maWdfcnM0ODUoc3RydWN0IHVhcnRfcG9ydCAqcG9ydCwgc3RydWN0IGt0ZXJtaW9zICp0ZXJt
aW9zLAotCQkJCSAgICBzdHJ1Y3Qgc2VyaWFsX3JzNDg1ICpyczQ4NWNvbmYpCisJCQkJICAgIHN0
cnVjdCBrc2VyaWFsX3JzNDg1ICpyczQ4NWNvbmYpCiB7CiAJc3RydWN0IHN0bTMyX3BvcnQgKnN0
bTMyX3BvcnQgPSB0b19zdG0zMl9wb3J0KHBvcnQpOwogCWNvbnN0IHN0cnVjdCBzdG0zMl91c2Fy
dF9vZmZzZXRzICpvZnMgPSAmc3RtMzJfcG9ydC0+aW5mby0+b2ZzOwpAQCAtMjIwLDcgKzIyMCw3
IEBAIHN0YXRpYyBpbnQgc3RtMzJfdXNhcnRfY29uZmlnX3JzNDg1KHN0cnVjdCB1YXJ0X3BvcnQg
KnBvcnQsIHN0cnVjdCBrdGVybWlvcyAqdGVyCiBzdGF0aWMgaW50IHN0bTMyX3VzYXJ0X2luaXRf
cnM0ODUoc3RydWN0IHVhcnRfcG9ydCAqcG9ydCwKIAkJCQkgIHN0cnVjdCBwbGF0Zm9ybV9kZXZp
Y2UgKnBkZXYpCiB7Ci0Jc3RydWN0IHNlcmlhbF9yczQ4NSAqcnM0ODVjb25mID0gJnBvcnQtPnJz
NDg1OworCXN0cnVjdCBrc2VyaWFsX3JzNDg1ICpyczQ4NWNvbmYgPSAmcG9ydC0+cnM0ODU7CiAK
IAlyczQ4NWNvbmYtPmZsYWdzID0gMDsKIAlyczQ4NWNvbmYtPmRlbGF5X3J0c19iZWZvcmVfc2Vu
ZCA9IDA7CkBAIC01MzIsNyArNTMyLDcgQEAgc3RhdGljIHZvaWQgc3RtMzJfdXNhcnRfdGNfaW50
ZXJydXB0X2Rpc2FibGUoc3RydWN0IHVhcnRfcG9ydCAqcG9ydCkKIHN0YXRpYyB2b2lkIHN0bTMy
X3VzYXJ0X3JzNDg1X3J0c19lbmFibGUoc3RydWN0IHVhcnRfcG9ydCAqcG9ydCkKIHsKIAlzdHJ1
Y3Qgc3RtMzJfcG9ydCAqc3RtMzJfcG9ydCA9IHRvX3N0bTMyX3BvcnQocG9ydCk7Ci0Jc3RydWN0
IHNlcmlhbF9yczQ4NSAqcnM0ODVjb25mID0gJnBvcnQtPnJzNDg1OworCXN0cnVjdCBrc2VyaWFs
X3JzNDg1ICpyczQ4NWNvbmYgPSAmcG9ydC0+cnM0ODU7CiAKIAlpZiAoc3RtMzJfcG9ydC0+aHdf
Zmxvd19jb250cm9sIHx8CiAJICAgICEocnM0ODVjb25mLT5mbGFncyAmIFNFUl9SUzQ4NV9FTkFC
TEVEKSkKQEAgLTU1MCw3ICs1NTAsNyBAQCBzdGF0aWMgdm9pZCBzdG0zMl91c2FydF9yczQ4NV9y
dHNfZW5hYmxlKHN0cnVjdCB1YXJ0X3BvcnQgKnBvcnQpCiBzdGF0aWMgdm9pZCBzdG0zMl91c2Fy
dF9yczQ4NV9ydHNfZGlzYWJsZShzdHJ1Y3QgdWFydF9wb3J0ICpwb3J0KQogewogCXN0cnVjdCBz
dG0zMl9wb3J0ICpzdG0zMl9wb3J0ID0gdG9fc3RtMzJfcG9ydChwb3J0KTsKLQlzdHJ1Y3Qgc2Vy
aWFsX3JzNDg1ICpyczQ4NWNvbmYgPSAmcG9ydC0+cnM0ODU7CisJc3RydWN0IGtzZXJpYWxfcnM0
ODUgKnJzNDg1Y29uZiA9ICZwb3J0LT5yczQ4NTsKIAogCWlmIChzdG0zMl9wb3J0LT5od19mbG93
X2NvbnRyb2wgfHwKIAkgICAgIShyczQ4NWNvbmYtPmZsYWdzICYgU0VSX1JTNDg1X0VOQUJMRUQp
KQpAQCAtMTA5NCw3ICsxMDk0LDcgQEAgc3RhdGljIHZvaWQgc3RtMzJfdXNhcnRfc2V0X3Rlcm1p
b3Moc3RydWN0IHVhcnRfcG9ydCAqcG9ydCwKIAlzdHJ1Y3Qgc3RtMzJfcG9ydCAqc3RtMzJfcG9y
dCA9IHRvX3N0bTMyX3BvcnQocG9ydCk7CiAJY29uc3Qgc3RydWN0IHN0bTMyX3VzYXJ0X29mZnNl
dHMgKm9mcyA9ICZzdG0zMl9wb3J0LT5pbmZvLT5vZnM7CiAJY29uc3Qgc3RydWN0IHN0bTMyX3Vz
YXJ0X2NvbmZpZyAqY2ZnID0gJnN0bTMyX3BvcnQtPmluZm8tPmNmZzsKLQlzdHJ1Y3Qgc2VyaWFs
X3JzNDg1ICpyczQ4NWNvbmYgPSAmcG9ydC0+cnM0ODU7CisJc3RydWN0IGtzZXJpYWxfcnM0ODUg
KnJzNDg1Y29uZiA9ICZwb3J0LT5yczQ4NTsKIAl1bnNpZ25lZCBpbnQgYmF1ZCwgYml0czsKIAl1
MzIgdXNhcnRkaXYsIG1hbnRpc3NhLCBmcmFjdGlvbiwgb3ZlcnNhbXBsaW5nOwogCXRjZmxhZ190
IGNmbGFnID0gdGVybWlvcy0+Y19jZmxhZzsKQEAgLTE0NDYsNyArMTQ0Niw3IEBAIHN0YXRpYyB2
b2lkIHN0bTMyX3VzYXJ0X2RlaW5pdF9wb3J0KHN0cnVjdCBzdG0zMl9wb3J0ICpzdG0zMnBvcnQp
CiAJY2xrX2Rpc2FibGVfdW5wcmVwYXJlKHN0bTMycG9ydC0+Y2xrKTsKIH0KIAotc3RhdGljIGNv
bnN0IHN0cnVjdCBzZXJpYWxfcnM0ODUgc3RtMzJfcnM0ODVfc3VwcG9ydGVkID0geworc3RhdGlj
IGNvbnN0IHN0cnVjdCBrc2VyaWFsX3JzNDg1IHN0bTMyX3JzNDg1X3N1cHBvcnRlZCA9IHsKIAku
ZmxhZ3MgPSBTRVJfUlM0ODVfRU5BQkxFRCB8IFNFUl9SUzQ4NV9SVFNfT05fU0VORCB8IFNFUl9S
UzQ4NV9SVFNfQUZURVJfU0VORCB8CiAJCSBTRVJfUlM0ODVfUlhfRFVSSU5HX1RYLAogCS5kZWxh
eV9ydHNfYmVmb3JlX3NlbmQgPSAxLApkaWZmIC0tZ2l0IGEvaW5jbHVkZS9saW51eC9zZXJpYWxf
Y29yZS5oIGIvaW5jbHVkZS9saW51eC9zZXJpYWxfY29yZS5oCmluZGV4IGFlZjMxNDVmMjAzMi4u
M2ZlMDJlNzQ4NzNhIDEwMDY0NAotLS0gYS9pbmNsdWRlL2xpbnV4L3NlcmlhbF9jb3JlLmgKKysr
IGIvaW5jbHVkZS9saW51eC9zZXJpYWxfY29yZS5oCkBAIC0zMSw2ICszMSwyMCBAQCBzdHJ1Y3Qg
c2VyaWFsX3N0cnVjdDsKIHN0cnVjdCBkZXZpY2U7CiBzdHJ1Y3QgZ3Bpb19kZXNjOwogCisvKgor
ICogTXVzdCBtYXRjaCB3aXRoIHNlcmlhbF9yczQ4NSBpbiBpbmNsdWRlL3VhcGkvbGludXgvc2Vy
aWFsLmggZXhjbHVkaW5nIHRoZQorICogcGFkZGluZy4KKyAqLworc3RydWN0IGtzZXJpYWxfcnM0
ODUgeworCV9fdTMyCWZsYWdzOwkJCS8qIFJTNDg1IGZlYXR1cmUgZmxhZ3MgKi8KKwlfX3UzMglk
ZWxheV9ydHNfYmVmb3JlX3NlbmQ7CS8qIERlbGF5IGJlZm9yZSBzZW5kIChtaWxsaXNlY29uZHMp
ICovCisJX191MzIJZGVsYXlfcnRzX2FmdGVyX3NlbmQ7CS8qIERlbGF5IGFmdGVyIHNlbmQgKG1p
bGxpc2Vjb25kcykgKi8KKwlzdHJ1Y3QgeworCQlfX3U4ICAgIGFkZHJfcmVjdjsKKwkJX191OCAg
ICBhZGRyX2Rlc3Q7CisJfTsKK307CisKIC8qKgogICogc3RydWN0IHVhcnRfb3BzIC0tIGludGVy
ZmFjZSBiZXR3ZWVuIHNlcmlhbF9jb3JlIGFuZCB0aGUgZHJpdmVyCiAgKgpAQCAtNDQ3LDcgKzQ2
MSw3IEBAIHN0cnVjdCB1YXJ0X3BvcnQgewogCXZvaWQJCQkoKmhhbmRsZV9icmVhaykoc3RydWN0
IHVhcnRfcG9ydCAqKTsKIAlpbnQJCQkoKnJzNDg1X2NvbmZpZykoc3RydWN0IHVhcnRfcG9ydCAq
LAogCQkJCQkJc3RydWN0IGt0ZXJtaW9zICp0ZXJtaW9zLAotCQkJCQkJc3RydWN0IHNlcmlhbF9y
czQ4NSAqcnM0ODUpOworCQkJCQkJc3RydWN0IGtzZXJpYWxfcnM0ODUgKnJzNDg1KTsKIAlpbnQJ
CQkoKmlzbzc4MTZfY29uZmlnKShzdHJ1Y3QgdWFydF9wb3J0ICosCiAJCQkJCQkgIHN0cnVjdCBz
ZXJpYWxfaXNvNzgxNiAqaXNvNzgxNik7CiAJdW5zaWduZWQgaW50CQlpcnE7CQkJLyogaXJxIG51
bWJlciAqLwpAQCAtNTY3LDggKzU4MSw4IEBAIHN0cnVjdCB1YXJ0X3BvcnQgewogCWNvbnN0IGNo
YXIJCSpuYW1lOwkJCS8qIHBvcnQgbmFtZSAqLwogCXN0cnVjdCBhdHRyaWJ1dGVfZ3JvdXAJKmF0
dHJfZ3JvdXA7CQkvKiBwb3J0IHNwZWNpZmljIGF0dHJpYnV0ZXMgKi8KIAljb25zdCBzdHJ1Y3Qg
YXR0cmlidXRlX2dyb3VwICoqdHR5X2dyb3VwczsJLyogYWxsIGF0dHJpYnV0ZXMgKHNlcmlhbCBj
b3JlIHVzZSBvbmx5KSAqLwotCXN0cnVjdCBzZXJpYWxfcnM0ODUgICAgIHJzNDg1OwotCXN0cnVj
dCBzZXJpYWxfcnM0ODUJcnM0ODVfc3VwcG9ydGVkOwkvKiBTdXBwb3J0ZWQgbWFzayBmb3Igc2Vy
aWFsX3JzNDg1ICovCisJc3RydWN0IGtzZXJpYWxfcnM0ODUJcnM0ODU7CisJc3RydWN0IGtzZXJp
YWxfcnM0ODUJcnM0ODVfc3VwcG9ydGVkOwkvKiBTdXBwb3J0ZWQgbWFzayBmb3Igc2VyaWFsX3Jz
NDg1ICovCiAJc3RydWN0IGdwaW9fZGVzYwkqcnM0ODVfdGVybV9ncGlvOwkvKiBlbmFibGUgUlM0
ODUgYnVzIHRlcm1pbmF0aW9uICovCiAJc3RydWN0IHNlcmlhbF9pc283ODE2ICAgaXNvNzgxNjsK
IAl2b2lkCQkJKnByaXZhdGVfZGF0YTsJCS8qIGdlbmVyaWMgcGxhdGZvcm0gZGF0YSBwb2ludGVy
ICovCmRpZmYgLS1naXQgYS9pbmNsdWRlL3VhcGkvbGludXgvc2VyaWFsLmggYi9pbmNsdWRlL3Vh
cGkvbGludXgvc2VyaWFsLmgKaW5kZXggY2VhMDY5MjRiMjk1Li45NTU4M2U5OWE3OTggMTAwNjQ0
Ci0tLSBhL2luY2x1ZGUvdWFwaS9saW51eC9zZXJpYWwuaAorKysgYi9pbmNsdWRlL3VhcGkvbGlu
dXgvc2VyaWFsLmgKQEAgLTExMiw4ICsxMTIsOSBAQCBzdHJ1Y3Qgc2VyaWFsX2ljb3VudGVyX3N0
cnVjdCB7CiAgKiBzdXBwb3J0LiBTZXQgd2l0aCBUSU9DU1JTNDg1IGFuZCBnZXQgd2l0aCBUSU9D
R1JTNDg1IGlmIHN1cHBvcnRlZCBieSB5b3VyCiAgKiBwbGF0Zm9ybS4gVGhlIHNldCBmdW5jdGlv
biByZXR1cm5zIHRoZSBuZXcgc3RhdGUsIHdpdGggYW55IHVuc3VwcG9ydGVkIGJpdHMKICAqIHJl
dmVydGVkIGFwcHJvcHJpYXRlbHkuCisgKgorICogVGhlcmUncyBrZXJuZWwgY291bnRlcnBhcnQg
a3NlcmlhbF9yczQ4NSBvZiB0aGlzIHN0cnVjdCB3aXRob3V0IHBhZGRpbmcuCiAgKi8KLQogc3Ry
dWN0IHNlcmlhbF9yczQ4NSB7CiAJX191MzIJZmxhZ3M7CQkJLyogUlM0ODUgZmVhdHVyZSBmbGFn
cyAqLwogI2RlZmluZSBTRVJfUlM0ODVfRU5BQkxFRAkJKDEgPDwgMCkJLyogSWYgZW5hYmxlZCAq
LwotLSAKMi4zMC4yCgpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fXwpMaW51eC1zdG0zMiBtYWlsaW5nIGxpc3QKTGludXgtc3RtMzJAc3QtbWQtbWFpbG1hbi5z
dG9ybXJlcGx5LmNvbQpodHRwczovL3N0LW1kLW1haWxtYW4uc3Rvcm1yZXBseS5jb20vbWFpbG1h
bi9saXN0aW5mby9saW51eC1zdG0zMgo=
