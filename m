Return-Path: <linux-stm32-bounces@st-md-mailman.stormreply.com>
X-Original-To: lists+linux-stm32@lfdr.de
Delivered-To: lists+linux-stm32@lfdr.de
Received: from stm-ict-prod-mailman-01.stormreply.prv (st-md-mailman.stormreply.com [52.209.6.89])
	by mail.lfdr.de (Postfix) with ESMTPS id 4F7C78D5D3B
	for <lists+linux-stm32@lfdr.de>; Fri, 31 May 2024 10:54:52 +0200 (CEST)
Received: from ip-172-31-3-47.eu-west-1.compute.internal (localhost [127.0.0.1])
	by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTP id 05AEAC7128F;
	Fri, 31 May 2024 08:54:52 +0000 (UTC)
Received: from phobos.denx.de (phobos.denx.de [85.214.62.61])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
 (No client certificate requested)
 by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTPS id B27BACFAC7F
 for <linux-stm32@st-md-mailman.stormreply.com>;
 Fri, 31 May 2024 08:54:47 +0000 (UTC)
Received: from tr.lan (ip-86-49-120-218.bb.vodafone.cz [86.49.120.218])
 (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits))
 (No client certificate requested)
 (Authenticated sender: marex@denx.de)
 by phobos.denx.de (Postfix) with ESMTPSA id AECD988263;
 Fri, 31 May 2024 10:54:46 +0200 (CEST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=denx.de;
 s=phobos-20191101; t=1717145687;
 bh=8yOYBaCe/V26K+yH063YYpC/biUYto47iMxo4kdQNrI=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=Fb3mfbsO9kOL6NL4Y4OJdg8R8B+erBk4av90GLHDauxSNcmtknYabd9mJR2MvYa7C
 BqdY1Bmmp0p37f/dRAhrxperQ6TJXvB5EcqKVIvUjNbYwUaYrTwnE3Luh7V+ASMbOY
 Zvdg776/x+Oao6vmVLZR2fwH6AGRyWP5eBUTWso09vce/6Bos3HjbSJ1RDZREheeNd
 wAOFrlRcIVi1LsxWDk0wLv37JUviRuR7OWwtNDojzBs8XLXezCe4Owimh77qLM3yn1
 rhbGtefDq3chdWh10SYGV6Pntpa8mh363pCXJNbFnWAeNoeFjcBPEMnF8POWeQex/P
 NzVhq1nfb8Dcw==
From: Marek Vasut <marex@denx.de>
To: linux-crypto@vger.kernel.org
Date: Fri, 31 May 2024 10:53:23 +0200
Message-ID: <20240531085414.42529-2-marex@denx.de>
X-Mailer: git-send-email 2.43.0
In-Reply-To: <20240531085414.42529-1-marex@denx.de>
References: <20240531085414.42529-1-marex@denx.de>
MIME-Version: 1.0
X-Virus-Scanned: clamav-milter 0.103.8 at phobos.denx.de
X-Virus-Status: Clean
Cc: Marek Vasut <marex@denx.de>, Rob Herring <robh@kernel.org>,
 Herbert Xu <herbert@gondor.apana.org.au>,
 Yang Yingliang <yangyingliang@huawei.com>, kernel@dh-electronics.com,
 Maxime Coquelin <mcoquelin.stm32@gmail.com>,
 =?UTF-8?q?Uwe=20Kleine-K=C3=B6nig?= <u.kleine-koenig@pengutronix.de>,
 Olivia Mackall <olivia@selenic.com>, linux-stm32@st-md-mailman.stormreply.com,
 linux-arm-kernel@lists.infradead.org
Subject: [Linux-stm32] [PATCH v3 2/2] hwrng: stm32 - cache device pointer in
	struct stm32_rng_private
X-BeenThere: linux-stm32@st-md-mailman.stormreply.com
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: <linux-stm32.st-md-mailman.stormreply.com>
List-Unsubscribe: <https://st-md-mailman.stormreply.com/mailman/options/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=unsubscribe>
List-Archive: <http://st-md-mailman.stormreply.com/pipermail/linux-stm32/>
List-Post: <mailto:linux-stm32@st-md-mailman.stormreply.com>
List-Help: <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=help>
List-Subscribe: <https://st-md-mailman.stormreply.com/mailman/listinfo/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: linux-stm32-bounces@st-md-mailman.stormreply.com
Sender: "Linux-stm32" <linux-stm32-bounces@st-md-mailman.stormreply.com>

UGxhY2UgZGV2aWNlIHBvaW50ZXIgaW4gc3RydWN0IHN0bTMyX3JuZ19wcml2YXRlIGFuZCB1c2Ug
aXQgYWxsIG92ZXIgdGhlCnBsYWNlIHRvIGdldCByaWQgb2YgdGhlIGhvcnJpYmxlIHR5cGUgY2Fz
dHMgdGhyb3VnaG91dCB0aGUgZHJpdmVyLgoKTm8gZnVuY3Rpb25hbCBjaGFuZ2UuCgpBY2tlZC1i
eTogR2F0aWVuIENoZXZhbGxpZXIgPGdhdGllbi5jaGV2YWxsaWVyQGZvc3Muc3QuY29tPgpTaWdu
ZWQtb2ZmLWJ5OiBNYXJlayBWYXN1dCA8bWFyZXhAZGVueC5kZT4KLS0tCkNjOiAiVXdlIEtsZWlu
ZS1Lw7ZuaWciIDx1LmtsZWluZS1rb2VuaWdAcGVuZ3V0cm9uaXguZGU+CkNjOiBBbGV4YW5kcmUg
VG9yZ3VlIDxhbGV4YW5kcmUudG9yZ3VlQGZvc3Muc3QuY29tPgpDYzogR2F0aWVuIENoZXZhbGxp
ZXIgPGdhdGllbi5jaGV2YWxsaWVyQGZvc3Muc3QuY29tPgpDYzogSGVyYmVydCBYdSA8aGVyYmVy
dEBnb25kb3IuYXBhbmEub3JnLmF1PgpDYzogTWFyZWsgVmFzdXQgPG1hcmV4QGRlbnguZGU+CkNj
OiBNYXhpbWUgQ29xdWVsaW4gPG1jb3F1ZWxpbi5zdG0zMkBnbWFpbC5jb20+CkNjOiBPbGl2aWEg
TWFja2FsbCA8b2xpdmlhQHNlbGVuaWMuY29tPgpDYzogUm9iIEhlcnJpbmcgPHJvYmhAa2VybmVs
Lm9yZz4KQ2M6IFlhbmcgWWluZ2xpYW5nIDx5YW5neWluZ2xpYW5nQGh1YXdlaS5jb20+CkNjOiBr
ZXJuZWxAZGgtZWxlY3Ryb25pY3MuY29tCkNjOiBsaW51eC1hcm0ta2VybmVsQGxpc3RzLmluZnJh
ZGVhZC5vcmcKQ2M6IGxpbnV4LWNyeXB0b0B2Z2VyLmtlcm5lbC5vcmcKQ2M6IGxpbnV4LXN0bTMy
QHN0LW1kLW1haWxtYW4uc3Rvcm1yZXBseS5jb20KLS0tClYyOiBGaXggdXAgZGV2X2VyciBuZXds
aW5lcwogICAgQWRkIEFCIGZyb20gR2F0aWVuClYzOiBEcm9wIHJuZy5wcml2IGFzc2lnbm1lbnQK
LS0tCiBkcml2ZXJzL2NoYXIvaHdfcmFuZG9tL3N0bTMyLXJuZy5jIHwgMzEgKysrKysrKysrKysr
Ky0tLS0tLS0tLS0tLS0tLS0tCiAxIGZpbGUgY2hhbmdlZCwgMTMgaW5zZXJ0aW9ucygrKSwgMTgg
ZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEvZHJpdmVycy9jaGFyL2h3X3JhbmRvbS9zdG0zMi1y
bmcuYyBiL2RyaXZlcnMvY2hhci9od19yYW5kb20vc3RtMzItcm5nLmMKaW5kZXggNmRlYzRhZGM0
OTg1My4uZDA4Yzg3MGViOGQxZiAxMDA2NDQKLS0tIGEvZHJpdmVycy9jaGFyL2h3X3JhbmRvbS9z
dG0zMi1ybmcuYworKysgYi9kcml2ZXJzL2NoYXIvaHdfcmFuZG9tL3N0bTMyLXJuZy5jCkBAIC03
MCw2ICs3MCw3IEBAIHN0cnVjdCBzdG0zMl9ybmdfY29uZmlnIHsKIAogc3RydWN0IHN0bTMyX3Ju
Z19wcml2YXRlIHsKIAlzdHJ1Y3QgaHdybmcgcm5nOworCXN0cnVjdCBkZXZpY2UgKmRldjsKIAl2
b2lkIF9faW9tZW0gKmJhc2U7CiAJc3RydWN0IGNsayAqY2xrOwogCXN0cnVjdCByZXNldF9jb250
cm9sICpyc3Q7CkBAIC05OSw3ICsxMDAsNyBAQCBzdHJ1Y3Qgc3RtMzJfcm5nX3ByaXZhdGUgewog
ICovCiBzdGF0aWMgaW50IHN0bTMyX3JuZ19jb25jZWFsX3NlZWRfZXJyb3JfY29uZF9yZXNldChz
dHJ1Y3Qgc3RtMzJfcm5nX3ByaXZhdGUgKnByaXYpCiB7Ci0Jc3RydWN0IGRldmljZSAqZGV2ID0g
KHN0cnVjdCBkZXZpY2UgKilwcml2LT5ybmcucHJpdjsKKwlzdHJ1Y3QgZGV2aWNlICpkZXYgPSBw
cml2LT5kZXY7CiAJdTMyIHNyID0gcmVhZGxfcmVsYXhlZChwcml2LT5iYXNlICsgUk5HX1NSKTsK
IAl1MzIgY3IgPSByZWFkbF9yZWxheGVkKHByaXYtPmJhc2UgKyBSTkdfQ1IpOwogCWludCBlcnI7
CkBAIC0xNzEsNyArMTcyLDcgQEAgc3RhdGljIGludCBzdG0zMl9ybmdfY29uY2VhbF9zZWVkX2Vy
cm9yKHN0cnVjdCBod3JuZyAqcm5nKQogewogCXN0cnVjdCBzdG0zMl9ybmdfcHJpdmF0ZSAqcHJp
diA9IGNvbnRhaW5lcl9vZihybmcsIHN0cnVjdCBzdG0zMl9ybmdfcHJpdmF0ZSwgcm5nKTsKIAot
CWRldl9kYmcoKHN0cnVjdCBkZXZpY2UgKilwcml2LT5ybmcucHJpdiwgIkNvbmNlYWxpbmcgc2Vl
ZCBlcnJvclxuIik7CisJZGV2X2RiZyhwcml2LT5kZXYsICJDb25jZWFsaW5nIHNlZWQgZXJyb3Jc
biIpOwogCiAJaWYgKHByaXYtPmRhdGEtPmhhc19jb25kX3Jlc2V0KQogCQlyZXR1cm4gc3RtMzJf
cm5nX2NvbmNlYWxfc2VlZF9lcnJvcl9jb25kX3Jlc2V0KHByaXYpOwpAQCAtMTg3LDcgKzE4OCw3
IEBAIHN0YXRpYyBpbnQgc3RtMzJfcm5nX3JlYWQoc3RydWN0IGh3cm5nICpybmcsIHZvaWQgKmRh
dGEsIHNpemVfdCBtYXgsIGJvb2wgd2FpdCkKIAlpbnQgcmV0dmFsID0gMCwgZXJyID0gMDsKIAl1
MzIgc3I7CiAKLQlyZXR2YWwgPSBwbV9ydW50aW1lX3Jlc3VtZV9hbmRfZ2V0KChzdHJ1Y3QgZGV2
aWNlICopcHJpdi0+cm5nLnByaXYpOworCXJldHZhbCA9IHBtX3J1bnRpbWVfcmVzdW1lX2FuZF9n
ZXQocHJpdi0+ZGV2KTsKIAlpZiAocmV0dmFsKQogCQlyZXR1cm4gcmV0dmFsOwogCkBAIC0yMDYs
OCArMjA3LDcgQEAgc3RhdGljIGludCBzdG0zMl9ybmdfcmVhZChzdHJ1Y3QgaHdybmcgKnJuZywg
dm9pZCAqZGF0YSwgc2l6ZV90IG1heCwgYm9vbCB3YWl0KQogCQkJCQkJCQkgICBzciwgc3IsCiAJ
CQkJCQkJCSAgIDEwLCA1MDAwMCk7CiAJCQlpZiAoZXJyKSB7Ci0JCQkJZGV2X2Vycigoc3RydWN0
IGRldmljZSAqKXByaXYtPnJuZy5wcml2LAotCQkJCQkiJXM6IHRpbWVvdXQgJXghXG4iLCBfX2Z1
bmNfXywgc3IpOworCQkJCWRldl9lcnIocHJpdi0+ZGV2LCAiJXM6IHRpbWVvdXQgJXghXG4iLCBf
X2Z1bmNfXywgc3IpOwogCQkJCWJyZWFrOwogCQkJfQogCQl9IGVsc2UgaWYgKCFzcikgewpAQCAt
MjIwLDggKzIyMCw3IEBAIHN0YXRpYyBpbnQgc3RtMzJfcm5nX3JlYWQoc3RydWN0IGh3cm5nICpy
bmcsIHZvaWQgKmRhdGEsIHNpemVfdCBtYXgsIGJvb2wgd2FpdCkKIAkJCQllcnIgPSBzdG0zMl9y
bmdfY29uY2VhbF9zZWVkX2Vycm9yKHJuZyk7CiAJCQkJaSsrOwogCQkJCWlmIChlcnIgJiYgaSA+
IFJOR19OQl9SRUNPVkVSX1RSSUVTKSB7Ci0JCQkJCWRldl9lcnIoKHN0cnVjdCBkZXZpY2UgKilw
cml2LT5ybmcucHJpdiwKLQkJCQkJCSJDb3VsZG4ndCByZWNvdmVyIGZyb20gc2VlZCBlcnJvclxu
Iik7CisJCQkJCWRldl9lcnIocHJpdi0+ZGV2LCAiQ291bGRuJ3QgcmVjb3ZlciBmcm9tIHNlZWQg
ZXJyb3JcbiIpOwogCQkJCQlyZXR2YWwgPSAtRU5PVFJFQ09WRVJBQkxFOwogCQkJCQlnb3RvIGV4
aXRfcnBtOwogCQkJCX0KQEAgLTIzOSw4ICsyMzgsNyBAQCBzdGF0aWMgaW50IHN0bTMyX3JuZ19y
ZWFkKHN0cnVjdCBod3JuZyAqcm5nLCB2b2lkICpkYXRhLCBzaXplX3QgbWF4LCBib29sIHdhaXQp
CiAJCQllcnIgPSBzdG0zMl9ybmdfY29uY2VhbF9zZWVkX2Vycm9yKHJuZyk7CiAJCQlpKys7CiAJ
CQlpZiAoZXJyICYmIGkgPiBSTkdfTkJfUkVDT1ZFUl9UUklFUykgewotCQkJCWRldl9lcnIoKHN0
cnVjdCBkZXZpY2UgKilwcml2LT5ybmcucHJpdiwKLQkJCQkJIkNvdWxkbid0IHJlY292ZXIgZnJv
bSBzZWVkIGVycm9yIik7CisJCQkJZGV2X2Vycihwcml2LT5kZXYsICJDb3VsZG4ndCByZWNvdmVy
IGZyb20gc2VlZCBlcnJvciIpOwogCQkJCXJldHZhbCA9IC1FTk9UUkVDT1ZFUkFCTEU7CiAJCQkJ
Z290byBleGl0X3JwbTsKIAkJCX0KQEAgLTI1NSw4ICsyNTMsOCBAQCBzdGF0aWMgaW50IHN0bTMy
X3JuZ19yZWFkKHN0cnVjdCBod3JuZyAqcm5nLCB2b2lkICpkYXRhLCBzaXplX3QgbWF4LCBib29s
IHdhaXQpCiAJfQogCiBleGl0X3JwbToKLQlwbV9ydW50aW1lX21hcmtfbGFzdF9idXN5KChzdHJ1
Y3QgZGV2aWNlICopIHByaXYtPnJuZy5wcml2KTsKLQlwbV9ydW50aW1lX3B1dF9zeW5jX2F1dG9z
dXNwZW5kKChzdHJ1Y3QgZGV2aWNlICopIHByaXYtPnJuZy5wcml2KTsKKwlwbV9ydW50aW1lX21h
cmtfbGFzdF9idXN5KHByaXYtPmRldik7CisJcG1fcnVudGltZV9wdXRfc3luY19hdXRvc3VzcGVu
ZChwcml2LT5kZXYpOwogCiAJcmV0dXJuIHJldHZhbCB8fCAhd2FpdCA/IHJldHZhbCA6IC1FSU87
CiB9CkBAIC0zMzEsOCArMzI5LDcgQEAgc3RhdGljIGludCBzdG0zMl9ybmdfaW5pdChzdHJ1Y3Qg
aHdybmcgKnJuZykKIAkJCQkJCQkxMCwgNTAwMDApOwogCQlpZiAoZXJyKSB7CiAJCQljbGtfZGlz
YWJsZV91bnByZXBhcmUocHJpdi0+Y2xrKTsKLQkJCWRldl9lcnIoKHN0cnVjdCBkZXZpY2UgKilw
cml2LT5ybmcucHJpdiwKLQkJCQkiJXM6IHRpbWVvdXQgJXghXG4iLCBfX2Z1bmNfXywgcmVnKTsK
KwkJCWRldl9lcnIocHJpdi0+ZGV2LCAiJXM6IHRpbWVvdXQgJXghXG4iLCBfX2Z1bmNfXywgcmVn
KTsKIAkJCXJldHVybiAtRUlOVkFMOwogCQl9CiAJfSBlbHNlIHsKQEAgLTM2MCw4ICszNTcsNyBA
QCBzdGF0aWMgaW50IHN0bTMyX3JuZ19pbml0KHN0cnVjdCBod3JuZyAqcm5nKQogCQkJCQkJMTAs
IDEwMDAwMCk7CiAJaWYgKGVyciB8fCAocmVnICYgflJOR19TUl9EUkRZKSkgewogCQljbGtfZGlz
YWJsZV91bnByZXBhcmUocHJpdi0+Y2xrKTsKLQkJZGV2X2Vycigoc3RydWN0IGRldmljZSAqKXBy
aXYtPnJuZy5wcml2LAotCQkJIiVzOiB0aW1lb3V0OiV4IFNSOiAleCFcbiIsIF9fZnVuY19fLCBl
cnIsIHJlZyk7CisJCWRldl9lcnIocHJpdi0+ZGV2LCAiJXM6IHRpbWVvdXQ6JXggU1I6ICV4IVxu
IiwgX19mdW5jX18sIGVyciwgcmVnKTsKIAkJcmV0dXJuIC1FSU5WQUw7CiAJfQogCkBAIC00Njcs
OCArNDYzLDcgQEAgc3RhdGljIGludCBfX21heWJlX3VudXNlZCBzdG0zMl9ybmdfcmVzdW1lKHN0
cnVjdCBkZXZpY2UgKmRldikKIAogCQlpZiAoZXJyKSB7CiAJCQljbGtfZGlzYWJsZV91bnByZXBh
cmUocHJpdi0+Y2xrKTsKLQkJCWRldl9lcnIoKHN0cnVjdCBkZXZpY2UgKilwcml2LT5ybmcucHJp
diwKLQkJCQkiJXM6IHRpbWVvdXQ6JXggQ1I6ICV4IVxuIiwgX19mdW5jX18sIGVyciwgcmVnKTsK
KwkJCWRldl9lcnIocHJpdi0+ZGV2LCAiJXM6IHRpbWVvdXQ6JXggQ1I6ICV4IVxuIiwgX19mdW5j
X18sIGVyciwgcmVnKTsKIAkJCXJldHVybiAtRUlOVkFMOwogCQl9CiAJfSBlbHNlIHsKQEAgLTU0
Myw2ICs1MzgsNyBAQCBzdGF0aWMgaW50IHN0bTMyX3JuZ19wcm9iZShzdHJ1Y3QgcGxhdGZvcm1f
ZGV2aWNlICpvZmRldikKIAogCXByaXYtPmNlZCA9IG9mX3Byb3BlcnR5X3JlYWRfYm9vbChucCwg
ImNsb2NrLWVycm9yLWRldGVjdCIpOwogCXByaXYtPmxvY2tfY29uZiA9IG9mX3Byb3BlcnR5X3Jl
YWRfYm9vbChucCwgInN0LHJuZy1sb2NrLWNvbmYiKTsKKwlwcml2LT5kZXYgPSBkZXY7CiAKIAlw
cml2LT5kYXRhID0gb2ZfZGV2aWNlX2dldF9tYXRjaF9kYXRhKGRldik7CiAJaWYgKCFwcml2LT5k
YXRhKQpAQCAtNTUzLDcgKzU0OSw2IEBAIHN0YXRpYyBpbnQgc3RtMzJfcm5nX3Byb2JlKHN0cnVj
dCBwbGF0Zm9ybV9kZXZpY2UgKm9mZGV2KQogCXByaXYtPnJuZy5uYW1lID0gZGV2X2RyaXZlcl9z
dHJpbmcoZGV2KTsKIAlwcml2LT5ybmcuaW5pdCA9IHN0bTMyX3JuZ19pbml0OwogCXByaXYtPnJu
Zy5yZWFkID0gc3RtMzJfcm5nX3JlYWQ7Ci0JcHJpdi0+cm5nLnByaXYgPSAodW5zaWduZWQgbG9u
ZykgZGV2OwogCXByaXYtPnJuZy5xdWFsaXR5ID0gOTAwOwogCiAJcG1fcnVudGltZV9zZXRfYXV0
b3N1c3BlbmRfZGVsYXkoZGV2LCAxMDApOwotLSAKMi40My4wCgpfX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fXwpMaW51eC1zdG0zMiBtYWlsaW5nIGxpc3QKTGlu
dXgtc3RtMzJAc3QtbWQtbWFpbG1hbi5zdG9ybXJlcGx5LmNvbQpodHRwczovL3N0LW1kLW1haWxt
YW4uc3Rvcm1yZXBseS5jb20vbWFpbG1hbi9saXN0aW5mby9saW51eC1zdG0zMgo=
