Return-Path: <linux-stm32-bounces@st-md-mailman.stormreply.com>
X-Original-To: lists+linux-stm32@lfdr.de
Delivered-To: lists+linux-stm32@lfdr.de
Received: from stm-ict-prod-mailman-01.stormreply.prv (st-md-mailman.stormreply.com [52.209.6.89])
	by mail.lfdr.de (Postfix) with ESMTPS id 4D9395702CF
	for <lists+linux-stm32@lfdr.de>; Mon, 11 Jul 2022 14:40:38 +0200 (CEST)
Received: from ip-172-31-3-47.eu-west-1.compute.internal (localhost [127.0.0.1])
	by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTP id 13C3AC640F0;
	Mon, 11 Jul 2022 12:40:38 +0000 (UTC)
Received: from mx0a-00128a01.pphosted.com (mx0a-00128a01.pphosted.com
 [148.163.135.77])
 (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTPS id 8C2BBC640EE
 for <linux-stm32@st-md-mailman.stormreply.com>;
 Mon, 11 Jul 2022 12:40:36 +0000 (UTC)
Received: from pps.filterd (m0167088.ppops.net [127.0.0.1])
 by mx0a-00128a01.pphosted.com (8.17.1.5/8.17.1.5) with ESMTP id 26BCKgaa011660;
 Mon, 11 Jul 2022 08:39:46 -0400
Received: from nwd2mta4.analog.com ([137.71.173.58])
 by mx0a-00128a01.pphosted.com (PPS) with ESMTPS id 3h73h6cajv-1
 (version=TLSv1.2 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=NOT);
 Mon, 11 Jul 2022 08:39:46 -0400
Received: from ASHBMBX9.ad.analog.com (ASHBMBX9.ad.analog.com [10.64.17.10])
 by nwd2mta4.analog.com (8.14.7/8.14.7) with ESMTP id 26BCdiYu000437
 (version=TLSv1/SSLv3 cipher=ECDHE-RSA-AES256-GCM-SHA384 bits=256 verify=FAIL); 
 Mon, 11 Jul 2022 08:39:44 -0400
Received: from ASHBCASHYB5.ad.analog.com (10.64.17.133) by
 ASHBMBX9.ad.analog.com (10.64.17.10) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.2.986.14; Mon, 11 Jul 2022 08:39:44 -0400
Received: from ASHBMBX9.ad.analog.com (10.64.17.10) by
 ASHBCASHYB5.ad.analog.com (10.64.17.133) with Microsoft SMTP Server
 (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.2.986.14; Mon, 11 Jul 2022 08:39:43 -0400
Received: from zeus.spd.analog.com (10.66.68.11) by ashbmbx9.ad.analog.com
 (10.64.17.10) with Microsoft SMTP Server id 15.2.986.14 via Frontend
 Transport; Mon, 11 Jul 2022 08:39:43 -0400
Received: from nsa.ad.analog.com ([10.44.3.53])
 by zeus.spd.analog.com (8.15.1/8.15.1) with ESMTP id 26BCbVEI011687;
 Mon, 11 Jul 2022 08:39:32 -0400
From: =?UTF-8?q?Nuno=20S=C3=A1?= <nuno.sa@analog.com>
To: <linux-arm-msm@vger.kernel.org>, <openbmc@lists.ozlabs.org>,
 <linux-renesas-soc@vger.kernel.org>,
 <linux-mediatek@lists.infradead.org>, <linux-imx@nxp.com>,
 <linux-mips@vger.kernel.org>, Lad Prabhakar
 <prabhakar.mahadev-lad.rj@bp.renesas.com>,
 <linux-iio@vger.kernel.org>, <chrome-platform@lists.linux.dev>,
 <linux-arm-kernel@lists.infradead.org>,
 <linux-stm32@st-md-mailman.stormreply.com>
Date: Mon, 11 Jul 2022 14:38:33 +0200
Message-ID: <20220711123835.811358-14-nuno.sa@analog.com>
X-Mailer: git-send-email 2.37.0
In-Reply-To: <20220711123835.811358-1-nuno.sa@analog.com>
References: <20220711123835.811358-1-nuno.sa@analog.com>
MIME-Version: 1.0
X-ADIRuleOP-NewSCL: Rule Triggered
X-Proofpoint-GUID: ejivJiO8TI4hSFFVr6V_bnQG0XrumHr7
X-Proofpoint-ORIG-GUID: ejivJiO8TI4hSFFVr6V_bnQG0XrumHr7
X-Proofpoint-Virus-Version: vendor=baseguard
 engine=ICAP:2.0.205,Aquarius:18.0.883,Hydra:6.0.517,FMLib:17.11.122.1
 definitions=2022-07-11_18,2022-07-08_01,2022-06-22_01
X-Proofpoint-Spam-Details: rule=outbound_notspam policy=outbound score=0
 malwarescore=0 bulkscore=0
 mlxlogscore=999 lowpriorityscore=0 phishscore=0 mlxscore=0 suspectscore=0
 impostorscore=0 adultscore=0 priorityscore=1501 clxscore=1015 spamscore=0
 classifier=spam adjust=0 reason=mlx scancount=1 engine=8.12.0-2206140000
 definitions=main-2207110054
Cc: Alexandre Belloni <alexandre.belloni@bootlin.com>,
 Daniel Lezcano <daniel.lezcano@linaro.org>, Tomer Maimon <tmaimon77@gmail.com>,
 "Rafael J. Wysocki" <rafael@kernel.org>,
 Linus Walleij <linus.walleij@linaro.org>, Amit Kucheria <amitk@kernel.org>,
 Tali Perry <tali.perry1@gmail.com>, Paul Cercueil <paul@crapouillou.net>,
 Miquel Raynal <miquel.raynal@bootlin.com>, Guenter Roeck <groeck@chromium.org>,
 Fabio Estevam <festevam@gmail.com>, Lars-Peter Clausen <lars@metafoo.de>,
 Benjamin Fair <benjaminfair@google.com>,
 Jishnu Prakash <quic_jprakash@quicinc.com>, Haibo Chen <haibo.chen@nxp.com>,
 Nancy Yuen <yuenn@google.com>, Andy Shevchenko <andy.shevchenko@gmail.com>,
 Andy Gross <agross@kernel.org>, Zhang
 Rui <rui.zhang@intel.com>, Christophe Branchereau <cbranchereau@gmail.com>,
 Saravanan Sekar <sravanhome@gmail.com>,
 Michael Hennerich <Michael.Hennerich@analog.com>,
 Sascha Hauer <s.hauer@pengutronix.de>, Cai Huoqing <cai.huoqing@linux.dev>,
 Matthias
 Brugger <matthias.bgg@gmail.com>, Gwendal Grignou <gwendal@chromium.org>,
 Bjorn Andersson <bjorn.andersson@linaro.org>,
 Benson Leung <bleung@chromium.org>,
 Pengutronix Kernel Team <kernel@pengutronix.de>,
 Lorenzo Bianconi <lorenzo@kernel.org>, Avi Fishman <avifishman70@gmail.com>,
 Patrick Venture <venture@google.com>,
 Nicolas Ferre <nicolas.ferre@microchip.com>,
 Thara Gopinath <thara.gopinath@linaro.org>, Arnd
 Bergmann <arnd@arndb.de>, Maxime Coquelin <mcoquelin.stm32@gmail.com>, Eugen
 Hristev <eugen.hristev@microchip.com>, Shawn Guo <shawnguo@kernel.org>,
 Claudiu Beznea <claudiu.beznea@microchip.com>,
 Jonathan Cameron <jic23@kernel.org>
Subject: [Linux-stm32] [PATCH v2 13/15] iio: adc: stm32-adc: convert to
	device properties
X-BeenThere: linux-stm32@st-md-mailman.stormreply.com
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: <linux-stm32.st-md-mailman.stormreply.com>
List-Unsubscribe: <https://st-md-mailman.stormreply.com/mailman/options/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=unsubscribe>
List-Archive: <http://st-md-mailman.stormreply.com/pipermail/linux-stm32/>
List-Post: <mailto:linux-stm32@st-md-mailman.stormreply.com>
List-Help: <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=help>
List-Subscribe: <https://st-md-mailman.stormreply.com/mailman/listinfo/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: linux-stm32-bounces@st-md-mailman.stormreply.com
Sender: "Linux-stm32" <linux-stm32-bounces@st-md-mailman.stormreply.com>

TWFrZSB0aGUgY29udmVyc2lvbiB0byBmaXJtd2FyZSBhZ25vc3RpYyBkZXZpY2UgcHJvcGVydGll
cy4gQXMgcGFydCBvZgp0aGUgY29udmVyc2lvbiB0aGUgSUlPIGlua2VybiBpbnRlcmZhY2UgJ29m
X3hsYXRlKCknIGlzIGFsc28gY29udmVydGVkIHRvCidmd25vZGVfeGxhdGUoKScuIFRoZSBnb2Fs
IGlzIHRvIGNvbXBsZXRlbHkgZHJvcCAnb2ZfeGxhdGUnIGFuZCBoZW5jZSBPRgpkZXBlbmRlbmNp
ZXMgZnJvbSBJSU8uCgpTaWduZWQtb2ZmLWJ5OiBOdW5vIFPDoSA8bnVuby5zYUBhbmFsb2cuY29t
PgotLS0KIGRyaXZlcnMvaWlvL2FkYy9zdG0zMi1hZGMuYyB8IDEyMSArKysrKysrKysrKysrKysr
KysrKy0tLS0tLS0tLS0tLS0tLS0KIDEgZmlsZSBjaGFuZ2VkLCA2NyBpbnNlcnRpb25zKCspLCA1
NCBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9kcml2ZXJzL2lpby9hZGMvc3RtMzItYWRjLmMg
Yi9kcml2ZXJzL2lpby9hZGMvc3RtMzItYWRjLmMKaW5kZXggMzk4NWZlOTcyODkyLi5lNTU4NTkx
MTNkZjggMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvaWlvL2FkYy9zdG0zMi1hZGMuYworKysgYi9kcml2
ZXJzL2lpby9hZGMvc3RtMzItYWRjLmMKQEAgLTIxLDExICsyMSwxMSBAQAogI2luY2x1ZGUgPGxp
bnV4L2lvLmg+CiAjaW5jbHVkZSA8bGludXgvaW9wb2xsLmg+CiAjaW5jbHVkZSA8bGludXgvbW9k
dWxlLmg+CisjaW5jbHVkZSA8bGludXgvbW9kX2RldmljZXRhYmxlLmg+CiAjaW5jbHVkZSA8bGlu
dXgvbnZtZW0tY29uc3VtZXIuaD4KICNpbmNsdWRlIDxsaW51eC9wbGF0Zm9ybV9kZXZpY2UuaD4K
ICNpbmNsdWRlIDxsaW51eC9wbV9ydW50aW1lLmg+Ci0jaW5jbHVkZSA8bGludXgvb2YuaD4KLSNp
bmNsdWRlIDxsaW51eC9vZl9kZXZpY2UuaD4KKyNpbmNsdWRlIDxsaW51eC9wcm9wZXJ0eS5oPgog
CiAjaW5jbHVkZSAic3RtMzItYWRjLWNvcmUuaCIKIApAQCAtMTUzMCw4ICsxNTMwLDggQEAgc3Rh
dGljIGludCBzdG0zMl9hZGNfdXBkYXRlX3NjYW5fbW9kZShzdHJ1Y3QgaWlvX2RldiAqaW5kaW9f
ZGV2LAogCXJldHVybiByZXQ7CiB9CiAKLXN0YXRpYyBpbnQgc3RtMzJfYWRjX29mX3hsYXRlKHN0
cnVjdCBpaW9fZGV2ICppbmRpb19kZXYsCi0JCQkgICAgICBjb25zdCBzdHJ1Y3Qgb2ZfcGhhbmRs
ZV9hcmdzICppaW9zcGVjKQorc3RhdGljIGludCBzdG0zMl9hZGNfZndub2RlX3hsYXRlKHN0cnVj
dCBpaW9fZGV2ICppbmRpb19kZXYsCisJCQkJICBjb25zdCBzdHJ1Y3QgZndub2RlX3JlZmVyZW5j
ZV9hcmdzICppaW9zcGVjKQogewogCWludCBpOwogCkBAIC0xNTg1LDcgKzE1ODUsNyBAQCBzdGF0
aWMgY29uc3Qgc3RydWN0IGlpb19pbmZvIHN0bTMyX2FkY19paW9faW5mbyA9IHsKIAkuaHdmaWZv
X3NldF93YXRlcm1hcmsgPSBzdG0zMl9hZGNfc2V0X3dhdGVybWFyaywKIAkudXBkYXRlX3NjYW5f
bW9kZSA9IHN0bTMyX2FkY191cGRhdGVfc2Nhbl9tb2RlLAogCS5kZWJ1Z2ZzX3JlZ19hY2Nlc3Mg
PSBzdG0zMl9hZGNfZGVidWdmc19yZWdfYWNjZXNzLAotCS5vZl94bGF0ZSA9IHN0bTMyX2FkY19v
Zl94bGF0ZSwKKwkuZndub2RlX3hsYXRlID0gc3RtMzJfYWRjX2Z3bm9kZV94bGF0ZSwKIH07CiAK
IHN0YXRpYyB1bnNpZ25lZCBpbnQgc3RtMzJfYWRjX2RtYV9yZXNpZHVlKHN0cnVjdCBzdG0zMl9h
ZGMgKmFkYykKQEAgLTE3ODIsMTQgKzE3ODIsMTQgQEAgc3RhdGljIGNvbnN0IHN0cnVjdCBpaW9f
Y2hhbl9zcGVjX2V4dF9pbmZvIHN0bTMyX2FkY19leHRfaW5mb1tdID0gewogCXt9LAogfTsKIAot
c3RhdGljIGludCBzdG0zMl9hZGNfb2ZfZ2V0X3Jlc29sdXRpb24oc3RydWN0IGlpb19kZXYgKmlu
ZGlvX2RldikKK3N0YXRpYyBpbnQgc3RtMzJfYWRjX2Z3X2dldF9yZXNvbHV0aW9uKHN0cnVjdCBp
aW9fZGV2ICppbmRpb19kZXYpCiB7Ci0Jc3RydWN0IGRldmljZV9ub2RlICpub2RlID0gaW5kaW9f
ZGV2LT5kZXYub2Zfbm9kZTsKKwlzdHJ1Y3QgZGV2aWNlICpkZXYgPSAmaW5kaW9fZGV2LT5kZXY7
CiAJc3RydWN0IHN0bTMyX2FkYyAqYWRjID0gaWlvX3ByaXYoaW5kaW9fZGV2KTsKIAl1bnNpZ25l
ZCBpbnQgaTsKIAl1MzIgcmVzOwogCi0JaWYgKG9mX3Byb3BlcnR5X3JlYWRfdTMyKG5vZGUsICJh
c3NpZ25lZC1yZXNvbHV0aW9uLWJpdHMiLCAmcmVzKSkKKwlpZiAoZGV2aWNlX3Byb3BlcnR5X3Jl
YWRfdTMyKGRldiwgImFzc2lnbmVkLXJlc29sdXRpb24tYml0cyIsICZyZXMpKQogCQlyZXMgPSBh
ZGMtPmNmZy0+YWRjX2luZm8tPnJlc29sdXRpb25zWzBdOwogCiAJZm9yIChpID0gMDsgaSA8IGFk
Yy0+Y2ZnLT5hZGNfaW5mby0+bnVtX3JlczsgaSsrKQpAQCAtMTg3MywxMSArMTg3MywxMSBAQCBz
dGF0aWMgdm9pZCBzdG0zMl9hZGNfY2hhbl9pbml0X29uZShzdHJ1Y3QgaWlvX2RldiAqaW5kaW9f
ZGV2LAogCiBzdGF0aWMgaW50IHN0bTMyX2FkY19nZXRfbGVnYWN5X2NoYW5fY291bnQoc3RydWN0
IGlpb19kZXYgKmluZGlvX2Rldiwgc3RydWN0IHN0bTMyX2FkYyAqYWRjKQogewotCXN0cnVjdCBk
ZXZpY2Vfbm9kZSAqbm9kZSA9IGluZGlvX2Rldi0+ZGV2Lm9mX25vZGU7CisJc3RydWN0IGRldmlj
ZSAqZGV2ID0gJmluZGlvX2Rldi0+ZGV2OwogCWNvbnN0IHN0cnVjdCBzdG0zMl9hZGNfaW5mbyAq
YWRjX2luZm8gPSBhZGMtPmNmZy0+YWRjX2luZm87CiAJaW50IG51bV9jaGFubmVscyA9IDAsIHJl
dDsKIAotCXJldCA9IG9mX3Byb3BlcnR5X2NvdW50X3UzMl9lbGVtcyhub2RlLCAic3QsYWRjLWNo
YW5uZWxzIik7CisJcmV0ID0gZGV2aWNlX3Byb3BlcnR5X2NvdW50X3UzMihkZXYsICJzdCxhZGMt
Y2hhbm5lbHMiKTsKIAlpZiAocmV0ID4gYWRjX2luZm8tPm1heF9jaGFubmVscykgewogCQlkZXZf
ZXJyKCZpbmRpb19kZXYtPmRldiwgIkJhZCBzdCxhZGMtY2hhbm5lbHM/XG4iKTsKIAkJcmV0dXJu
IC1FSU5WQUw7CkBAIC0xODg1LDggKzE4ODUsOCBAQCBzdGF0aWMgaW50IHN0bTMyX2FkY19nZXRf
bGVnYWN5X2NoYW5fY291bnQoc3RydWN0IGlpb19kZXYgKmluZGlvX2Rldiwgc3RydWN0IHN0bQog
CQludW1fY2hhbm5lbHMgKz0gcmV0OwogCX0KIAotCXJldCA9IG9mX3Byb3BlcnR5X2NvdW50X2Vs
ZW1zX29mX3NpemUobm9kZSwgInN0LGFkYy1kaWZmLWNoYW5uZWxzIiwKLQkJCQkJICAgICAgc2l6
ZW9mKHN0cnVjdCBzdG0zMl9hZGNfZGlmZl9jaGFubmVsKSk7CisJLyogZWFjaCBzdCxhZGMtZGlm
Zi1jaGFubmVscyBpcyBhIGdyb3VwIG9mIDIgdTMyICovCisJcmV0ID0gZGV2aWNlX3Byb3BlcnR5
X2NvdW50X3U2NChkZXYsICJzdCxhZGMtZGlmZi1jaGFubmVscyIpOwogCWlmIChyZXQgPiBhZGNf
aW5mby0+bWF4X2NoYW5uZWxzKSB7CiAJCWRldl9lcnIoJmluZGlvX2Rldi0+ZGV2LCAiQmFkIHN0
LGFkYy1kaWZmLWNoYW5uZWxzP1xuIik7CiAJCXJldHVybiAtRUlOVkFMOwpAQCAtMTg5Niw3ICsx
ODk2LDcgQEAgc3RhdGljIGludCBzdG0zMl9hZGNfZ2V0X2xlZ2FjeV9jaGFuX2NvdW50KHN0cnVj
dCBpaW9fZGV2ICppbmRpb19kZXYsIHN0cnVjdCBzdG0KIAl9CiAKIAkvKiBPcHRpb25hbCBzYW1w
bGUgdGltZSBpcyBwcm92aWRlZCBlaXRoZXIgZm9yIGVhY2gsIG9yIGFsbCBjaGFubmVscyAqLwot
CXJldCA9IG9mX3Byb3BlcnR5X2NvdW50X3UzMl9lbGVtcyhub2RlLCAic3QsbWluLXNhbXBsZS10
aW1lLW5zZWNzIik7CisJcmV0ID0gZGV2aWNlX3Byb3BlcnR5X2NvdW50X3UzMihkZXYsICJzdCxt
aW4tc2FtcGxlLXRpbWUtbnNlY3MiKTsKIAlpZiAocmV0ID4gMSAmJiByZXQgIT0gbnVtX2NoYW5u
ZWxzKSB7CiAJCWRldl9lcnIoJmluZGlvX2Rldi0+ZGV2LCAiSW52YWxpZCBzdCxtaW4tc2FtcGxl
LXRpbWUtbnNlY3NcbiIpOwogCQlyZXR1cm4gLUVJTlZBTDsKQEAgLTE5MDcsMjEgKzE5MDcsMjAg
QEAgc3RhdGljIGludCBzdG0zMl9hZGNfZ2V0X2xlZ2FjeV9jaGFuX2NvdW50KHN0cnVjdCBpaW9f
ZGV2ICppbmRpb19kZXYsIHN0cnVjdCBzdG0KIAogc3RhdGljIGludCBzdG0zMl9hZGNfbGVnYWN5
X2NoYW5faW5pdChzdHJ1Y3QgaWlvX2RldiAqaW5kaW9fZGV2LAogCQkJCSAgICAgIHN0cnVjdCBz
dG0zMl9hZGMgKmFkYywKLQkJCQkgICAgICBzdHJ1Y3QgaWlvX2NoYW5fc3BlYyAqY2hhbm5lbHMp
CisJCQkJICAgICAgc3RydWN0IGlpb19jaGFuX3NwZWMgKmNoYW5uZWxzLAorCQkJCSAgICAgIGlu
dCBuY2hhbnMpCiB7Ci0Jc3RydWN0IGRldmljZV9ub2RlICpub2RlID0gaW5kaW9fZGV2LT5kZXYu
b2Zfbm9kZTsKIAljb25zdCBzdHJ1Y3Qgc3RtMzJfYWRjX2luZm8gKmFkY19pbmZvID0gYWRjLT5j
ZmctPmFkY19pbmZvOwogCXN0cnVjdCBzdG0zMl9hZGNfZGlmZl9jaGFubmVsIGRpZmZbU1RNMzJf
QURDX0NIX01BWF07CisJc3RydWN0IGRldmljZSAqZGV2ID0gJmluZGlvX2Rldi0+ZGV2OwogCXUz
MiBudW1fZGlmZiA9IGFkYy0+bnVtX2RpZmY7CiAJaW50IHNpemUgPSBudW1fZGlmZiAqIHNpemVv
ZigqZGlmZikgLyBzaXplb2YodTMyKTsKLQlpbnQgc2Nhbl9pbmRleCA9IDAsIHZhbCwgcmV0LCBp
OwotCXN0cnVjdCBwcm9wZXJ0eSAqcHJvcDsKLQljb25zdCBfX2JlMzIgKmN1cjsKLQl1MzIgc21w
ID0gMDsKKwlpbnQgc2Nhbl9pbmRleCA9IDAsIHJldCwgaTsKKwl1MzIgc21wID0gMCwgbnNtcHMs
IHNtcHNbU1RNMzJfQURDX0NIX01BWF0sIGNoYW5zW1NUTTMyX0FEQ19DSF9NQVhdOwogCiAJaWYg
KG51bV9kaWZmKSB7Ci0JCXJldCA9IG9mX3Byb3BlcnR5X3JlYWRfdTMyX2FycmF5KG5vZGUsICJz
dCxhZGMtZGlmZi1jaGFubmVscyIsCi0JCQkJCQkgKHUzMiAqKWRpZmYsIHNpemUpOworCQlyZXQg
PSBkZXZpY2VfcHJvcGVydHlfcmVhZF91MzJfYXJyYXkoZGV2LCAic3QsYWRjLWRpZmYtY2hhbm5l
bHMiLAorCQkJCQkJICAgICAodTMyICopZGlmZiwgc2l6ZSk7CiAJCWlmIChyZXQpIHsKIAkJCWRl
dl9lcnIoJmluZGlvX2Rldi0+ZGV2LCAiRmFpbGVkIHRvIGdldCBkaWZmIGNoYW5uZWxzICVkXG4i
LCByZXQpOwogCQkJcmV0dXJuIHJldDsKQEAgLTE5NDIsMzIgKzE5NDEsNTEgQEAgc3RhdGljIGlu
dCBzdG0zMl9hZGNfbGVnYWN5X2NoYW5faW5pdChzdHJ1Y3QgaWlvX2RldiAqaW5kaW9fZGV2LAog
CQl9CiAJfQogCi0Jb2ZfcHJvcGVydHlfZm9yX2VhY2hfdTMyKG5vZGUsICJzdCxhZGMtY2hhbm5l
bHMiLCBwcm9wLCBjdXIsIHZhbCkgewotCQlpZiAodmFsID49IGFkY19pbmZvLT5tYXhfY2hhbm5l
bHMpIHsKLQkJCWRldl9lcnIoJmluZGlvX2Rldi0+ZGV2LCAiSW52YWxpZCBjaGFubmVsICVkXG4i
LCB2YWwpOworCXJldCA9IGRldmljZV9wcm9wZXJ0eV9yZWFkX3UzMl9hcnJheShkZXYsICJzdCxh
ZGMtY2hhbm5lbHMiLCBjaGFucywKKwkJCQkJICAgICBuY2hhbnMpOworCWlmIChyZXQpCisJCXJl
dHVybiByZXQ7CisKKwlmb3IgKGkgPSAwOyBpIDwgbmNoYW5zOyBpKyspIHsKKwkJaWYgKGNoYW5z
W2ldID49IGFkY19pbmZvLT5tYXhfY2hhbm5lbHMpIHsKKwkJCWRldl9lcnIoJmluZGlvX2Rldi0+
ZGV2LCAiSW52YWxpZCBjaGFubmVsICVkXG4iLAorCQkJCWNoYW5zW2ldKTsKIAkJCXJldHVybiAt
RUlOVkFMOwogCQl9CiAKIAkJLyogQ2hhbm5lbCBjYW4ndCBiZSBjb25maWd1cmVkIGJvdGggYXMg
c2luZ2xlLWVuZGVkICYgZGlmZiAqLwogCQlmb3IgKGkgPSAwOyBpIDwgbnVtX2RpZmY7IGkrKykg
ewotCQkJaWYgKHZhbCA9PSBkaWZmW2ldLnZpbnApIHsKLQkJCQlkZXZfZXJyKCZpbmRpb19kZXYt
PmRldiwgImNoYW5uZWwgJWQgbWlzY29uZmlndXJlZFxuIiwJdmFsKTsKKwkJCWlmIChjaGFuc1tp
XSA9PSBkaWZmW2ldLnZpbnApIHsKKwkJCQlkZXZfZXJyKCZpbmRpb19kZXYtPmRldiwgImNoYW5u
ZWwgJWQgbWlzY29uZmlndXJlZFxuIiwJY2hhbnNbaV0pOwogCQkJCXJldHVybiAtRUlOVkFMOwog
CQkJfQogCQl9Ci0JCXN0bTMyX2FkY19jaGFuX2luaXRfb25lKGluZGlvX2RldiwgJmNoYW5uZWxz
W3NjYW5faW5kZXhdLCB2YWwsCi0JCQkJCTAsIHNjYW5faW5kZXgsIGZhbHNlKTsKKwkJc3RtMzJf
YWRjX2NoYW5faW5pdF9vbmUoaW5kaW9fZGV2LCAmY2hhbm5lbHNbc2Nhbl9pbmRleF0sCisJCQkJ
CWNoYW5zW2ldLCAwLCBzY2FuX2luZGV4LCBmYWxzZSk7CiAJCXNjYW5faW5kZXgrKzsKIAl9CiAK
Kwluc21wcyA9IGRldmljZV9wcm9wZXJ0eV9jb3VudF91MzIoZGV2LCAic3QsbWluLXNhbXBsZS10
aW1lLW5zZWNzIik7CisJaWYgKG5zbXBzKSB7CisJCWlmIChuc21wcyA+PSBuY2hhbnMpCisJCQlu
c21wcyA9IG5jaGFuczsKKworCQlyZXQgPSBkZXZpY2VfcHJvcGVydHlfcmVhZF91MzJfYXJyYXko
ZGV2LCAic3QsbWluLXNhbXBsZS10aW1lLW5zZWNzIiwKKwkJCQkJCSAgICAgc21wcywgbnNtcHMp
OworCQlpZiAocmV0KQorCQkJcmV0dXJuIHJldDsKKwl9CisKIAlmb3IgKGkgPSAwOyBpIDwgc2Nh
bl9pbmRleDsgaSsrKSB7CiAJCS8qCi0JCSAqIFVzaW5nIG9mX3Byb3BlcnR5X3JlYWRfdTMyX2lu
ZGV4KCksIHNtcCB2YWx1ZSB3aWxsIG9ubHkgYmUKLQkJICogbW9kaWZpZWQgaWYgdmFsaWQgdTMy
IHZhbHVlIGNhbiBiZSBkZWNvZGVkLiBUaGlzIGFsbG93cyB0bwotCQkgKiBnZXQgZWl0aGVyIG5v
IHZhbHVlLCAxIHNoYXJlZCB2YWx1ZSBmb3IgYWxsIGluZGV4ZXMsIG9yIG9uZQotCQkgKiB2YWx1
ZSBwZXIgY2hhbm5lbC4KKwkJICogVGhpcyBjaGVjayBpcyB1c2VkIHdpdGggdGhlIGFib3ZlIGxv
Z2ljIHNvIHRoYXQgc21wIHZhbHVlCisJCSAqIHdpbGwgb25seSBiZSBtb2RpZmllZCBpZiB2YWxp
ZCB1MzIgdmFsdWUgY2FuIGJlIGRlY29kZWQuIFRoaXMKKwkJICogYWxsb3dzIHRvIGdldCBlaXRo
ZXIgbm8gdmFsdWUsIDEgc2hhcmVkIHZhbHVlIGZvciBhbGwgaW5kZXhlcywKKwkJICogb3Igb25l
IHZhbHVlIHBlciBjaGFubmVsLiBUaGUgcG9pbnQgaXMgdG8gaGF2ZSB0aGUgc2FtZQorCQkgKiBi
ZWhhdmlvciBhcyAnb2ZfcHJvcGVydHlfcmVhZF91MzJfaW5kZXgoKScuCiAJCSAqLwotCQlvZl9w
cm9wZXJ0eV9yZWFkX3UzMl9pbmRleChub2RlLCAic3QsbWluLXNhbXBsZS10aW1lLW5zZWNzIiwg
aSwgJnNtcCk7CisJCWlmIChpIDwgbnNtcHMpCisJCQlzbXAgPSBzbXBzW2ldOwogCiAJCS8qIFBy
ZXBhcmUgc2FtcGxpbmcgdGltZSBzZXR0aW5ncyAqLwogCQlzdG0zMl9hZGNfc21wcl9pbml0KGFk
YywgY2hhbm5lbHNbaV0uY2hhbm5lbCwgc21wKTsKQEAgLTIwMTAsMjIgKzIwMjgsMjEgQEAgc3Rh
dGljIGludCBzdG0zMl9hZGNfZ2VuZXJpY19jaGFuX2luaXQoc3RydWN0IGlpb19kZXYgKmluZGlv
X2RldiwKIAkJCQkgICAgICAgc3RydWN0IHN0bTMyX2FkYyAqYWRjLAogCQkJCSAgICAgICBzdHJ1
Y3QgaWlvX2NoYW5fc3BlYyAqY2hhbm5lbHMpCiB7Ci0Jc3RydWN0IGRldmljZV9ub2RlICpub2Rl
ID0gaW5kaW9fZGV2LT5kZXYub2Zfbm9kZTsKIAljb25zdCBzdHJ1Y3Qgc3RtMzJfYWRjX2luZm8g
KmFkY19pbmZvID0gYWRjLT5jZmctPmFkY19pbmZvOwotCXN0cnVjdCBkZXZpY2Vfbm9kZSAqY2hp
bGQ7CisJc3RydWN0IGZ3bm9kZV9oYW5kbGUgKmNoaWxkOwogCWNvbnN0IGNoYXIgKm5hbWU7CiAJ
aW50IHZhbCwgc2Nhbl9pbmRleCA9IDAsIHJldDsKIAlib29sIGRpZmZlcmVudGlhbDsKIAl1MzIg
dmluWzJdOwogCi0JZm9yX2VhY2hfYXZhaWxhYmxlX2NoaWxkX29mX25vZGUobm9kZSwgY2hpbGQp
IHsKLQkJcmV0ID0gb2ZfcHJvcGVydHlfcmVhZF91MzIoY2hpbGQsICJyZWciLCAmdmFsKTsKKwlk
ZXZpY2VfZm9yX2VhY2hfY2hpbGRfbm9kZSgmaW5kaW9fZGV2LT5kZXYsIGNoaWxkKSB7CisJCXJl
dCA9IGZ3bm9kZV9wcm9wZXJ0eV9yZWFkX3UzMihjaGlsZCwgInJlZyIsICZ2YWwpOwogCQlpZiAo
cmV0KSB7CiAJCQlkZXZfZXJyKCZpbmRpb19kZXYtPmRldiwgIk1pc3NpbmcgY2hhbm5lbCBpbmRl
eCAlZFxuIiwgcmV0KTsKIAkJCWdvdG8gZXJyOwogCQl9CiAKLQkJcmV0ID0gb2ZfcHJvcGVydHlf
cmVhZF9zdHJpbmcoY2hpbGQsICJsYWJlbCIsICZuYW1lKTsKKwkJcmV0ID0gZndub2RlX3Byb3Bl
cnR5X3JlYWRfc3RyaW5nKGNoaWxkLCAibGFiZWwiLCAmbmFtZSk7CiAJCS8qIGxhYmVsIGlzIG9w
dGlvbmFsICovCiAJCWlmICghcmV0KSB7CiAJCQlpZiAoc3RybGVuKG5hbWUpID49IFNUTTMyX0FE
Q19DSF9TWikgewpAQCAtMjA1MCw3ICsyMDY3LDcgQEAgc3RhdGljIGludCBzdG0zMl9hZGNfZ2Vu
ZXJpY19jaGFuX2luaXQoc3RydWN0IGlpb19kZXYgKmluZGlvX2RldiwKIAkJfQogCiAJCWRpZmZl
cmVudGlhbCA9IGZhbHNlOwotCQlyZXQgPSBvZl9wcm9wZXJ0eV9yZWFkX3UzMl9hcnJheShjaGls
ZCwgImRpZmYtY2hhbm5lbHMiLCB2aW4sIDIpOworCQlyZXQgPSBmd25vZGVfcHJvcGVydHlfcmVh
ZF91MzJfYXJyYXkoY2hpbGQsICJkaWZmLWNoYW5uZWxzIiwgdmluLCAyKTsKIAkJLyogZGlmZi1j
aGFubmVscyBpcyBvcHRpb25hbCAqLwogCQlpZiAoIXJldCkgewogCQkJZGlmZmVyZW50aWFsID0g
dHJ1ZTsKQEAgLTIwNjcsNyArMjA4NCw3IEBAIHN0YXRpYyBpbnQgc3RtMzJfYWRjX2dlbmVyaWNf
Y2hhbl9pbml0KHN0cnVjdCBpaW9fZGV2ICppbmRpb19kZXYsCiAJCXN0bTMyX2FkY19jaGFuX2lu
aXRfb25lKGluZGlvX2RldiwgJmNoYW5uZWxzW3NjYW5faW5kZXhdLCB2YWwsCiAJCQkJCXZpblsx
XSwgc2Nhbl9pbmRleCwgZGlmZmVyZW50aWFsKTsKIAotCQlyZXQgPSBvZl9wcm9wZXJ0eV9yZWFk
X3UzMihjaGlsZCwgInN0LG1pbi1zYW1wbGUtdGltZS1ucyIsICZ2YWwpOworCQlyZXQgPSBmd25v
ZGVfcHJvcGVydHlfcmVhZF91MzIoY2hpbGQsICJzdCxtaW4tc2FtcGxlLXRpbWUtbnMiLCAmdmFs
KTsKIAkJLyogc3QsbWluLXNhbXBsZS10aW1lLW5zIGlzIG9wdGlvbmFsICovCiAJCWlmICghcmV0
KSB7CiAJCQlzdG0zMl9hZGNfc21wcl9pbml0KGFkYywgY2hhbm5lbHNbc2Nhbl9pbmRleF0uY2hh
bm5lbCwgdmFsKTsKQEAgLTIwODUsMTQgKzIxMDIsMTMgQEAgc3RhdGljIGludCBzdG0zMl9hZGNf
Z2VuZXJpY19jaGFuX2luaXQoc3RydWN0IGlpb19kZXYgKmluZGlvX2RldiwKIAlyZXR1cm4gc2Nh
bl9pbmRleDsKIAogZXJyOgotCW9mX25vZGVfcHV0KGNoaWxkKTsKKwlmd25vZGVfaGFuZGxlX3B1
dChjaGlsZCk7CiAKIAlyZXR1cm4gcmV0OwogfQogCi1zdGF0aWMgaW50IHN0bTMyX2FkY19jaGFu
X29mX2luaXQoc3RydWN0IGlpb19kZXYgKmluZGlvX2RldiwgYm9vbCB0aW1lc3RhbXBpbmcpCitz
dGF0aWMgaW50IHN0bTMyX2FkY19jaGFuX2Z3X2luaXQoc3RydWN0IGlpb19kZXYgKmluZGlvX2Rl
diwgYm9vbCB0aW1lc3RhbXBpbmcpCiB7Ci0Jc3RydWN0IGRldmljZV9ub2RlICpub2RlID0gaW5k
aW9fZGV2LT5kZXYub2Zfbm9kZTsKIAlzdHJ1Y3Qgc3RtMzJfYWRjICphZGMgPSBpaW9fcHJpdihp
bmRpb19kZXYpOwogCWNvbnN0IHN0cnVjdCBzdG0zMl9hZGNfaW5mbyAqYWRjX2luZm8gPSBhZGMt
PmNmZy0+YWRjX2luZm87CiAJc3RydWN0IGlpb19jaGFuX3NwZWMgKmNoYW5uZWxzOwpAQCAtMjEw
Miw3ICsyMTE4LDcgQEAgc3RhdGljIGludCBzdG0zMl9hZGNfY2hhbl9vZl9pbml0KHN0cnVjdCBp
aW9fZGV2ICppbmRpb19kZXYsIGJvb2wgdGltZXN0YW1waW5nKQogCWZvciAoaSA9IDA7IGkgPCBT
VE0zMl9BRENfSU5UX0NIX05COyBpKyspCiAJCWFkYy0+aW50X2NoW2ldID0gU1RNMzJfQURDX0lO
VF9DSF9OT05FOwogCi0JbnVtX2NoYW5uZWxzID0gb2ZfZ2V0X2F2YWlsYWJsZV9jaGlsZF9jb3Vu
dChub2RlKTsKKwludW1fY2hhbm5lbHMgPSBkZXZpY2VfZ2V0X2NoaWxkX25vZGVfY291bnQoJmlu
ZGlvX2Rldi0+ZGV2KTsKIAkvKiBJZiBubyBjaGFubmVscyBoYXZlIGJlZW4gZm91bmQsIGZhbGxi
YWNrIHRvIGNoYW5uZWxzIGxlZ2FjeSBwcm9wZXJ0aWVzLiAqLwogCWlmICghbnVtX2NoYW5uZWxz
KSB7CiAJCWxlZ2FjeSA9IHRydWU7CkBAIC0yMTMzLDcgKzIxNDksOCBAQCBzdGF0aWMgaW50IHN0
bTMyX2FkY19jaGFuX29mX2luaXQoc3RydWN0IGlpb19kZXYgKmluZGlvX2RldiwgYm9vbCB0aW1l
c3RhbXBpbmcpCiAJCXJldHVybiAtRU5PTUVNOwogCiAJaWYgKGxlZ2FjeSkKLQkJcmV0ID0gc3Rt
MzJfYWRjX2xlZ2FjeV9jaGFuX2luaXQoaW5kaW9fZGV2LCBhZGMsIGNoYW5uZWxzKTsKKwkJcmV0
ID0gc3RtMzJfYWRjX2xlZ2FjeV9jaGFuX2luaXQoaW5kaW9fZGV2LCBhZGMsIGNoYW5uZWxzLAor
CQkJCQkJIG51bV9jaGFubmVscyk7CiAJZWxzZQogCQlyZXQgPSBzdG0zMl9hZGNfZ2VuZXJpY19j
aGFuX2luaXQoaW5kaW9fZGV2LCBhZGMsIGNoYW5uZWxzKTsKIAlpZiAocmV0IDwgMCkKQEAgLTIy
MTUsOSArMjIzMiw2IEBAIHN0YXRpYyBpbnQgc3RtMzJfYWRjX3Byb2JlKHN0cnVjdCBwbGF0Zm9y
bV9kZXZpY2UgKnBkZXYpCiAJYm9vbCB0aW1lc3RhbXBpbmcgPSBmYWxzZTsKIAlpbnQgcmV0Owog
Ci0JaWYgKCFwZGV2LT5kZXYub2Zfbm9kZSkKLQkJcmV0dXJuIC1FTk9ERVY7Ci0KIAlpbmRpb19k
ZXYgPSBkZXZtX2lpb19kZXZpY2VfYWxsb2MoJnBkZXYtPmRldiwgc2l6ZW9mKCphZGMpKTsKIAlp
ZiAoIWluZGlvX2RldikKIAkJcmV0dXJuIC1FTk9NRU07CkBAIC0yMjI2LDE3ICsyMjQwLDE2IEBA
IHN0YXRpYyBpbnQgc3RtMzJfYWRjX3Byb2JlKHN0cnVjdCBwbGF0Zm9ybV9kZXZpY2UgKnBkZXYp
CiAJYWRjLT5jb21tb24gPSBkZXZfZ2V0X2RydmRhdGEocGRldi0+ZGV2LnBhcmVudCk7CiAJc3Bp
bl9sb2NrX2luaXQoJmFkYy0+bG9jayk7CiAJaW5pdF9jb21wbGV0aW9uKCZhZGMtPmNvbXBsZXRp
b24pOwotCWFkYy0+Y2ZnID0gKGNvbnN0IHN0cnVjdCBzdG0zMl9hZGNfY2ZnICopCi0JCW9mX21h
dGNoX2RldmljZShkZXYtPmRyaXZlci0+b2ZfbWF0Y2hfdGFibGUsIGRldiktPmRhdGE7CisJYWRj
LT5jZmcgPSBkZXZpY2VfZ2V0X21hdGNoX2RhdGEoZGV2KTsKIAogCWluZGlvX2Rldi0+bmFtZSA9
IGRldl9uYW1lKCZwZGV2LT5kZXYpOwotCWluZGlvX2Rldi0+ZGV2Lm9mX25vZGUgPSBwZGV2LT5k
ZXYub2Zfbm9kZTsKKwlkZXZpY2Vfc2V0X25vZGUoJmluZGlvX2Rldi0+ZGV2LCBkZXZfZndub2Rl
KCZwZGV2LT5kZXYpKTsKIAlpbmRpb19kZXYtPmluZm8gPSAmc3RtMzJfYWRjX2lpb19pbmZvOwog
CWluZGlvX2Rldi0+bW9kZXMgPSBJTkRJT19ESVJFQ1RfTU9ERSB8IElORElPX0hBUkRXQVJFX1RS
SUdHRVJFRDsKIAogCXBsYXRmb3JtX3NldF9kcnZkYXRhKHBkZXYsIGluZGlvX2Rldik7CiAKLQly
ZXQgPSBvZl9wcm9wZXJ0eV9yZWFkX3UzMihwZGV2LT5kZXYub2Zfbm9kZSwgInJlZyIsICZhZGMt
Pm9mZnNldCk7CisJcmV0ID0gZGV2aWNlX3Byb3BlcnR5X3JlYWRfdTMyKGRldiwgInJlZyIsICZh
ZGMtPm9mZnNldCk7CiAJaWYgKHJldCAhPSAwKSB7CiAJCWRldl9lcnIoJnBkZXYtPmRldiwgIm1p
c3NpbmcgcmVnIHByb3BlcnR5XG4iKTsKIAkJcmV0dXJuIC1FSU5WQUw7CkBAIC0yMjY1LDcgKzIy
NzgsNyBAQCBzdGF0aWMgaW50IHN0bTMyX2FkY19wcm9iZShzdHJ1Y3QgcGxhdGZvcm1fZGV2aWNl
ICpwZGV2KQogCQl9CiAJfQogCi0JcmV0ID0gc3RtMzJfYWRjX29mX2dldF9yZXNvbHV0aW9uKGlu
ZGlvX2Rldik7CisJcmV0ID0gc3RtMzJfYWRjX2Z3X2dldF9yZXNvbHV0aW9uKGluZGlvX2Rldik7
CiAJaWYgKHJldCA8IDApCiAJCXJldHVybiByZXQ7CiAKQEAgLTIyODIsNyArMjI5NSw3IEBAIHN0
YXRpYyBpbnQgc3RtMzJfYWRjX3Byb2JlKHN0cnVjdCBwbGF0Zm9ybV9kZXZpY2UgKnBkZXYpCiAJ
CXRpbWVzdGFtcGluZyA9IHRydWU7CiAJfQogCi0JcmV0ID0gc3RtMzJfYWRjX2NoYW5fb2ZfaW5p
dChpbmRpb19kZXYsIHRpbWVzdGFtcGluZyk7CisJcmV0ID0gc3RtMzJfYWRjX2NoYW5fZndfaW5p
dChpbmRpb19kZXYsIHRpbWVzdGFtcGluZyk7CiAJaWYgKHJldCA8IDApCiAJCWdvdG8gZXJyX2Rt
YV9kaXNhYmxlOwogCi0tIAoyLjM3LjAKCl9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fCkxpbnV4LXN0bTMyIG1haWxpbmcgbGlzdApMaW51eC1zdG0zMkBzdC1t
ZC1tYWlsbWFuLnN0b3JtcmVwbHkuY29tCmh0dHBzOi8vc3QtbWQtbWFpbG1hbi5zdG9ybXJlcGx5
LmNvbS9tYWlsbWFuL2xpc3RpbmZvL2xpbnV4LXN0bTMyCg==
