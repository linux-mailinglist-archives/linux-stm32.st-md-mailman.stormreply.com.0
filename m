Return-Path: <linux-stm32-bounces@st-md-mailman.stormreply.com>
X-Original-To: lists+linux-stm32@lfdr.de
Delivered-To: lists+linux-stm32@lfdr.de
Received: from stm-ict-prod-mailman-01.stormreply.prv (st-md-mailman.stormreply.com [52.209.6.89])
	by mail.lfdr.de (Postfix) with ESMTPS id EBDEB902596
	for <lists+linux-stm32@lfdr.de>; Mon, 10 Jun 2024 17:27:53 +0200 (CEST)
Received: from ip-172-31-3-47.eu-west-1.compute.internal (localhost [127.0.0.1])
	by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTP id A0B7FC6C838;
	Mon, 10 Jun 2024 15:27:53 +0000 (UTC)
Received: from foss.arm.com (foss.arm.com [217.140.110.172])
 by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTP id 3BE2EC62EFE
 for <linux-stm32@st-md-mailman.stormreply.com>;
 Mon, 10 Jun 2024 15:27:46 +0000 (UTC)
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.121.207.14])
 by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id E136111FB;
 Mon, 10 Jun 2024 08:28:09 -0700 (PDT)
Received: from [10.57.42.97] (unknown [10.57.42.97])
 by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPSA id 8D0673F64C;
 Mon, 10 Jun 2024 08:27:40 -0700 (PDT)
Message-ID: <78a67d94-a649-4a4c-bb48-80b81d7eeb2a@arm.com>
Date: Mon, 10 Jun 2024 16:27:38 +0100
MIME-Version: 1.0
User-Agent: Mozilla Thunderbird
To: Suzuki K Poulose <suzuki.poulose@arm.com>, coresight@lists.linaro.org,
 gankulkarni@os.amperecomputing.com, mike.leach@linaro.org,
 leo.yan@linux.dev, anshuman.khandual@arm.com
References: <20240604143030.519906-1-james.clark@arm.com>
 <20240604143030.519906-15-james.clark@arm.com>
 <4165a188-8c78-4675-8557-844b5d270f3d@arm.com>
Content-Language: en-US
From: James Clark <james.clark@arm.com>
In-Reply-To: <4165a188-8c78-4675-8557-844b5d270f3d@arm.com>
Cc: Mark Rutland <mark.rutland@arm.com>, Ian Rogers <irogers@google.com>,
 Jiri Olsa <jolsa@kernel.org>, John Garry <john.g.garry@oracle.com>,
 Alexander Shishkin <alexander.shishkin@linux.intel.com>,
 linux-kernel@vger.kernel.org, Arnaldo Carvalho de Melo <acme@kernel.org>,
 Adrian Hunter <adrian.hunter@intel.com>, linux-perf-users@vger.kernel.org,
 Peter Zijlstra <peterz@infradead.org>, Ingo Molnar <mingo@redhat.com>,
 Maxime Coquelin <mcoquelin.stm32@gmail.com>,
 Namhyung Kim <namhyung@kernel.org>, Will Deacon <will@kernel.org>,
 linux-stm32@st-md-mailman.stormreply.com, linux-arm-kernel@lists.infradead.org
Subject: Re: [Linux-stm32] [PATCH v2 14/16] coresight: Remove pending trace
 ID release mechanism
X-BeenThere: linux-stm32@st-md-mailman.stormreply.com
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: <linux-stm32.st-md-mailman.stormreply.com>
List-Unsubscribe: <https://st-md-mailman.stormreply.com/mailman/options/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=unsubscribe>
List-Archive: <http://st-md-mailman.stormreply.com/pipermail/linux-stm32/>
List-Post: <mailto:linux-stm32@st-md-mailman.stormreply.com>
List-Help: <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=help>
List-Subscribe: <https://st-md-mailman.stormreply.com/mailman/listinfo/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: linux-stm32-bounces@st-md-mailman.stormreply.com
Sender: "Linux-stm32" <linux-stm32-bounces@st-md-mailman.stormreply.com>

CgpPbiAwNy8wNi8yMDI0IDE0OjQzLCBTdXp1a2kgSyBQb3Vsb3NlIHdyb3RlOgo+IE9uIDA0LzA2
LzIwMjQgMTU6MzAsIEphbWVzIENsYXJrIHdyb3RlOgo+PiBQZW5kaW5nIHRoZSByZWxlYXNlIG9m
IElEcyB3YXMgYSB3YXkgb2YgbWFuYWdpbmcgY29uY3VycmVudCBzeXNmcyBhbmQKPj4gUGVyZiBz
ZXNzaW9ucyBpbiBhIHNpbmdsZSBnbG9iYWwgSUQgbWFwLiBQZXJmIG1heSBoYXZlIGZpbmlzaGVk
IHdoaWxlCj4+IHN5c2ZzIGhhZG4ndCwgYW5kIFBlcmYgc2hvdWxkbid0IHJlbGVhc2UgdGhlIElE
cyBpbiB1c2UgYnkgc3lzZnMgYW5kCj4+IHZpY2UgdmVyc2EuCj4+Cj4+IE5vdyB0aGF0IFBlcmYg
dXNlcyBpdHMgb3duIGV4Y2x1c2l2ZSBJRCBtYXBzLCBwZW5kaW5nIHJlbGVhc2UgZG9lc24ndAo+
PiByZXN1bHQgaW4gYW55IGRpZmZlcmVudCBiZWhhdmlvciB0aGFuIGp1c3QgcmVsZWFzaW5nIGFs
bCBJRHMgd2hlbiB0aGUKPj4gbGFzdCBQZXJmIHNlc3Npb24gZmluaXNoZXMuIEFzIHBhcnQgb2Yg
dGhlIHBlci1zaW5rIHRyYWNlIElEIGNoYW5nZSwgd2UKPj4gd291bGQgaGF2ZSBzdGlsbCBoYWQg
dG8gbWFrZSB0aGUgcGVuZGluZyBtZWNoYW5pc20gd29yayBvbiBhIHBlci1zaW5rCj4+IGJhc2lz
LCBkdWUgdG8gdGhlIG92ZXJsYXBwaW5nIElEIGFsbG9jYXRpb25zLCBzbyBpbnN0ZWFkIG9mIG1h
a2luZyB0aGF0Cj4+IG1vcmUgY29tcGxpY2F0ZWQsIGp1c3QgcmVtb3ZlIGl0Lgo+IAo+IG1pbm9y
IG5pdDogR2l2ZW4gdGhhdCB3ZSBkcmFzdGljYWxseSBjaGFuZ2VkIHRoZSBtZWFpbmcgb2YgdGhl
Cj4gcGVyZl9zZXNzaW9uX3N0YXJ0L3N0b3AgY2FsbHMgdG8sIGdyYWIgYSByZWZjb3VudCBvbiBp
ZG1hcCwgZHJvcAo+IHJlZmNvdW50LCBzaG91bGQgd2UgcmVuYW1lIHRob3NlIGhlbHBlcnMgYXMg
c3VjaCA6Cj4gCj4gY29yZXNpZ2h0X3RyYWNlX2lkX21hcF9nZXQoKSAvIF9wdXQoKSA/Cj4gCj4g
CgpJIGRvbid0IG1pbmQga2VlcGluZyBpdCBhcyBjb3Jlc2lnaHRfdHJhY2VfaWRfcGVyZl9zdGFy
dCgpIGJlY2F1c2UgaXQncwpub3QgdXNlZCBpbiB0aGUgZ2xvYmFsIG1hcCBhbmQgSSBjYW4ndCBz
ZWUgaXQgYmVpbmcgdXNlZCBmb3Igc3lzZnMgaW4KdGhlIGZ1dHVyZSBlaXRoZXIuIEl0J3Mgc29t
ZXRoaW5nIHF1aXRlIHNwZWNpZmljIHRvIFBlcmYgc28gaXQncyBtb3JlCnNlbGYgZG9jdW1lbnRp
bmcgdGhpcyB3YXkuCgo+Pgo+PiBTaWduZWQtb2ZmLWJ5OiBKYW1lcyBDbGFyayA8amFtZXMuY2xh
cmtAYXJtLmNvbT4KPj4gLS0tCj4+IMKgIC4uLi9od3RyYWNpbmcvY29yZXNpZ2h0L2NvcmVzaWdo
dC1ldG0tcGVyZi5jwqAgfCAxMSArKy0tCj4+IMKgIC4uLi9od3RyYWNpbmcvY29yZXNpZ2h0L2Nv
cmVzaWdodC10cmFjZS1pZC5jwqAgfCA2MiArKysrKy0tLS0tLS0tLS0tLS0tCj4+IMKgIC4uLi9o
d3RyYWNpbmcvY29yZXNpZ2h0L2NvcmVzaWdodC10cmFjZS1pZC5owqAgfCAzMSArKysrKy0tLS0t
Cj4+IMKgIGluY2x1ZGUvbGludXgvY29yZXNpZ2h0LmjCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDC
oMKgwqDCoMKgwqDCoMKgIHzCoCA2ICstCj4+IMKgIDQgZmlsZXMgY2hhbmdlZCwgMzQgaW5zZXJ0
aW9ucygrKSwgNzYgZGVsZXRpb25zKC0pCj4+Cj4+IGRpZmYgLS1naXQgYS9kcml2ZXJzL2h3dHJh
Y2luZy9jb3Jlc2lnaHQvY29yZXNpZ2h0LWV0bS1wZXJmLmMKPj4gYi9kcml2ZXJzL2h3dHJhY2lu
Zy9jb3Jlc2lnaHQvY29yZXNpZ2h0LWV0bS1wZXJmLmMKPj4gaW5kZXggN2ZiNTVkYWZiNjM5Li4x
N2NhZmExYTdmMTggMTAwNjQ0Cj4+IC0tLSBhL2RyaXZlcnMvaHd0cmFjaW5nL2NvcmVzaWdodC9j
b3Jlc2lnaHQtZXRtLXBlcmYuYwo+PiArKysgYi9kcml2ZXJzL2h3dHJhY2luZy9jb3Jlc2lnaHQv
Y29yZXNpZ2h0LWV0bS1wZXJmLmMKPj4gQEAgLTIzMiwxNSArMjMyLDE0IEBAIHN0YXRpYyB2b2lk
IGZyZWVfZXZlbnRfZGF0YShzdHJ1Y3Qgd29ya19zdHJ1Y3QKPj4gKndvcmspCj4+IMKgwqDCoMKg
wqDCoMKgwqDCoCBpZiAoIShJU19FUlJfT1JfTlVMTCgqcHBhdGgpKSkgewo+PiDCoMKgwqDCoMKg
wqDCoMKgwqDCoMKgwqDCoCBzdHJ1Y3QgY29yZXNpZ2h0X2RldmljZSAqc2luayA9IGNvcmVzaWdo
dF9nZXRfc2luaygqcHBhdGgpOwo+PiDCoCAtwqDCoMKgwqDCoMKgwqDCoMKgwqDCoCBjb3Jlc2ln
aHRfdHJhY2VfaWRfcHV0X2NwdV9pZF9tYXAoY3B1LAo+PiAmc2luay0+cGVyZl9zaW5rX2lkX21h
cCk7Cj4+ICvCoMKgwqDCoMKgwqDCoMKgwqDCoMKgIC8qIG1hcmsgcGVyZiBldmVudCBhcyBkb25l
IGZvciB0cmFjZSBpZCBhbGxvY2F0b3IgKi8KPj4gK8KgwqDCoMKgwqDCoMKgwqDCoMKgwqAgY29y
ZXNpZ2h0X3RyYWNlX2lkX3BlcmZfc3RvcCgmc2luay0+cGVyZl9zaW5rX2lkX21hcCk7Cj4+ICsK
Pj4gwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqAgY29yZXNpZ2h0X3JlbGVhc2VfcGF0aCgqcHBh
dGgpOwo+PiDCoMKgwqDCoMKgwqDCoMKgwqAgfQo+PiDCoMKgwqDCoMKgwqDCoMKgwqAgKnBwYXRo
ID0gTlVMTDsKPj4gwqDCoMKgwqDCoCB9Cj4+IMKgIC3CoMKgwqAgLyogbWFyayBwZXJmIGV2ZW50
IGFzIGRvbmUgZm9yIHRyYWNlIGlkIGFsbG9jYXRvciAqLwo+PiAtwqDCoMKgIGNvcmVzaWdodF90
cmFjZV9pZF9wZXJmX3N0b3AoKTsKPj4gLQo+PiDCoMKgwqDCoMKgIGZyZWVfcGVyY3B1KGV2ZW50
X2RhdGEtPnBhdGgpOwo+PiDCoMKgwqDCoMKgIGtmcmVlKGV2ZW50X2RhdGEpOwo+PiDCoCB9Cj4+
IEBAIC0zMjgsOSArMzI3LDYgQEAgc3RhdGljIHZvaWQgKmV0bV9zZXR1cF9hdXgoc3RydWN0IHBl
cmZfZXZlbnQKPj4gKmV2ZW50LCB2b2lkICoqcGFnZXMsCj4+IMKgwqDCoMKgwqDCoMKgwqDCoCBz
aW5rID0gdXNlcl9zaW5rID0gY29yZXNpZ2h0X2dldF9zaW5rX2J5X2lkKGlkKTsKPj4gwqDCoMKg
wqDCoCB9Cj4+IMKgIC3CoMKgwqAgLyogdGVsbCB0aGUgdHJhY2UgSUQgYWxsb2NhdG9yIHRoYXQg
YSBwZXJmIGV2ZW50IGlzIHN0YXJ0aW5nIHVwICovCj4+IC3CoMKgwqAgY29yZXNpZ2h0X3RyYWNl
X2lkX3BlcmZfc3RhcnQoKTsKPj4gLQo+PiDCoMKgwqDCoMKgIC8qIGNoZWNrIGlmIHVzZXIgd2Fu
dHMgYSBjb3Jlc2lnaHQgY29uZmlndXJhdGlvbiBzZWxlY3RlZCAqLwo+PiDCoMKgwqDCoMKgIGNm
Z19oYXNoID0gKHUzMikoKGV2ZW50LT5hdHRyLmNvbmZpZzIgJiBHRU5NQVNLX1VMTCg2MywgMzIp
KSA+Pgo+PiAzMik7Cj4+IMKgwqDCoMKgwqAgaWYgKGNmZ19oYXNoKSB7Cj4+IEBAIC00MDQsNiAr
NDAwLDcgQEAgc3RhdGljIHZvaWQgKmV0bV9zZXR1cF9hdXgoc3RydWN0IHBlcmZfZXZlbnQKPj4g
KmV2ZW50LCB2b2lkICoqcGFnZXMsCj4+IMKgwqDCoMKgwqDCoMKgwqDCoCB9Cj4+IMKgIMKgwqDC
oMKgwqDCoMKgwqDCoCAvKiBlbnN1cmUgd2UgY2FuIGFsbG9jYXRlIGEgdHJhY2UgSUQgZm9yIHRo
aXMgQ1BVICovCj4+ICvCoMKgwqDCoMKgwqDCoCBjb3Jlc2lnaHRfdHJhY2VfaWRfcGVyZl9zdGFy
dCgmc2luay0+cGVyZl9zaW5rX2lkX21hcCk7Cj4+IMKgwqDCoMKgwqDCoMKgwqDCoCB0cmFjZV9p
ZCA9IGNvcmVzaWdodF90cmFjZV9pZF9nZXRfY3B1X2lkX21hcChjcHUsCj4+ICZzaW5rLT5wZXJm
X3NpbmtfaWRfbWFwKTsKPj4gwqDCoMKgwqDCoMKgwqDCoMKgIGlmICghSVNfVkFMSURfQ1NfVFJB
Q0VfSUQodHJhY2VfaWQpKSB7Cj4+IMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgIGNwdW1hc2tf
Y2xlYXJfY3B1KGNwdSwgbWFzayk7Cj4gCj4gSSB0aGluayB3ZSBhcmUgbGVha2luZyBhIHJlZmVy
ZW5jZSBhYm92ZSwgaWYgdGhlIGFsbG9jYXRpb24gb2YgdHJhY2UgaWQKPiBmYWlscy4gaS5lLiwg
d2UgZG9uJ3QgZHJvcCB0aGUgcmVmY291bnQgaGVyZSwgbm9yIHdlIGRvIHRoYXQgaW4KPiBmcmVl
X2V2ZW50X2RhdCgpIHNpbmNlIHRoZSBwcGF0aCBpcyBzZXQgdG8gTlVMTCBpbiBjYXNlIG9mIGZh
aWx1cmUgPwo+IAo+IAoKTmljZSBjYXRjaC4gSSdsbCBtb3ZlIHRoZSBwZXJmX3N0YXJ0KCkgY2Fs
bCB0byB3aGVyZSBwYXRoIGlzIGFzc2lnbmVkCmJlY2F1c2UgdGhhdCdzIHdoYXQgZ3VhcmRzIHRo
ZSBwZXJmX3N0b3AoKSBjYWxsIGluIGZyZWVfZXZlbnRfZGF0YSgpLgpSYXRoZXIgdGhhbiBhZGQg
YW4gZXh0cmEgcGVyZl9zdG9wKCkgY2FsbC4KCj4gCj4+IGRpZmYgLS1naXQgYS9kcml2ZXJzL2h3
dHJhY2luZy9jb3Jlc2lnaHQvY29yZXNpZ2h0LXRyYWNlLWlkLmMKPj4gYi9kcml2ZXJzL2h3dHJh
Y2luZy9jb3Jlc2lnaHQvY29yZXNpZ2h0LXRyYWNlLWlkLmMKPj4gaW5kZXggOGE3NzdjMGFmNmVh
Li5hY2I5OWNjZjk2YjUgMTAwNjQ0Cj4+IC0tLSBhL2RyaXZlcnMvaHd0cmFjaW5nL2NvcmVzaWdo
dC9jb3Jlc2lnaHQtdHJhY2UtaWQuYwo+PiArKysgYi9kcml2ZXJzL2h3dHJhY2luZy9jb3Jlc2ln
aHQvY29yZXNpZ2h0LXRyYWNlLWlkLmMKPj4gQEAgLTE4LDEyICsxOCw2IEBAIHN0YXRpYyBzdHJ1
Y3QgY29yZXNpZ2h0X3RyYWNlX2lkX21hcCBpZF9tYXBfZGVmYXVsdAo+PiA9IHsKPj4gwqDCoMKg
wqDCoCAuY3B1X21hcCA9ICZpZF9tYXBfZGVmYXVsdF9jcHVfaWRzCj4+IMKgIH07Cj4+IMKgIC0v
KiBtYWludGFpbiBhIHJlY29yZCBvZiB0aGUgcGVuZGluZyByZWxlYXNlcyBwZXIgY3B1ICovCj4+
IC1zdGF0aWMgY3B1bWFza190IGNwdV9pZF9yZWxlYXNlX3BlbmRpbmc7Cj4+IC0KPj4gLS8qIHBl
cmYgc2Vzc2lvbiBhY3RpdmUgY291bnRlciAqLwo+PiAtc3RhdGljIGF0b21pY190IHBlcmZfY3Nf
ZXRtX3Nlc3Npb25fYWN0aXZlID0gQVRPTUlDX0lOSVQoMCk7Cj4+IC0KPj4gwqAgLyogbG9jayB0
byBwcm90ZWN0IGlkX21hcCBhbmQgY3B1IGRhdGHCoCAqLwo+PiDCoCBzdGF0aWMgREVGSU5FX1NQ
SU5MT0NLKGlkX21hcF9sb2NrKTsKPj4gwqAgQEAgLTEyMiwzNCArMTE2LDE4IEBAIHN0YXRpYyB2
b2lkIGNvcmVzaWdodF90cmFjZV9pZF9mcmVlKGludCBpZCwKPj4gc3RydWN0IGNvcmVzaWdodF90
cmFjZV9pZF9tYXAgKmlkX21hCj4+IMKgwqDCoMKgwqAgY2xlYXJfYml0KGlkLCBpZF9tYXAtPnVz
ZWRfaWRzKTsKPj4gwqAgfQo+PiDCoCAtc3RhdGljIHZvaWQgY29yZXNpZ2h0X3RyYWNlX2lkX3Nl
dF9wZW5kX3JlbChpbnQgaWQsIHN0cnVjdAo+PiBjb3Jlc2lnaHRfdHJhY2VfaWRfbWFwICppZF9t
YXApCj4+IC17Cj4+IC3CoMKgwqAgaWYgKFdBUk4oIUlTX1ZBTElEX0NTX1RSQUNFX0lEKGlkKSwg
IkludmFsaWQgVHJhY2UgSUQgJWRcbiIsIGlkKSkKPj4gLcKgwqDCoMKgwqDCoMKgIHJldHVybjsK
Pj4gLcKgwqDCoCBzZXRfYml0KGlkLCBpZF9tYXAtPnBlbmRfcmVsX2lkcyk7Cj4+IC19Cj4+IC0K
Pj4gwqAgLyoKPj4gLSAqIHJlbGVhc2UgYWxsIHBlbmRpbmcgSURzIGZvciBhbGwgY3VycmVudCBt
YXBzICYgY2xlYXIgQ1BVIGFzc29jaWF0aW9ucwo+PiAtICoKPj4gLSAqIFRoaXMgY3VycmVudGx5
IG9wZXJhdGVzIG9uIHRoZSBkZWZhdWx0IGlkIG1hcCwgYnV0IG1heSBiZSBleHRlbmRlZCB0bwo+
PiAtICogb3BlcmF0ZSBvbiBhbGwgcmVnaXN0ZXJlZCBpZCBtYXBzIGlmIHBlciBzaW5rIGlkIG1h
cHMgYXJlIHVzZWQuCj4+ICsgKiByZWxlYXNlIGFsbCBJRHMgYW5kIGNsZWFyIENQVSBhc3NvY2lh
dGlvbnMKPiAKPiBtaW5vciBuaXQ6Cj4gCj4gwqDCoMKgICogUmVsZWFzZSBhbGwgSURzIGFuZCBj
bGVhciBDUFUgYXNzb2NpYXRpb25zLgo+IAoKRG9uZQoKPj4gwqDCoCAqLwo+PiAtc3RhdGljIHZv
aWQgY29yZXNpZ2h0X3RyYWNlX2lkX3JlbGVhc2VfYWxsX3BlbmRpbmcodm9pZCkKPj4gK3N0YXRp
YyB2b2lkIGNvcmVzaWdodF90cmFjZV9pZF9yZWxlYXNlX2FsbChzdHJ1Y3QKPj4gY29yZXNpZ2h0
X3RyYWNlX2lkX21hcCAqaWRfbWFwKQo+PiDCoCB7Cj4+IC3CoMKgwqAgc3RydWN0IGNvcmVzaWdo
dF90cmFjZV9pZF9tYXAgKmlkX21hcCA9ICZpZF9tYXBfZGVmYXVsdDsKPj4gwqDCoMKgwqDCoCB1
bnNpZ25lZCBsb25nIGZsYWdzOwo+PiAtwqDCoMKgIGludCBjcHUsIGJpdDsKPj4gK8KgwqDCoCBp
bnQgY3B1Owo+PiDCoCDCoMKgwqDCoMKgIHNwaW5fbG9ja19pcnFzYXZlKCZpZF9tYXBfbG9jaywg
ZmxhZ3MpOwo+PiAtwqDCoMKgIGZvcl9lYWNoX3NldF9iaXQoYml0LCBpZF9tYXAtPnBlbmRfcmVs
X2lkcywKPj4gQ09SRVNJR0hUX1RSQUNFX0lEX1JFU19UT1ApIHsKPj4gLcKgwqDCoMKgwqDCoMKg
IGNsZWFyX2JpdChiaXQsIGlkX21hcC0+dXNlZF9pZHMpOwo+PiAtwqDCoMKgwqDCoMKgwqAgY2xl
YXJfYml0KGJpdCwgaWRfbWFwLT5wZW5kX3JlbF9pZHMpOwo+PiAtwqDCoMKgIH0KPj4gLcKgwqDC
oCBmb3JfZWFjaF9jcHUoY3B1LCAmY3B1X2lkX3JlbGVhc2VfcGVuZGluZykgewo+PiAtwqDCoMKg
wqDCoMKgwqAgYXRvbWljX3NldChwZXJfY3B1X3B0cihpZF9tYXBfZGVmYXVsdC5jcHVfbWFwLCBj
cHUpLCAwKTsKPj4gLcKgwqDCoMKgwqDCoMKgIGNwdW1hc2tfY2xlYXJfY3B1KGNwdSwgJmNwdV9p
ZF9yZWxlYXNlX3BlbmRpbmcpOwo+PiAtwqDCoMKgIH0KPj4gK8KgwqDCoCBiaXRtYXBfemVybyhp
ZF9tYXAtPnVzZWRfaWRzLCBDT1JFU0lHSFRfVFJBQ0VfSURTX01BWCk7Cj4+ICvCoMKgwqAgZm9y
X2VhY2hfcG9zc2libGVfY3B1KGNwdSkKPj4gK8KgwqDCoMKgwqDCoMKgIGF0b21pY19zZXQocGVy
X2NwdV9wdHIoaWRfbWFwLT5jcHVfbWFwLCBjcHUpLCAwKTsKPiAKPiBEbyB3ZSBldmVyIHJlYWQg
dGhlc2UgdmFsdWVzIHdpdGhvdXQgc3BpbmxvY2sgPyBEbyB0aGV5IG5lZWQgdG8gYmUgYXRvbWlj
ID8KPiAKClllYWggdGhleSdyZSBzdGlsbCByZWFkIGluIGEgZmV3IHBsYWNlcyB3aXRob3V0IHRh
a2luZyB0aGUgbG9jay4KU3BlY2lmaWNhbGx5IGJlY2F1c2UgcmVhZGluZyBhbmQgY2hlY2tpbmcg
aWYgaXQncyB2YWxpZCBpcyBzbyBlYXN5IHRvIGRvCndpdGhvdXQgbG9ja2luZy4KCj4+IMKgwqDC
oMKgwqAgc3Bpbl91bmxvY2tfaXJxcmVzdG9yZSgmaWRfbWFwX2xvY2ssIGZsYWdzKTsKPj4gwqDC
oMKgwqDCoCBEVU1QX0lEX01BUChpZF9tYXApOwo+PiDCoCB9Cj4+IEBAIC0xNjQsNyArMTQyLDcg
QEAgc3RhdGljIGludCBfY29yZXNpZ2h0X3RyYWNlX2lkX2dldF9jcHVfaWQoaW50IGNwdSwKPj4g
c3RydWN0IGNvcmVzaWdodF90cmFjZV9pZF9tYXAKPj4gwqDCoMKgwqDCoCAvKiBjaGVjayBmb3Ig
ZXhpc3RpbmcgYWxsb2NhdGlvbiBmb3IgdGhpcyBDUFUgKi8KPj4gwqDCoMKgwqDCoCBpZCA9IF9j
b3Jlc2lnaHRfdHJhY2VfaWRfcmVhZF9jcHVfaWQoY3B1LCBpZF9tYXApOwo+PiDCoMKgwqDCoMKg
IGlmIChpZCkKPj4gLcKgwqDCoMKgwqDCoMKgIGdvdG8gZ2V0X2NwdV9pZF9jbHJfcGVuZDsKPj4g
K8KgwqDCoMKgwqDCoMKgIGdvdG8gZ2V0X2NwdV9pZF9vdXRfdW5sb2NrOwo+PiDCoCDCoMKgwqDC
oMKgIC8qCj4+IMKgwqDCoMKgwqDCoCAqIEZpbmQgYSBuZXcgSUQuCj4+IEBAIC0xODUsMTEgKzE2
Myw2IEBAIHN0YXRpYyBpbnQgX2NvcmVzaWdodF90cmFjZV9pZF9nZXRfY3B1X2lkKGludAo+PiBj
cHUsIHN0cnVjdCBjb3Jlc2lnaHRfdHJhY2VfaWRfbWFwCj4+IMKgwqDCoMKgwqAgLyogYWxsb2Nh
dGUgdGhlIG5ldyBpZCB0byB0aGUgY3B1ICovCj4+IMKgwqDCoMKgwqAgYXRvbWljX3NldChwZXJf
Y3B1X3B0cihpZF9tYXAtPmNwdV9tYXAsIGNwdSksIGlkKTsKPj4gwqAgLWdldF9jcHVfaWRfY2xy
X3BlbmQ6Cj4+IC3CoMKgwqAgLyogd2UgYXJlIChyZSl1c2luZyB0aGlzIElEIC0gc28gZW5zdXJl
IGl0IGlzIG5vdCBtYXJrZWQgZm9yCj4+IHJlbGVhc2UgKi8KPj4gLcKgwqDCoCBjcHVtYXNrX2Ns
ZWFyX2NwdShjcHUsICZjcHVfaWRfcmVsZWFzZV9wZW5kaW5nKTsKPj4gLcKgwqDCoCBjbGVhcl9i
aXQoaWQsIGlkX21hcC0+cGVuZF9yZWxfaWRzKTsKPj4gLQo+PiDCoCBnZXRfY3B1X2lkX291dF91
bmxvY2s6Cj4+IMKgwqDCoMKgwqAgc3Bpbl91bmxvY2tfaXJxcmVzdG9yZSgmaWRfbWFwX2xvY2ss
IGZsYWdzKTsKPj4gwqAgQEAgLTIxMCwxNSArMTgzLDggQEAgc3RhdGljIHZvaWQgX2NvcmVzaWdo
dF90cmFjZV9pZF9wdXRfY3B1X2lkKGludAo+PiBjcHUsIHN0cnVjdCBjb3Jlc2lnaHRfdHJhY2Vf
aWRfbWEKPj4gwqAgwqDCoMKgwqDCoCBzcGluX2xvY2tfaXJxc2F2ZSgmaWRfbWFwX2xvY2ssIGZs
YWdzKTsKPj4gwqAgLcKgwqDCoCBpZiAoYXRvbWljX3JlYWQoJnBlcmZfY3NfZXRtX3Nlc3Npb25f
YWN0aXZlKSkgewo+PiAtwqDCoMKgwqDCoMKgwqAgLyogc2V0IHJlbGVhc2UgYXQgcGVuZGluZyBp
ZiBwZXJmIHN0aWxsIGFjdGl2ZSAqLwo+PiAtwqDCoMKgwqDCoMKgwqAgY29yZXNpZ2h0X3RyYWNl
X2lkX3NldF9wZW5kX3JlbChpZCwgaWRfbWFwKTsKPj4gLcKgwqDCoMKgwqDCoMKgIGNwdW1hc2tf
c2V0X2NwdShjcHUsICZjcHVfaWRfcmVsZWFzZV9wZW5kaW5nKTsKPj4gLcKgwqDCoCB9IGVsc2Ug
ewo+PiAtwqDCoMKgwqDCoMKgwqAgLyogb3RoZXJ3aXNlIGNsZWFyIGlkICovCj4+IC3CoMKgwqDC
oMKgwqDCoCBjb3Jlc2lnaHRfdHJhY2VfaWRfZnJlZShpZCwgaWRfbWFwKTsKPj4gLcKgwqDCoMKg
wqDCoMKgIGF0b21pY19zZXQocGVyX2NwdV9wdHIoaWRfbWFwLT5jcHVfbWFwLCBjcHUpLCAwKTsK
Pj4gLcKgwqDCoCB9Cj4+ICvCoMKgwqAgY29yZXNpZ2h0X3RyYWNlX2lkX2ZyZWUoaWQsIGlkX21h
cCk7Cj4+ICvCoMKgwqAgYXRvbWljX3NldChwZXJfY3B1X3B0cihpZF9tYXAtPmNwdV9tYXAsIGNw
dSksIDApOwo+IAo+IENhbiB3ZSBkbyB0aGlzIHVuY29uZGl0aW9uYWxseSBub3cgPyBXaGF0IGlz
IGFub3RoZXIgc2Vzc2lvbiBoYXMKPiByZXNlcnZlZCB0aGlzIGlkIGZvciB0aGUgc2FtZSBDUFUg
YW5kIHRoYXQgZ2V0cyBzY2hlZHVsZWQgbGF0ZXIgPwo+IFdlIHNob3VsZCBzaW1wbHkgc3RvcCBk
b2luZyB0aGUgInB1dF9jcHVfaWQoKSIgYW5kIGluc3RlYWQgcmVseQo+IG9uIHRoZSBwZXJmX3Nl
c3Npb25fc3RvcCgpLyhvciB0aGUgc3VnZ2VzdGVkIHRyYWNlX2lkX21hcF9wdXQoKSkKPiB0byBm
cmVlIHRoZSBpZHMgYW5kIGNsZWFyIGV2ZXJ5dGhpbmcuCj4gCgpXZSBkbyBkbyBpdCB1bmNvbmRp
dGlvbmFsbHksIHRoZSBQZXJmIGNvZGUgZG9lc24ndCBjYWxsIHB1dCgpIGFueW1vcmUuCk9ubHkg
c3lzZnMgZG9lcyBidXQgaXQgc3RpbGwgbmVlZHMgdG8gYmVjYXVzZSBpdCB1c2VzIHRoZSBnbG9i
YWwgbWFwIHNvCnRoaXMgZnVuY3Rpb24gY2FuJ3QgYmUgZHJvcHBlZCBjb21wbGV0ZWx5LgoKPj4g
wqAgwqDCoMKgwqDCoCBzcGluX3VubG9ja19pcnFyZXN0b3JlKCZpZF9tYXBfbG9jaywgZmxhZ3Mp
Owo+PiDCoMKgwqDCoMKgIERVTVBfSURfQ1BVKGNwdSwgaWQpOwo+PiBAQCAtMzAyLDE3ICsyNjgs
MTcgQEAgdm9pZCBjb3Jlc2lnaHRfdHJhY2VfaWRfcHV0X3N5c3RlbV9pZChpbnQgaWQpCj4+IMKg
IH0KPj4gwqAgRVhQT1JUX1NZTUJPTF9HUEwoY29yZXNpZ2h0X3RyYWNlX2lkX3B1dF9zeXN0ZW1f
aWQpOwo+PiDCoCAtdm9pZCBjb3Jlc2lnaHRfdHJhY2VfaWRfcGVyZl9zdGFydCh2b2lkKQo+PiAr
dm9pZCBjb3Jlc2lnaHRfdHJhY2VfaWRfcGVyZl9zdGFydChzdHJ1Y3QgY29yZXNpZ2h0X3RyYWNl
X2lkX21hcAo+PiAqaWRfbWFwKQo+PiDCoCB7Cj4+IC3CoMKgwqAgYXRvbWljX2luYygmcGVyZl9j
c19ldG1fc2Vzc2lvbl9hY3RpdmUpOwo+PiArwqDCoMKgIGF0b21pY19pbmMoJmlkX21hcC0+cGVy
Zl9jc19ldG1fc2Vzc2lvbl9hY3RpdmUpOwo+PiDCoMKgwqDCoMKgIFBFUkZfU0VTU0lPTihhdG9t
aWNfcmVhZCgmcGVyZl9jc19ldG1fc2Vzc2lvbl9hY3RpdmUpKTsKPj4gwqAgfQo+PiDCoCBFWFBP
UlRfU1lNQk9MX0dQTChjb3Jlc2lnaHRfdHJhY2VfaWRfcGVyZl9zdGFydCk7Cj4+IMKgIC12b2lk
IGNvcmVzaWdodF90cmFjZV9pZF9wZXJmX3N0b3Aodm9pZCkKPj4gK3ZvaWQgY29yZXNpZ2h0X3Ry
YWNlX2lkX3BlcmZfc3RvcChzdHJ1Y3QgY29yZXNpZ2h0X3RyYWNlX2lkX21hcCAqaWRfbWFwKQo+
PiDCoCB7Cj4+IC3CoMKgwqAgaWYgKCFhdG9taWNfZGVjX3JldHVybigmcGVyZl9jc19ldG1fc2Vz
c2lvbl9hY3RpdmUpKQo+PiAtwqDCoMKgwqDCoMKgwqAgY29yZXNpZ2h0X3RyYWNlX2lkX3JlbGVh
c2VfYWxsX3BlbmRpbmcoKTsKPj4gK8KgwqDCoCBpZiAoIWF0b21pY19kZWNfcmV0dXJuKCZpZF9t
YXAtPnBlcmZfY3NfZXRtX3Nlc3Npb25fYWN0aXZlKSkKPj4gK8KgwqDCoMKgwqDCoMKgIGNvcmVz
aWdodF90cmFjZV9pZF9yZWxlYXNlX2FsbChpZF9tYXApOwo+PiDCoMKgwqDCoMKgIFBFUkZfU0VT
U0lPTihhdG9taWNfcmVhZCgmcGVyZl9jc19ldG1fc2Vzc2lvbl9hY3RpdmUpKTsKPj4gwqAgfQo+
PiDCoCBFWFBPUlRfU1lNQk9MX0dQTChjb3Jlc2lnaHRfdHJhY2VfaWRfcGVyZl9zdG9wKTsKPj4g
ZGlmZiAtLWdpdCBhL2RyaXZlcnMvaHd0cmFjaW5nL2NvcmVzaWdodC9jb3Jlc2lnaHQtdHJhY2Ut
aWQuaAo+PiBiL2RyaXZlcnMvaHd0cmFjaW5nL2NvcmVzaWdodC9jb3Jlc2lnaHQtdHJhY2UtaWQu
aAo+PiBpbmRleCA4NDBiYWJkZDA3OTQuLjlhYWU1MGE1NTNjYSAxMDA2NDQKPj4gLS0tIGEvZHJp
dmVycy9od3RyYWNpbmcvY29yZXNpZ2h0L2NvcmVzaWdodC10cmFjZS1pZC5oCj4+ICsrKyBiL2Ry
aXZlcnMvaHd0cmFjaW5nL2NvcmVzaWdodC9jb3Jlc2lnaHQtdHJhY2UtaWQuaAo+PiBAQCAtMTcs
OSArMTcsMTAgQEAKPj4gwqDCoCAqIHJlbGVhc2VkIHdoZW4gZG9uZS4KPj4gwqDCoCAqCj4+IMKg
wqAgKiBJbiBvcmRlciB0byBlbnN1cmUgdGhhdCBhIGNvbnNpc3RlbnQgY3B1IC8gSUQgbWF0Y2hp
bmcgaXMgbWFpbnRhaW5lZAo+PiAtICogdGhyb3VnaG91dCBhIHBlcmYgY3NfZXRtIGV2ZW50IHNl
c3Npb24gLSBhIHNlc3Npb24gaW4gcHJvZ3Jlc3MKPj4gZmxhZyB3aWxsCj4+IC0gKiBiZSBtYWlu
dGFpbmVkLCBhbmQgcmVsZWFzZWQgSURzIG5vdCBjbGVhcmVkIHVudGlsIHRoZSBwZXJmIHNlc3Np
b24gaXMKPj4gLSAqIGNvbXBsZXRlLiBUaGlzIGFsbG93cyB0aGUgc2FtZSBDUFUgdG8gYmUgcmUt
YWxsb2NhdGVkIGl0cyBwcmlvciBJRC4KPj4gKyAqIHRocm91Z2hvdXQgYSBwZXJmIGNzX2V0bSBl
dmVudCBzZXNzaW9uIC0gYSBzZXNzaW9uIGluIHByb2dyZXNzCj4+IGZsYWcgd2lsbCBiZQo+PiAr
ICogbWFpbnRhaW5lZCBmb3IgZWFjaCBzaW5rLCBhbmQgSURzIGFyZSBjbGVhcmVkIHdoZW4gYWxs
IHRoZSBwZXJmCj4+IHNlc3Npb25zCj4+ICsgKiBjb21wbGV0ZS4gVGhpcyBhbGxvd3MgdGhlIHNh
bWUgQ1BVIHRvIGJlIHJlLWFsbG9jYXRlZCBpdHMgcHJpb3IgSUQKPj4gd2hlbgo+PiArICogZXZl
bnRzIGFyZSBzY2hlZHVsZWQgaW4gYW5kIG91dC4KPj4gwqDCoCAqCj4+IMKgwqAgKgo+PiDCoMKg
ICogVHJhY2UgSUQgbWFwcyB3aWxsIGJlIGNyZWF0ZWQgYW5kIGluaXRpYWxpc2VkIHRvIHByZXZl
bnQKPj4gYXJjaGl0ZWN0dXJhbGx5Cj4+IEBAIC02NiwxMSArNjcsNyBAQCBpbnQgY29yZXNpZ2h0
X3RyYWNlX2lkX2dldF9jcHVfaWRfbWFwKGludCBjcHUsCj4+IHN0cnVjdCBjb3Jlc2lnaHRfdHJh
Y2VfaWRfbWFwICppZAo+PiDCoCAvKioKPj4gwqDCoCAqIFJlbGVhc2UgYW4gYWxsb2NhdGVkIHRy
YWNlIElEIGFzc29jaWF0ZWQgd2l0aCB0aGUgQ1BVLgo+PiDCoMKgICoKPj4gLSAqIFRoaXMgd2ls
bCByZWxlYXNlIHRoZSBDb3JlU2lnaHQgdHJhY2UgSUQgYXNzb2NpYXRlZCB3aXRoIHRoZSBDUFUs
Cj4+IC0gKiB1bmxlc3MgYSBwZXJmIHNlc3Npb24gaXMgaW4gb3BlcmF0aW9uLgo+PiAtICoKPj4g
LSAqIElmIGEgcGVyZiBzZXNzaW9uIGlzIGluIG9wZXJhdGlvbiB0aGVuIHRoZSBJRCB3aWxsIGJl
IG1hcmtlZCBhcwo+PiBwZW5kaW5nCj4+IC0gKiByZWxlYXNlLgo+PiArICogVGhpcyB3aWxsIHJl
bGVhc2UgdGhlIENvcmVTaWdodCB0cmFjZSBJRCBhc3NvY2lhdGVkIHdpdGggdGhlIENQVS4KPj4g
wqDCoCAqCj4+IMKgwqAgKiBAY3B1OiBUaGUgQ1BVIGluZGV4IHRvIHJlbGVhc2UgdGhlIGFzc29j
aWF0ZWQgdHJhY2UgSUQuCj4+IMKgwqAgKi8KPj4gQEAgLTEzMywyMSArMTMwLDIxIEBAIHZvaWQg
Y29yZXNpZ2h0X3RyYWNlX2lkX3B1dF9zeXN0ZW1faWQoaW50IGlkKTsKPj4gwqAgLyoqCj4+IMKg
wqAgKiBOb3RpZnkgdGhlIFRyYWNlIElEIGFsbG9jYXRvciB0aGF0IGEgcGVyZiBzZXNzaW9uIGlz
IHN0YXJ0aW5nLgo+PiDCoMKgICoKPj4gLSAqIEluY3JlYXNlIHRoZSBwZXJmIHNlc3Npb24gcmVm
ZXJlbmNlIGNvdW50IC0gY2FsbGVkIGJ5IHBlcmYgd2hlbgo+PiBzZXR0aW5nIHVwCj4+IC0gKiBh
IHRyYWNlIGV2ZW50Lgo+PiArICogSW5jcmVhc2UgdGhlIHBlcmYgc2Vzc2lvbiByZWZlcmVuY2Ug
Y291bnQgLSBjYWxsZWQgYnkgcGVyZiB3aGVuCj4+IHNldHRpbmcgdXAgYQo+PiArICogdHJhY2Ug
ZXZlbnQuCj4+IMKgwqAgKgo+PiAtICogVGhpcyByZWZlcmVuY2UgY291bnQgaXMgdXNlZCBieSB0
aGUgSUQgYWxsb2NhdG9yIHRvIGVuc3VyZSB0aGF0Cj4+IHRyYWNlIElEcwo+PiAtICogYXNzb2Np
YXRlZCB3aXRoIGEgQ1BVIGNhbm5vdCBjaGFuZ2Ugb3IgYmUgcmVsZWFzZWQgZHVyaW5nIGEgcGVy
Zgo+PiBzZXNzaW9uLgo+PiArICogUGVyZiBzZXNzaW9ucyBuZXZlciBmcmVlIHRyYWNlIElEcyB0
byBlbnN1cmUgdGhhdCB0aGUgSUQKPj4gYXNzb2NpYXRlZCB3aXRoIGEKPj4gKyAqIENQVSBjYW5u
b3QgY2hhbmdlIGR1cmluZyB0aGVpciBhbmQgb3RoZXIncyBjb25jdXJyZW50IHNlc3Npb25zLgo+
PiBJbnN0ZWFkLAo+PiArICogdGhpcyByZWZjb3VudCBpcyB1c2VkIHNvIHRoYXQgdGhlIGxhc3Qg
ZXZlbnQgdG8gZmluaXNoIGFsd2F5cwo+PiBmcmVlcyBhbGwgSURzLgo+PiDCoMKgICovCj4+IC12
b2lkIGNvcmVzaWdodF90cmFjZV9pZF9wZXJmX3N0YXJ0KHZvaWQpOwo+PiArdm9pZCBjb3Jlc2ln
aHRfdHJhY2VfaWRfcGVyZl9zdGFydChzdHJ1Y3QgY29yZXNpZ2h0X3RyYWNlX2lkX21hcAo+PiAq
aWRfbWFwKTsKPj4gwqAgwqAgLyoqCj4+IMKgwqAgKiBOb3RpZnkgdGhlIElEIGFsbG9jYXRvciB0
aGF0IGEgcGVyZiBzZXNzaW9uIGlzIHN0b3BwaW5nLgo+PiDCoMKgICoKPj4gLSAqIERlY3JlYXNl
IHRoZSBwZXJmIHNlc3Npb24gcmVmZXJlbmNlIGNvdW50Lgo+PiAtICogaWYgdGhpcyBjYXVzZXMg
dGhlIGNvdW50IHRvIGdvIHRvIHplcm8sIHRoZW4gYWxsIFRyYWNlIElEcyBtYXJrZWQKPj4gYXMg
cGVuZGluZwo+PiAtICogcmVsZWFzZSwgd2lsbCBiZSByZWxlYXNlZC4KPj4gKyAqIERlY3JlYXNl
IHRoZSBwZXJmIHNlc3Npb24gcmVmZXJlbmNlIGNvdW50LiBJZiB0aGlzIGNhdXNlcyB0aGUKPj4g
Y291bnQgdG8gZ28gdG8KPj4gKyAqIHplcm8sIHRoZW4gYWxsIFRyYWNlIElEcyB3aWxsIGJlIHJl
bGVhc2VkLgo+PiDCoMKgICovCj4+IC12b2lkIGNvcmVzaWdodF90cmFjZV9pZF9wZXJmX3N0b3Ao
dm9pZCk7Cj4+ICt2b2lkIGNvcmVzaWdodF90cmFjZV9pZF9wZXJmX3N0b3Aoc3RydWN0IGNvcmVz
aWdodF90cmFjZV9pZF9tYXAKPj4gKmlkX21hcCk7Cj4+IMKgIMKgICNlbmRpZiAvKiBfQ09SRVNJ
R0hUX1RSQUNFX0lEX0ggKi8KPj4gZGlmZiAtLWdpdCBhL2luY2x1ZGUvbGludXgvY29yZXNpZ2h0
LmggYi9pbmNsdWRlL2xpbnV4L2NvcmVzaWdodC5oCj4+IGluZGV4IDljMzA2N2UyZTM4Yi4uMTk3
OTQ5ZmQyYzM1IDEwMDY0NAo+PiAtLS0gYS9pbmNsdWRlL2xpbnV4L2NvcmVzaWdodC5oCj4+ICsr
KyBiL2luY2x1ZGUvbGludXgvY29yZXNpZ2h0LmgKPj4gQEAgLTIyNywxNCArMjI3LDEyIEBAIHN0
cnVjdCBjb3Jlc2lnaHRfc3lzZnNfbGluayB7Cj4+IMKgwqAgKiBAdXNlZF9pZHM6wqDCoMKgIEJp
dG1hcCB0byByZWdpc3RlciBhdmFpbGFibGUgKGJpdCA9IDApIGFuZCBpbiB1c2UKPj4gKGJpdCA9
IDEpIElEcy4KPj4gwqDCoCAqwqDCoMKgwqDCoMKgwqAgSW5pdGlhbGlzZWQgc28gdGhhdCB0aGUg
cmVzZXJ2ZWQgSURzIGFyZSBwZXJtYW5lbnRseQo+PiBtYXJrZWQgYXMKPj4gwqDCoCAqwqDCoMKg
wqDCoMKgwqAgaW4gdXNlLgo+PiAtICogQHBlbmRfcmVsX2lkczogQ1BVIElEcyB0aGF0IGhhdmUg
YmVlbiByZWxlYXNlZCBieSB0aGUgdHJhY2Ugc291cmNlCj4+IGJ1dCBub3QKPj4gLSAqwqDCoMKg
wqDCoMKgwqDCoMKgIHlldCBtYXJrZWQgYXMgYXZhaWxhYmxlLCB0byBhbGxvdyByZS1hbGxvY2F0
aW9uIHRvIHRoZSBzYW1lCj4+IC0gKsKgwqDCoMKgwqDCoMKgwqDCoCBDUFUgZHVyaW5nIGEgcGVy
ZiBzZXNzaW9uLgo+PiArICogQHBlcmZfY3NfZXRtX3Nlc3Npb25fYWN0aXZlOiBOdW1iZXIgb2Yg
UGVyZiBzZXNzaW9ucyB1c2luZyB0aGlzIElECj4+IG1hcC4KPj4gwqDCoCAqLwo+PiDCoCBzdHJ1
Y3QgY29yZXNpZ2h0X3RyYWNlX2lkX21hcCB7Cj4+IMKgwqDCoMKgwqAgREVDTEFSRV9CSVRNQVAo
dXNlZF9pZHMsIENPUkVTSUdIVF9UUkFDRV9JRFNfTUFYKTsKPj4gLcKgwqDCoCBERUNMQVJFX0JJ
VE1BUChwZW5kX3JlbF9pZHMsIENPUkVTSUdIVF9UUkFDRV9JRFNfTUFYKTsKPj4gwqDCoMKgwqDC
oCBhdG9taWNfdCBfX3BlcmNwdSAqY3B1X21hcDsKPj4gK8KgwqDCoCBhdG9taWNfdCBwZXJmX2Nz
X2V0bV9zZXNzaW9uX2FjdGl2ZTsKPiAKPiBtaW5vciBuaXQ6IHRoaXMgY291bGQgc2ltcGx5IGJl
IDoKPiDCoMKgwqDCoGF0b21pY190IG1hcF9yZWZjbnQ7Cj4gCj4gaS5lLiwgbnVtYmVyIG9mIHJl
ZmVyZW5jZXMgdG8gdGhlIHRyYWNlX2lkIG1hcCA/Cj4gCj4gU3V6dWtpCgpBcyBJIG1lbnRpb25l
ZCBhYm92ZSBJIHRoaW5rIGl0J3MgY2xlYXJlciB0byBrZWVwIHRoaXMgbGFiZWxsZWQgd2l0aApQ
ZXJmIGFzIGxvbmcgaXMgaXQncyBzdGlsbCBvbmx5IHVzZWQgZm9yIFBlcmYuIEknZCBhZ3JlZSB0
byByZW5hbWUgaXQgYXQKdGhlIHBvaW50IHdoZW4gaXQgaXMgYSBtb3JlIGdlbmVyaWMgcmVmY250
IHRob3VnaC4gTm90IHN1cmUgd2hhdCB5b3UgdGhpbms/CgpKYW1lcwoKX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KTGludXgtc3RtMzIgbWFpbGluZyBsaXN0
CkxpbnV4LXN0bTMyQHN0LW1kLW1haWxtYW4uc3Rvcm1yZXBseS5jb20KaHR0cHM6Ly9zdC1tZC1t
YWlsbWFuLnN0b3JtcmVwbHkuY29tL21haWxtYW4vbGlzdGluZm8vbGludXgtc3RtMzIK
