Return-Path: <linux-stm32-bounces@st-md-mailman.stormreply.com>
X-Original-To: lists+linux-stm32@lfdr.de
Delivered-To: lists+linux-stm32@lfdr.de
Received: from stm-ict-prod-mailman-01.stormreply.prv (st-md-mailman.stormreply.com [52.209.6.89])
	by mail.lfdr.de (Postfix) with ESMTPS id E86DBA48059
	for <lists+linux-stm32@lfdr.de>; Thu, 27 Feb 2025 15:03:08 +0100 (CET)
Received: from ip-172-31-3-47.eu-west-1.compute.internal (localhost [127.0.0.1])
	by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTP id AF091C7A84B;
	Thu, 27 Feb 2025 14:03:08 +0000 (UTC)
Received: from mgamail.intel.com (mgamail.intel.com [198.175.65.18])
 (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTPS id B3164C7A84A
 for <linux-stm32@st-md-mailman.stormreply.com>;
 Thu, 27 Feb 2025 14:03:06 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
 d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
 t=1740664987; x=1772200987;
 h=from:to:subject:date:message-id:in-reply-to:references:
 mime-version:content-transfer-encoding;
 bh=zwB4SqXIs8gTR8vtl1iB406YbuP+LwhgOqxHJl1vhCI=;
 b=fQfRulql+EI7ElhPCmo5cwWNBaydFr5qlLCgVQj+oh+qDCVQIAue/yQc
 KCbZomdgpsG7Nis0UcmnV04EitOhK0yh7/5SIH3+7+sFutH6YIHa6ixfi
 DWwH/H1CrY4uosOYNFh+IUNyYO6AU1sGwyB+jGNVTZGpAcsfrtnaiDlzc
 fg7bIYZkAsT9Qyb9xAb2661bXLeAFFWD/zydwNT0Ydo0k2gGclDz8rz7e
 O3dm/D8eHcphI2YxY6WnyMcsa4G0lVtMve9XDTGUQ335n/CaeZ+iXjWp4
 dTwWrRFqWpGl36oLTFPDi0WAgSbEDA0z3pyoyYQYft0baK4V+UkTTPe5B g==;
X-CSE-ConnectionGUID: 7+hxyoNcSA2p+yz4sdJJpQ==
X-CSE-MsgGUID: B/Y/Rh8wRKiZOTeafifuyQ==
X-IronPort-AV: E=McAfee;i="6700,10204,11314"; a="41752384"
X-IronPort-AV: E=Sophos;i="6.12,310,1728975600"; d="scan'208";a="41752384"
Received: from fmviesa004.fm.intel.com ([10.60.135.144])
 by orvoesa110.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384;
 27 Feb 2025 06:03:05 -0800
X-CSE-ConnectionGUID: bm4Jew0RT3aXu1F10KhzRQ==
X-CSE-MsgGUID: jPCD5zglTquh6rhUAcSSOA==
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="6.13,319,1732608000"; d="scan'208";a="122149617"
Received: from mohdfai2-ilbpg12-1.png.intel.com ([10.88.227.73])
 by fmviesa004.fm.intel.com with ESMTP; 27 Feb 2025 06:02:57 -0800
From: Faizal Rahim <faizal.abdul.rahim@linux.intel.com>
To: Tony Nguyen <anthony.l.nguyen@intel.com>,
 Przemek Kitszel <przemyslaw.kitszel@intel.com>,
 Andrew Lunn <andrew+netdev@lunn.ch>,
 "David S . Miller" <davem@davemloft.net>,
 Eric Dumazet <edumazet@google.com>, Jakub Kicinski <kuba@kernel.org>,
 Paolo Abeni <pabeni@redhat.com>,
 Maxime Coquelin <mcoquelin.stm32@gmail.com>,
 Alexandre Torgue <alexandre.torgue@foss.st.com>,
 Simon Horman <horms@kernel.org>, Russell King <linux@armlinux.org.uk>,
 Alexei Starovoitov <ast@kernel.org>,
 Daniel Borkmann <daniel@iogearbox.net>,
 Jesper Dangaard Brouer <hawk@kernel.org>,
 John Fastabend <john.fastabend@gmail.com>, Furong Xu <0x1207@gmail.com>,
 Russell King <rmk+kernel@armlinux.org.uk>,
 Vladimir Oltean <vladimir.oltean@nxp.com>,
 Serge Semin <fancer.lancer@gmail.com>,
 Xiaolei Wang <xiaolei.wang@windriver.com>,
 Suraj Jaiswal <quic_jsuraj@quicinc.com>,
 Kory Maincent <kory.maincent@bootlin.com>, Gal Pressman <gal@nvidia.com>,
 Jesper Nilsson <jesper.nilsson@axis.com>,
 Andrew Halaney <ahalaney@redhat.com>,
 Choong Yong Liang <yong.liang.choong@linux.intel.com>,
 Faizal Rahim <faizal.abdul.rahim@linux.intel.com>,
 Kunihiko Hayashi <hayashi.kunihiko@socionext.com>,
 Vinicius Costa Gomes <vinicius.gomes@intel.com>,
 intel-wired-lan@lists.osuosl.org, netdev@vger.kernel.org,
 linux-kernel@vger.kernel.org, linux-stm32@st-md-mailman.stormreply.com,
 linux-arm-kernel@lists.infradead.org, bpf@vger.kernel.org
Date: Thu, 27 Feb 2025 09:01:53 -0500
Message-Id: <20250227140158.2129988-6-faizal.abdul.rahim@linux.intel.com>
X-Mailer: git-send-email 2.34.1
In-Reply-To: <20250227140158.2129988-1-faizal.abdul.rahim@linux.intel.com>
References: <20250227140158.2129988-1-faizal.abdul.rahim@linux.intel.com>
MIME-Version: 1.0
Subject: [Linux-stm32] [PATCH iwl-next v6 5/9] igc: Add support for frame
	preemption verification
X-BeenThere: linux-stm32@st-md-mailman.stormreply.com
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: <linux-stm32.st-md-mailman.stormreply.com>
List-Unsubscribe: <https://st-md-mailman.stormreply.com/mailman/options/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=unsubscribe>
List-Archive: <http://st-md-mailman.stormreply.com/pipermail/linux-stm32/>
List-Post: <mailto:linux-stm32@st-md-mailman.stormreply.com>
List-Help: <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=help>
List-Subscribe: <https://st-md-mailman.stormreply.com/mailman/listinfo/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: linux-stm32-bounces@st-md-mailman.stormreply.com
Sender: "Linux-stm32" <linux-stm32-bounces@st-md-mailman.stormreply.com>

VGhpcyBwYXRjaCBpbXBsZW1lbnRzIHRoZSAiZXRodG9vbCAtLXNldC1tbSIgY2FsbGJhY2sgdG8g
dHJpZ2dlciB0aGUKZnJhbWUgcHJlZW1wdGlvbiB2ZXJpZmljYXRpb24gaGFuZHNoYWtlLgoKVXNl
cyB0aGUgTUFDIE1lcmdlIFNvZnR3YXJlIFZlcmlmaWNhdGlvbiAobW1zdikgbWVjaGFuaXNtIGlu
IGV0aHRvb2wKdG8gcGVyZm9ybSB0aGUgdmVyaWZpY2F0aW9uIGhhbmRzaGFrZSBmb3IgaWdjLgpU
aGUgc3RydWN0dXJlIGZwZS5tbXN2IGlzIHNldCBieSBtbXN2IGluIGV0aHRvb2wgYW5kIHNob3Vs
ZCByZW1haW4KcmVhZC1vbmx5IGZvciB0aGUgZHJpdmVyLgoKT3RoZXIgbW1zdiBjYWxsYmFja3M6
CmEpIGNvbmZpZ3VyZV90eCgpIC0+IG5vdCB1c2VkIHlldCBhdCB0aGlzIHBvaW50CiAgIC0gaWdj
IGxhY2tzIHJlZ2lzdGVycyB0byBjb25maWd1cmUgRlBFIGluIHRoZSB0cmFuc21pdCBkaXJlY3Rp
b24sIHNvCiAgICAgdGhpcyBBUEkgaXMgbm90IHV0aWxpemVkIGZvciBub3cuIEEgZnV0dXJlIHBh
dGNoIHdpbGwgdXNlIGl0IHRvCiAgICAgY29udHJvbCBwcmVlbXB0aWJsZSBxdWV1ZSBjb25maWcu
CgpiKSBjb25maWd1cmVfcG1hYygpIC0+IG5vdCB1c2VkCiAgIC0gdGhpcyBjYWxsYmFjayBkeW5h
bWljYWxseSBjb250cm9scyBwbWFjX2VuYWJsZWQgYXQgcnVudGltZS4gRm9yCiAgICAgZXhhbXBs
ZSwgbW1zdiBjYWxscyBjb25maWd1cmVfcG1hYygpIGFuZCBkaXNhYmxlcyBwbWFjX2VuYWJsZWQg
d2hlbgogICAgIHRoZSBsaW5rIHBhcnRuZXIgZ29lcyBkb3duLCBldmVuIGlmIHRoZSB1c2VyIHBy
ZXZpb3VzbHkgZW5hYmxlZCBpdC4KICAgICBUaGUgaW50ZW50aW9uIGlzIHRvIHNhdmUgcG93ZXIg
YnV0IGl0IGlzIG5vdCBmZWFzaWJsZSBpbiBpZ2MKICAgICBiZWNhdXNlIGl0IGNhdXNlcyBhbiBl
bmRsZXNzIGFkYXB0ZXIgcmVzZXQgbG9vcDoKCiAgIDEpIEJvYXJkIEEgYW5kIEJvYXJkIEIgY29t
cGxldGUgdGhlIHZlcmlmaWNhdGlvbiBoYW5kc2hha2UuIFR4IG1vZGUKICAgICAgcmVnaXN0ZXIg
Zm9yIGJvdGggYm9hcmRzIGFyZSBpbiBUU04gbW9kZS4KICAgMikgQm9hcmQgQiBsaW5rIGdvZXMg
ZG93bi4KCiAgIE9uIEJvYXJkIEE6CiAgIDMpIG1tc3YgY2FsbHMgY29uZmlndXJlX3BtYWMoKSB3
aXRoIHBtYWNfZW5hYmxlZCA9IGZhbHNlLgogICA0KSBjb25maWd1cmVfcG1hYygpIGluIGlnYyB1
cGRhdGVzIGEgbmV3IGZpZWxkIGJhc2VkIG9uIHBtYWNfZW5hYmxlZC4KICAgICAgRHJpdmVyIHVz
ZXMgdGhpcyBmaWVsZCBpbiBpZ2NfdHNuX25ld19mbGFncygpIHRvIGluZGljYXRlIHRoYXQgdGhl
CiAgICAgIHVzZXIgZW5hYmxlZC9kaXNhYmxlZCBGUEUuCiAgIDUpIGNvbmZpZ3VyZV9wbWFjKCkg
aW4gaWdjIGNhbGxzIGlnY190c25fb2ZmbG9hZF9hcHBseSgpIHRvIGNoZWNrCiAgICAgIHdoZXRo
ZXIgYW4gYWRhcHRlciByZXNldCBpcyBuZWVkZWQuIENhbGxzIGV4aXN0aW5nIGxvZ2ljIGluCiAg
ICAgIGlnY190c25fd2lsbF90eF9tb2RlX2NoYW5nZSgpIGFuZCBpZ2NfdHNuX25ld19mbGFncygp
LgogICA2KSBTaW5jZSBwbWFjX2VuYWJsZWQgaXMgbm93IGRpc2FibGVkIGFuZCBubyBvdGhlciBU
U04gZmVhdHVyZSBpcwogICAgICBhY3RpdmUsIGlnY190c25fd2lsbF90eF9tb2RlX2NoYW5nZSgp
IGV2YWx1YXRlcyB0byB0cnVlIGJlY2F1c2UgVHgKICAgICAgbW9kZSB3aWxsIHN3aXRjaCBmcm9t
IFRTTiB0byBMZWdhY3kuCiAgIDcpIERyaXZlciByZXNldHMgdGhlIGFkYXB0ZXIuCiAgIDgpIFJl
Z2lzdGVycyBhcmUgc2V0LCBhbmQgVHggbW9kZSBzd2l0Y2hlcyB0byBMZWdhY3kuCiAgIDkpIFdo
ZW4gbGluayBwYXJ0bmVyIGlzIHVwLCBzdGVwcyAz4oCTOCByZXBlYXQsIGJ1dCB0aGlzIHRpbWUg
d2l0aAogICAgICBwbWFjX2VuYWJsZWQgPSB0cnVlLCByZWFjdGl2YXRpbmcgVFNOLgogICAgICBp
Z2NfdHNuX3dpbGxfdHhfbW9kZV9jaGFuZ2UoKSBldmFsdWF0ZXMgdG8gdHJ1ZSBhZ2Fpbiwgc2lu
Y2UgVHgKICAgICAgbW9kZSB3aWxsIHN3aXRjaCBmcm9tIExlZ2FjeSB0byBUU04uCiAgMTApIERy
aXZlciByZXNldHMgdGhlIGFkYXB0ZXIuCiAgMTEpIFJlc3QgYWRhcHRlciBjb21wbGV0ZXMsIHJl
Z2lzdGVycyBhcmUgc2V0LCBhbmQgVHggbW9kZSBzd2l0Y2hlcyB0bwogICAgICBUU04uCgogIE9u
IEJvYXJkIEI6CiAgMTIpIEFkYXB0ZXIgcmVzZXQgb24gQm9hcmQgQSBhdCBzdGVwIDEwIGNhdXNl
cyBpdCB0byBkZXRlY3QgaXRzIGxpbmsKICAgICAgcGFydG5lciBhcyBkb3duLgogIDEzKSBSZXBl
YXRzIHN0ZXBzIDPigJM4LgogIDE0KSBPbmNlIHJlc2V0IGFkYXB0ZXIgb24gQm9hcmQgQSBpcyBj
b21wbGV0ZWQgYXQgc3RlcCAxMSwgaXQgZGV0ZWN0cwogICAgICBpdHMgbGluayBwYXJ0bmVyIGFz
IHVwLgogIDE1KSBSZXBlYXRzIHN0ZXBzIDnigJMxMS4KCiAgIC0gdGhpcyBjeWNsZSByZXBlYXRz
IGluZGVmaW5pdGVseS4gVG8gYXZvaWQgdGhpcyBpc3N1ZSwgaWdjIG9ubHkgdXNlcwogICAgIG1t
c3YucG1hY19lbmFibGVkIHRvIHRyYWNrIHdoZXRoZXIgRlBFIGlzIGVuYWJsZWQgb3IgZGlzYWJs
ZWQuCgpDby1kZXZlbG9wZWQtYnk6IFZpbmljaXVzIENvc3RhIEdvbWVzIDx2aW5pY2l1cy5nb21l
c0BpbnRlbC5jb20+ClNpZ25lZC1vZmYtYnk6IFZpbmljaXVzIENvc3RhIEdvbWVzIDx2aW5pY2l1
cy5nb21lc0BpbnRlbC5jb20+CkNvLWRldmVsb3BlZC1ieTogQ2hvb25nIFlvbmcgTGlhbmcgPHlv
bmcubGlhbmcuY2hvb25nQGxpbnV4LmludGVsLmNvbT4KU2lnbmVkLW9mZi1ieTogQ2hvb25nIFlv
bmcgTGlhbmcgPHlvbmcubGlhbmcuY2hvb25nQGxpbnV4LmludGVsLmNvbT4KU2lnbmVkLW9mZi1i
eTogRmFpemFsIFJhaGltIDxmYWl6YWwuYWJkdWwucmFoaW1AbGludXguaW50ZWwuY29tPgotLS0K
IGRyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2MuaCAgICAgICAgIHwgIDEyICstCiBk
cml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2MvaWdjX2Jhc2UuaCAgICB8ICAgMSArCiBkcml2
ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2MvaWdjX2RlZmluZXMuaCB8ICAgOCArLQogZHJpdmVy
cy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY19ldGh0b29sLmMgfCAgMjEgKysrCiBkcml2ZXJz
L25ldC9ldGhlcm5ldC9pbnRlbC9pZ2MvaWdjX21haW4uYyAgICB8ICA1MyArKysrKystCiBkcml2
ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2MvaWdjX3Rzbi5jICAgICB8IDE0NyArKysrKysrKysr
KysrKysrKystCiBkcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2MvaWdjX3Rzbi5oICAgICB8
ICA1MSArKysrKysrCiA3IGZpbGVzIGNoYW5nZWQsIDI4OCBpbnNlcnRpb25zKCspLCA1IGRlbGV0
aW9ucygtKQoKZGlmZiAtLWdpdCBhL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2Mu
aCBiL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2MuaAppbmRleCAyMmVjZGFjMjZj
ZjQuLjcwNWJkNDczOWUzYiAxMDA2NDQKLS0tIGEvZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwv
aWdjL2lnYy5oCisrKyBiL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2MuaApAQCAt
NDAsNiArNDAsMTAgQEAgdm9pZCBpZ2NfZXRodG9vbF9zZXRfb3BzKHN0cnVjdCBuZXRfZGV2aWNl
ICopOwogCiAjZGVmaW5lIElHQ19NQVhfVFhfVFNUQU1QX1JFR1MJCTQKIAorc3RydWN0IGZwZV90
IHsKKwlzdHJ1Y3QgZXRodG9vbF9tbXN2IG1tc3Y7Cit9OworCiBlbnVtIGlnY19tYWNfZmlsdGVy
X3R5cGUgewogCUlHQ19NQUNfRklMVEVSX1RZUEVfRFNUID0gMCwKIAlJR0NfTUFDX0ZJTFRFUl9U
WVBFX1NSQwpAQCAtMzMyLDYgKzMzNiw4IEBAIHN0cnVjdCBpZ2NfYWRhcHRlciB7CiAJCXN0cnVj
dCB0aW1lc3BlYzY0IHBlcmlvZDsKIAl9IHBlcm91dFtJR0NfTl9QRVJPVVRdOwogCisJc3RydWN0
IGZwZV90IGZwZTsKKwogCS8qIExFRHMgKi8KIAlzdHJ1Y3QgbXV0ZXggbGVkX211dGV4OwogCXN0
cnVjdCBpZ2NfbGVkX2NsYXNzZGV2ICpsZWRzOwpAQCAtMzg5LDEwICszOTUsMTEgQEAgZXh0ZXJu
IGNoYXIgaWdjX2RyaXZlcl9uYW1lW107CiAjZGVmaW5lIElHQ19GTEFHX1RTTl9RQlZfRU5BQkxF
RAlCSVQoMTcpCiAjZGVmaW5lIElHQ19GTEFHX1RTTl9RQVZfRU5BQkxFRAlCSVQoMTgpCiAjZGVm
aW5lIElHQ19GTEFHX1RTTl9MRUdBQ1lfRU5BQkxFRAlCSVQoMTkpCisjZGVmaW5lIElHQ19GTEFH
X1RTTl9QUkVFTVBUX0VOQUJMRUQJQklUKDIwKQogCiAjZGVmaW5lIElHQ19GTEFHX1RTTl9BTllf
RU5BQkxFRAkJCQlcCiAJKElHQ19GTEFHX1RTTl9RQlZfRU5BQkxFRCB8IElHQ19GTEFHX1RTTl9R
QVZfRU5BQkxFRCB8CVwKLQkgSUdDX0ZMQUdfVFNOX0xFR0FDWV9FTkFCTEVEKQorCSBJR0NfRkxB
R19UU05fTEVHQUNZX0VOQUJMRUQgfCBJR0NfRkxBR19UU05fUFJFRU1QVF9FTkFCTEVEKQogCiAj
ZGVmaW5lIElHQ19GTEFHX1JTU19GSUVMRF9JUFY0X1VEUAlCSVQoNikKICNkZWZpbmUgSUdDX0ZM
QUdfUlNTX0ZJRUxEX0lQVjZfVURQCUJJVCg3KQpAQCAtNzM2LDcgKzc0MywxMCBAQCBzdHJ1Y3Qg
aWdjX25mY19ydWxlICppZ2NfZ2V0X25mY19ydWxlKHN0cnVjdCBpZ2NfYWRhcHRlciAqYWRhcHRl
ciwKIAkJCQkgICAgICB1MzIgbG9jYXRpb24pOwogaW50IGlnY19hZGRfbmZjX3J1bGUoc3RydWN0
IGlnY19hZGFwdGVyICphZGFwdGVyLCBzdHJ1Y3QgaWdjX25mY19ydWxlICpydWxlKTsKIHZvaWQg
aWdjX2RlbF9uZmNfcnVsZShzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIsIHN0cnVjdCBpZ2Nf
bmZjX3J1bGUgKnJ1bGUpOwordm9pZCBpZ2NfZGlzYWJsZV9lbXB0eV9hZGRyX3JlY3Yoc3RydWN0
IGlnY19hZGFwdGVyICphZGFwdGVyKTsKK2ludCBpZ2NfZW5hYmxlX2VtcHR5X2FkZHJfcmVjdihz
dHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIpOwogc3RydWN0IGlnY19yaW5nICppZ2NfZ2V0X3R4
X3Jpbmcoc3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVyLCBpbnQgY3B1KTsKK3ZvaWQgaWdjX2Zs
dXNoX3R4X2Rlc2NyaXB0b3JzKHN0cnVjdCBpZ2NfcmluZyAqcmluZyk7CiB2b2lkIGlnY19wdHBf
aW5pdChzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIpOwogdm9pZCBpZ2NfcHRwX3Jlc2V0KHN0
cnVjdCBpZ2NfYWRhcHRlciAqYWRhcHRlcik7CiB2b2lkIGlnY19wdHBfc3VzcGVuZChzdHJ1Y3Qg
aWdjX2FkYXB0ZXIgKmFkYXB0ZXIpOwpkaWZmIC0tZ2l0IGEvZHJpdmVycy9uZXQvZXRoZXJuZXQv
aW50ZWwvaWdjL2lnY19iYXNlLmggYi9kcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2MvaWdj
X2Jhc2UuaAppbmRleCBiZjhjZGZiYmE5ZmYuLjYzMjBlYWJiNzJmZSAxMDA2NDQKLS0tIGEvZHJp
dmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY19iYXNlLmgKKysrIGIvZHJpdmVycy9uZXQv
ZXRoZXJuZXQvaW50ZWwvaWdjL2lnY19iYXNlLmgKQEAgLTQ5LDYgKzQ5LDcgQEAgc3RydWN0IGln
Y19hZHZfdHhfY29udGV4dF9kZXNjIHsKICNkZWZpbmUgSUdDX0FEVlRYRF9EQ01EX0RFWFQJMHgy
MDAwMDAwMCAvKiBEZXNjcmlwdG9yIGV4dGVuc2lvbiAoMT1BZHYpICovCiAjZGVmaW5lIElHQ19B
RFZUWERfRENNRF9WTEUJMHg0MDAwMDAwMCAvKiBWTEFOIHBrdCBlbmFibGUgKi8KICNkZWZpbmUg
SUdDX0FEVlRYRF9EQ01EX1RTRQkweDgwMDAwMDAwIC8qIFRDUCBTZWcgZW5hYmxlICovCisjZGVm
aW5lIElHQ19BRFZUWERfUEFZTEVOX01BU0sJMFhGRkZGQzAwMCAvKiBBZHYgZGVzYyBQQVlMRU4g
bWFzayAqLwogI2RlZmluZSBJR0NfQURWVFhEX1BBWUxFTl9TSElGVAkxNCAvKiBBZHYgZGVzYyBQ
QVlMRU4gc2hpZnQgKi8KIAogI2RlZmluZSBJR0NfUkFSX0VOVFJJRVMJCTE2CmRpZmYgLS1naXQg
YS9kcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2MvaWdjX2RlZmluZXMuaCBiL2RyaXZlcnMv
bmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfZGVmaW5lcy5oCmluZGV4IGIxOWFjNmYzMGRhYy4u
MjJkYjFkZTAyOTY0IDEwMDY0NAotLS0gYS9kcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2Mv
aWdjX2RlZmluZXMuaAorKysgYi9kcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2MvaWdjX2Rl
ZmluZXMuaApAQCAtMzA4LDYgKzMwOCw4IEBACiAjZGVmaW5lIElHQ19UWERfRFRZUF9DCQkweDAw
MDAwMDAwIC8qIENvbnRleHQgRGVzY3JpcHRvciAqLwogI2RlZmluZSBJR0NfVFhEX1BPUFRTX0lY
U00JMHgwMSAgICAgICAvKiBJbnNlcnQgSVAgY2hlY2tzdW0gKi8KICNkZWZpbmUgSUdDX1RYRF9Q
T1BUU19UWFNNCTB4MDIgICAgICAgLyogSW5zZXJ0IFRDUC9VRFAgY2hlY2tzdW0gKi8KKyNkZWZp
bmUgSUdDX1RYRF9QT1BUU19TTURfTUFTSwkweDMwMDAgICAgIC8qIEluZGljYXRlcyB3aGV0aGVy
IGl0J3MgU01ELVYgb3IgU01ELVIgKi8KKwogI2RlZmluZSBJR0NfVFhEX0NNRF9FT1AJCTB4MDEw
MDAwMDAgLyogRW5kIG9mIFBhY2tldCAqLwogI2RlZmluZSBJR0NfVFhEX0NNRF9JQwkJMHgwNDAw
MDAwMCAvKiBJbnNlcnQgQ2hlY2tzdW0gKi8KICNkZWZpbmUgSUdDX1RYRF9DTURfREVYVAkweDIw
MDAwMDAwIC8qIERlc2MgZXh0ZW5zaW9uICgwID0gbGVnYWN5KSAqLwpAQCAtMzYzLDYgKzM2NSw4
IEBACiAjZGVmaW5lIElHQ19TUlJDVExfVElNRVIwU0VMKHRpbWVyKQkoKCh0aW1lcikgJiAweDMp
IDw8IDE3KQogCiAvKiBSZWNlaXZlIERlc2NyaXB0b3IgYml0IGRlZmluaXRpb25zICovCisjZGVm
aW5lIElHQ19SWERfU1RBVF9TTURfVFlQRV9WCTB4MDEJLyogU01ELVYgUGFja2V0ICovCisjZGVm
aW5lIElHQ19SWERfU1RBVF9TTURfVFlQRV9SCTB4MDIJLyogU01ELVIgUGFja2V0ICovCiAjZGVm
aW5lIElHQ19SWERfU1RBVF9FT1AJMHgwMgkvKiBFbmQgb2YgUGFja2V0ICovCiAjZGVmaW5lIElH
Q19SWERfU1RBVF9JWFNNCTB4MDQJLyogSWdub3JlIGNoZWNrc3VtICovCiAjZGVmaW5lIElHQ19S
WERfU1RBVF9VRFBDUwkweDEwCS8qIFVEUCB4c3VtIGNhbGN1bGF0ZWQgKi8KQEAgLTM3Miw3ICsz
NzYsOCBAQAogI2RlZmluZSBJR0NfUlhERVhUX1NUQVRFUlJfTEIJMHgwMDA0MDAwMAogCiAvKiBB
ZHZhbmNlZCBSZWNlaXZlIERlc2NyaXB0b3IgYml0IGRlZmluaXRpb25zICovCi0jZGVmaW5lIElH
Q19SWERBRFZfU1RBVF9UU0lQCTB4MDgwMDAgLyogdGltZXN0YW1wIGluIHBhY2tldCAqLworI2Rl
ZmluZSBJR0NfUlhEQURWX1NUQVRfU01EX1RZUEVfTUFTSwkweDA2MDAwCisjZGVmaW5lIElHQ19S
WERBRFZfU1RBVF9UU0lQCQkweDA4MDAwIC8qIHRpbWVzdGFtcCBpbiBwYWNrZXQgKi8KIAogI2Rl
ZmluZSBJR0NfUlhERVhUX1NUQVRFUlJfTDRFCQkweDIwMDAwMDAwCiAjZGVmaW5lIElHQ19SWERF
WFRfU1RBVEVSUl9JUEUJCTB4NDAwMDAwMDAKQEAgLTU0Myw2ICs1NDgsNyBAQAogCiAvKiBUcmFu
c21pdCBTY2hlZHVsaW5nICovCiAjZGVmaW5lIElHQ19UUUFWQ1RSTF9UUkFOU01JVF9NT0RFX1RT
TgkweDAwMDAwMDAxCisjZGVmaW5lIElHQ19UUUFWQ1RSTF9QUkVFTVBUX0VOQQkweDAwMDAwMDAy
CiAjZGVmaW5lIElHQ19UUUFWQ1RSTF9FTkhBTkNFRF9RQVYJMHgwMDAwMDAwOAogI2RlZmluZSBJ
R0NfVFFBVkNUUkxfRlVUU0NERElTCQkweDAwMDAwMDgwCiAKZGlmZiAtLWdpdCBhL2RyaXZlcnMv
bmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfZXRodG9vbC5jIGIvZHJpdmVycy9uZXQvZXRoZXJu
ZXQvaW50ZWwvaWdjL2lnY19ldGh0b29sLmMKaW5kZXggODE3ODM4Njc3ODE3Li5lMmExNGVkZjc1
NTIgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfZXRodG9v
bC5jCisrKyBiL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfZXRodG9vbC5jCkBA
IC04LDYgKzgsNyBAQAogCiAjaW5jbHVkZSAiaWdjLmgiCiAjaW5jbHVkZSAiaWdjX2RpYWcuaCIK
KyNpbmNsdWRlICJpZ2NfdHNuLmgiCiAKIC8qIGZvcndhcmQgZGVjbGFyYXRpb24gKi8KIHN0cnVj
dCBpZ2Nfc3RhdHMgewpAQCAtMTc4MSw2ICsxNzgyLDI1IEBAIHN0YXRpYyBpbnQgaWdjX2V0aHRv
b2xfc2V0X2VlZShzdHJ1Y3QgbmV0X2RldmljZSAqbmV0ZGV2LAogCXJldHVybiAwOwogfQogCitz
dGF0aWMgaW50IGlnY19ldGh0b29sX3NldF9tbShzdHJ1Y3QgbmV0X2RldmljZSAqbmV0ZGV2LAor
CQkJICAgICAgc3RydWN0IGV0aHRvb2xfbW1fY2ZnICpjbWQsCisJCQkgICAgICBzdHJ1Y3QgbmV0
bGlua19leHRfYWNrICpleHRhY2spCit7CisJc3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVyID0g
bmV0ZGV2X3ByaXYobmV0ZGV2KTsKKwlzdHJ1Y3QgZnBlX3QgKmZwZSA9ICZhZGFwdGVyLT5mcGU7
CisKKwlpZiAoZnBlLT5tbXN2LnBtYWNfZW5hYmxlZCAhPSBjbWQtPnBtYWNfZW5hYmxlZCkgewor
CQlpZiAoY21kLT5wbWFjX2VuYWJsZWQpCisJCQlzdGF0aWNfYnJhbmNoX2luYygmaWdjX2ZwZV9l
bmFibGVkKTsKKwkJZWxzZQorCQkJc3RhdGljX2JyYW5jaF9kZWMoJmlnY19mcGVfZW5hYmxlZCk7
CisJfQorCisJZXRodG9vbF9tbXN2X3NldF9tbSgmZnBlLT5tbXN2LCBjbWQpOworCisJcmV0dXJu
IGlnY190c25fb2ZmbG9hZF9hcHBseShhZGFwdGVyKTsKK30KKwogc3RhdGljIGludCBpZ2NfZXRo
dG9vbF9nZXRfbGlua19rc2V0dGluZ3Moc3RydWN0IG5ldF9kZXZpY2UgKm5ldGRldiwKIAkJCQkJ
ICBzdHJ1Y3QgZXRodG9vbF9saW5rX2tzZXR0aW5ncyAqY21kKQogewpAQCAtMjA2OCw2ICsyMDg4
LDcgQEAgc3RhdGljIGNvbnN0IHN0cnVjdCBldGh0b29sX29wcyBpZ2NfZXRodG9vbF9vcHMgPSB7
CiAJLnNldF9yeGZoCQk9IGlnY19ldGh0b29sX3NldF9yeGZoLAogCS5nZXRfdHNfaW5mbwkJPSBp
Z2NfZXRodG9vbF9nZXRfdHNfaW5mbywKIAkuZ2V0X2NoYW5uZWxzCQk9IGlnY19ldGh0b29sX2dl
dF9jaGFubmVscywKKwkuc2V0X21tCQkJPSBpZ2NfZXRodG9vbF9zZXRfbW0sCiAJLnNldF9jaGFu
bmVscwkJPSBpZ2NfZXRodG9vbF9zZXRfY2hhbm5lbHMsCiAJLmdldF9wcml2X2ZsYWdzCQk9IGln
Y19ldGh0b29sX2dldF9wcml2X2ZsYWdzLAogCS5zZXRfcHJpdl9mbGFncwkJPSBpZ2NfZXRodG9v
bF9zZXRfcHJpdl9mbGFncywKZGlmZiAtLWdpdCBhL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVs
L2lnYy9pZ2NfbWFpbi5jIGIvZHJpdmVycy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY19tYWlu
LmMKaW5kZXggNDRlNGY5MjU0OTFmLi41YTY2NDhhMTJhNTMgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMv
bmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfbWFpbi5jCisrKyBiL2RyaXZlcnMvbmV0L2V0aGVy
bmV0L2ludGVsL2lnYy9pZ2NfbWFpbi5jCkBAIC0yNTI5LDcgKzI1MjksNyBAQCBzdGF0aWMgaW50
IGlnY194ZHBfcnVuX3Byb2coc3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVyLCBzdHJ1Y3QgeGRw
X2J1ZmYgKnhkcCkKIH0KIAogLyogVGhpcyBmdW5jdGlvbiBhc3N1bWVzIF9fbmV0aWZfdHhfbG9j
ayBpcyBoZWxkIGJ5IHRoZSBjYWxsZXIuICovCi1zdGF0aWMgdm9pZCBpZ2NfZmx1c2hfdHhfZGVz
Y3JpcHRvcnMoc3RydWN0IGlnY19yaW5nICpyaW5nKQordm9pZCBpZ2NfZmx1c2hfdHhfZGVzY3Jp
cHRvcnMoc3RydWN0IGlnY19yaW5nICpyaW5nKQogewogCS8qIE9uY2UgdGFpbCBwb2ludGVyIGlz
IHVwZGF0ZWQsIGhhcmR3YXJlIGNhbiBmZXRjaCB0aGUgZGVzY3JpcHRvcnMKIAkgKiBhbnkgdGlt
ZSBzbyB3ZSBpc3N1ZSBhIHdyaXRlIG1lbWJhciBoZXJlIHRvIGVuc3VyZSBhbGwgbWVtb3J5CkBA
IC0yNjE4LDYgKzI2MTgsMTUgQEAgc3RhdGljIGludCBpZ2NfY2xlYW5fcnhfaXJxKHN0cnVjdCBp
Z2NfcV92ZWN0b3IgKnFfdmVjdG9yLCBjb25zdCBpbnQgYnVkZ2V0KQogCQkJc2l6ZSAtPSBJR0Nf
VFNfSERSX0xFTjsKIAkJfQogCisJCWlmIChpZ2NfZnBlX2lzX3BtYWNfZW5hYmxlZChhZGFwdGVy
KSAmJgorCQkgICAgaWdjX2ZwZV9pc192ZXJpZnlfb3JfcmVzcG9uc2UocnhfZGVzYywgc2l6ZSkp
IHsKKwkJCWlnY19mcGVfbHBfZXZlbnRfc3RhdHVzKHJ4X2Rlc2MsICZhZGFwdGVyLT5mcGUubW1z
dik7CisJCQkvKiBBZHZhbmNlIHRoZSByaW5nIG5leHQtdG8tY2xlYW4gKi8KKwkJCWlnY19pc19u
b25fZW9wKHJ4X3JpbmcsIHJ4X2Rlc2MpOworCQkJY2xlYW5lZF9jb3VudCsrOworCQkJY29udGlu
dWU7CisJCX0KKwogCQlpZiAoIXNrYikgewogCQkJeGRwX2luaXRfYnVmZigmY3R4LnhkcCwgdHJ1
ZXNpemUsICZyeF9yaW5nLT54ZHBfcnhxKTsKIAkJCXhkcF9wcmVwYXJlX2J1ZmYoJmN0eC54ZHAs
IHBrdGJ1ZiAtIGlnY19yeF9vZmZzZXQocnhfcmluZyksCkBAIC0zMDY1LDYgKzMwNzQsMTEgQEAg
c3RhdGljIGJvb2wgaWdjX2NsZWFuX3R4X2lycShzdHJ1Y3QgaWdjX3FfdmVjdG9yICpxX3ZlY3Rv
ciwgaW50IG5hcGlfYnVkZ2V0KQogCQlpZiAoIShlb3BfZGVzYy0+d2Iuc3RhdHVzICYgY3B1X3Rv
X2xlMzIoSUdDX1RYRF9TVEFUX0REKSkpCiAJCQlicmVhazsKIAorCQlpZiAoaWdjX2ZwZV9pc19w
bWFjX2VuYWJsZWQoYWRhcHRlcikgJiYKKwkJICAgIGlnY19mcGVfdHJhbnNtaXR0ZWRfc21kX3Yo
dHhfZGVzYykpCisJCQlldGh0b29sX21tc3ZfZXZlbnRfaGFuZGxlKCZhZGFwdGVyLT5mcGUubW1z
diwKKwkJCQkJCSAgRVRIVE9PTF9NTVNWX0xEX1NFTlRfVkVSSUZZX01QQUNLRVQpOworCiAJCS8q
IEhvbGQgdGhlIGNvbXBsZXRpb25zIHdoaWxlIHRoZXJlJ3MgYSBwZW5kaW5nIHR4IGhhcmR3YXJl
CiAJCSAqIHRpbWVzdGFtcCByZXF1ZXN0IGZyb20gWERQIFR4IG1ldGFkYXRhLgogCQkgKi8KQEAg
LTM5NTYsNiArMzk3MCwzMCBAQCBzdGF0aWMgaW50IGlnY191Y191bnN5bmMoc3RydWN0IG5ldF9k
ZXZpY2UgKm5ldGRldiwgY29uc3QgdW5zaWduZWQgY2hhciAqYWRkcikKIAlyZXR1cm4gMDsKIH0K
IAorLyoqCisgKiBpZ2NfZW5hYmxlX2VtcHR5X2FkZHJfcmVjdiAtIEVuYWJsZSByeCBvZiBwYWNr
ZXRzIHdpdGggYWxsLXplcm9lcyBNQUMgYWRkcmVzcworICogQGFkYXB0ZXI6IFBvaW50ZXIgdG8g
dGhlIGlnY19hZGFwdGVyIHN0cnVjdHVyZS4KKyAqCisgKiBGcmFtZSBwcmVlbXB0aW9uIHZlcmlm
aWNhdGlvbiByZXF1aXJlcyB0aGF0IHBhY2tldHMgd2l0aCB0aGUgYWxsLXplcm9lcworICogTUFD
IGFkZHJlc3MgYXJlIGFsbG93ZWQgdG8gYmUgcmVjZWl2ZWQgYnkgSUdDLiBUaGlzIGZ1bmN0aW9u
IGFkZHMgdGhlCisgKiBhbGwtemVyb2VzIGRlc3RpbmF0aW9uIGFkZHJlc3MgdG8gdGhlIGxpc3Qg
b2YgYWNjZXB0YWJsZSBhZGRyZXNzZXMuCisgKgorICogUmV0dXJuOiAwIG9uIHN1Y2Nlc3MsIG5l
Z2F0aXZlIHZhbHVlIG90aGVyd2lzZS4KKyAqLworaW50IGlnY19lbmFibGVfZW1wdHlfYWRkcl9y
ZWN2KHN0cnVjdCBpZ2NfYWRhcHRlciAqYWRhcHRlcikKK3sKKwl1OCBlbXB0eVtFVEhfQUxFTl0g
PSB7IH07CisKKwlyZXR1cm4gaWdjX2FkZF9tYWNfZmlsdGVyKGFkYXB0ZXIsIElHQ19NQUNfRklM
VEVSX1RZUEVfRFNULCBlbXB0eSwgLTEpOworfQorCit2b2lkIGlnY19kaXNhYmxlX2VtcHR5X2Fk
ZHJfcmVjdihzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIpCit7CisJdTggZW1wdHlbRVRIX0FM
RU5dID0geyB9OworCisJaWdjX2RlbF9tYWNfZmlsdGVyKGFkYXB0ZXIsIElHQ19NQUNfRklMVEVS
X1RZUEVfRFNULCBlbXB0eSk7Cit9CisKIC8qKgogICogaWdjX3NldF9yeF9tb2RlIC0gU2Vjb25k
YXJ5IFVuaWNhc3QsIE11bHRpY2FzdCBhbmQgUHJvbWlzY3VvdXMgbW9kZSBzZXQKICAqIEBuZXRk
ZXY6IG5ldHdvcmsgaW50ZXJmYWNlIGRldmljZSBzdHJ1Y3R1cmUKQEAgLTUyMzEsNiArNTI2OSw5
IEBAIHZvaWQgaWdjX2Rvd24oc3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVyKQogCWlnY19kaXNh
YmxlX2FsbF90eF9yaW5nc19odyhhZGFwdGVyKTsKIAlpZ2NfY2xlYW5fYWxsX3R4X3JpbmdzKGFk
YXB0ZXIpOwogCWlnY19jbGVhbl9hbGxfcnhfcmluZ3MoYWRhcHRlcik7CisKKwlpZiAoYWRhcHRl
ci0+ZnBlLm1tc3YucG1hY19lbmFibGVkKQorCQlldGh0b29sX21tc3Zfc3RvcCgmYWRhcHRlci0+
ZnBlLm1tc3YpOwogfQogCiB2b2lkIGlnY19yZWluaXRfbG9ja2VkKHN0cnVjdCBpZ2NfYWRhcHRl
ciAqYWRhcHRlcikKQEAgLTU3NTUsNiArNTc5NiwxMCBAQCBzdGF0aWMgdm9pZCBpZ2Nfd2F0Y2hk
b2dfdGFzayhzdHJ1Y3Qgd29ya19zdHJ1Y3QgKndvcmspCiAJCQkgKi8KIAkJCWlnY190c25fYWRq
dXN0X3R4dGltZV9vZmZzZXQoYWRhcHRlcik7CiAKKwkJCWlmIChhZGFwdGVyLT5mcGUubW1zdi5w
bWFjX2VuYWJsZWQpCisJCQkJZXRodG9vbF9tbXN2X2xpbmtfc3RhdGVfaGFuZGxlKCZhZGFwdGVy
LT5mcGUubW1zdiwKKwkJCQkJCQkgICAgICAgdHJ1ZSk7CisKIAkJCWlmIChhZGFwdGVyLT5saW5r
X3NwZWVkICE9IFNQRUVEXzEwMDApCiAJCQkJZ290byBub193YWl0OwogCkBAIC01NzkwLDYgKzU4
MzUsMTAgQEAgc3RhdGljIHZvaWQgaWdjX3dhdGNoZG9nX3Rhc2soc3RydWN0IHdvcmtfc3RydWN0
ICp3b3JrKQogCQkJbmV0ZGV2X2luZm8obmV0ZGV2LCAiTklDIExpbmsgaXMgRG93blxuIik7CiAJ
CQluZXRpZl9jYXJyaWVyX29mZihuZXRkZXYpOwogCisJCQlpZiAoYWRhcHRlci0+ZnBlLm1tc3Yu
cG1hY19lbmFibGVkKQorCQkJCWV0aHRvb2xfbW1zdl9saW5rX3N0YXRlX2hhbmRsZSgmYWRhcHRl
ci0+ZnBlLm1tc3YsCisJCQkJCQkJICAgICAgIGZhbHNlKTsKKwogCQkJLyogbGluayBzdGF0ZSBo
YXMgY2hhbmdlZCwgc2NoZWR1bGUgcGh5IGluZm8gdXBkYXRlICovCiAJCQlpZiAoIXRlc3RfYml0
KF9fSUdDX0RPV04sICZhZGFwdGVyLT5zdGF0ZSkpCiAJCQkJbW9kX3RpbWVyKCZhZGFwdGVyLT5w
aHlfaW5mb190aW1lciwKQEAgLTcxMTAsNiArNzE1OSw4IEBAIHN0YXRpYyBpbnQgaWdjX3Byb2Jl
KHN0cnVjdCBwY2lfZGV2ICpwZGV2LAogCiAJaWdjX3Rzbl9jbGVhcl9zY2hlZHVsZShhZGFwdGVy
KTsKIAorCWlnY19mcGVfaW5pdChhZGFwdGVyKTsKKwogCS8qIHJlc2V0IHRoZSBoYXJkd2FyZSB3
aXRoIHRoZSBuZXcgc2V0dGluZ3MgKi8KIAlpZ2NfcmVzZXQoYWRhcHRlcik7CiAKZGlmZiAtLWdp
dCBhL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfdHNuLmMgYi9kcml2ZXJzL25l
dC9ldGhlcm5ldC9pbnRlbC9pZ2MvaWdjX3Rzbi5jCmluZGV4IGYwMjEzY2ZjZTA3ZC4uYWNmZmYz
OTE5NzkzIDEwMDY0NAotLS0gYS9kcml2ZXJzL25ldC9ldGhlcm5ldC9pbnRlbC9pZ2MvaWdjX3Rz
bi5jCisrKyBiL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfdHNuLmMKQEAgLTEs
MTAgKzEsMTM3IEBACiAvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogR1BMLTIuMAogLyogQ29w
eXJpZ2h0IChjKSAgMjAxOSBJbnRlbCBDb3Jwb3JhdGlvbiAqLwogCisjaW5jbHVkZSA8bGludXgv
a2VybmVsLmg+CiAjaW5jbHVkZSAiaWdjLmgiCisjaW5jbHVkZSAiaWdjX2Jhc2UuaCIKICNpbmNs
dWRlICJpZ2NfaHcuaCIKICNpbmNsdWRlICJpZ2NfdHNuLmgiCiAKK0RFRklORV9TVEFUSUNfS0VZ
X0ZBTFNFKGlnY19mcGVfZW5hYmxlZCk7CisKK3N0YXRpYyBpbnQgaWdjX2ZwZV9pbml0X3NtZF9m
cmFtZShzdHJ1Y3QgaWdjX3JpbmcgKnJpbmcsCisJCQkJICBzdHJ1Y3QgaWdjX3R4X2J1ZmZlciAq
YnVmZmVyLAorCQkJCSAgc3RydWN0IHNrX2J1ZmYgKnNrYikKK3sKKwlkbWFfYWRkcl90IGRtYSA9
IGRtYV9tYXBfc2luZ2xlKHJpbmctPmRldiwgc2tiLT5kYXRhLCBza2ItPmxlbiwKKwkJCQkJRE1B
X1RPX0RFVklDRSk7CisKKwlpZiAoZG1hX21hcHBpbmdfZXJyb3IocmluZy0+ZGV2LCBkbWEpKSB7
CisJCW5ldGRldl9lcnJfb25jZShyaW5nLT5uZXRkZXYsICJGYWlsZWQgdG8gbWFwIERNQSBmb3Ig
VFhcbiIpOworCQlyZXR1cm4gLUVOT01FTTsKKwl9CisKKwlidWZmZXItPnNrYiA9IHNrYjsKKwli
dWZmZXItPnByb3RvY29sID0gMDsKKwlidWZmZXItPmJ5dGVjb3VudCA9IHNrYi0+bGVuOworCWJ1
ZmZlci0+Z3NvX3NlZ3MgPSAxOworCWJ1ZmZlci0+dGltZV9zdGFtcCA9IGppZmZpZXM7CisJZG1h
X3VubWFwX2xlbl9zZXQoYnVmZmVyLCBsZW4sIHNrYi0+bGVuKTsKKwlkbWFfdW5tYXBfYWRkcl9z
ZXQoYnVmZmVyLCBkbWEsIGRtYSk7CisKKwlyZXR1cm4gMDsKK30KKworc3RhdGljIGludCBpZ2Nf
ZnBlX2luaXRfdHhfZGVzY3JpcHRvcihzdHJ1Y3QgaWdjX3JpbmcgKnJpbmcsCisJCQkJICAgICAg
c3RydWN0IHNrX2J1ZmYgKnNrYiwKKwkJCQkgICAgICBlbnVtIGlnY190eGRfcG9wdHNfdHlwZSB0
eXBlKQoreworCXUzMiBjbWRfdHlwZSwgb2xpbmZvX3N0YXR1cyA9IDA7CisJc3RydWN0IGlnY190
eF9idWZmZXIgKmJ1ZmZlcjsKKwl1bmlvbiBpZ2NfYWR2X3R4X2Rlc2MgKmRlc2M7CisJaW50IGVy
cjsKKworCWlmICghaWdjX2Rlc2NfdW51c2VkKHJpbmcpKQorCQlyZXR1cm4gLUVCVVNZOworCisJ
YnVmZmVyID0gJnJpbmctPnR4X2J1ZmZlcl9pbmZvW3JpbmctPm5leHRfdG9fdXNlXTsKKwllcnIg
PSBpZ2NfZnBlX2luaXRfc21kX2ZyYW1lKHJpbmcsIGJ1ZmZlciwgc2tiKTsKKwlpZiAoZXJyKQor
CQlyZXR1cm4gZXJyOworCisJY21kX3R5cGUgPSBJR0NfQURWVFhEX0RUWVBfREFUQSB8IElHQ19B
RFZUWERfRENNRF9ERVhUIHwKKwkJICAgSUdDX0FEVlRYRF9EQ01EX0lGQ1MgfCBJR0NfVFhEX0RD
TUQgfAorCQkgICBidWZmZXItPmJ5dGVjb3VudDsKKworCW9saW5mb19zdGF0dXMgfD0gRklFTERf
UFJFUChJR0NfQURWVFhEX1BBWUxFTl9NQVNLLCBidWZmZXItPmJ5dGVjb3VudCk7CisKKwlzd2l0
Y2ggKHR5cGUpIHsKKwljYXNlIFNNRF9WOgorCWNhc2UgU01EX1I6CisJCW9saW5mb19zdGF0dXMg
fD0gRklFTERfUFJFUChJR0NfVFhEX1BPUFRTX1NNRF9NQVNLLCB0eXBlKTsKKwkJYnJlYWs7CisJ
fQorCisJZGVzYyA9IElHQ19UWF9ERVNDKHJpbmcsIHJpbmctPm5leHRfdG9fdXNlKTsKKwlkZXNj
LT5yZWFkLmNtZF90eXBlX2xlbiA9IGNwdV90b19sZTMyKGNtZF90eXBlKTsKKwlkZXNjLT5yZWFk
Lm9saW5mb19zdGF0dXMgPSBjcHVfdG9fbGUzMihvbGluZm9fc3RhdHVzKTsKKwlkZXNjLT5yZWFk
LmJ1ZmZlcl9hZGRyID0gY3B1X3RvX2xlNjQoZG1hX3VubWFwX2FkZHIoYnVmZmVyLCBkbWEpKTsK
KworCW5ldGRldl90eF9zZW50X3F1ZXVlKHR4cmluZ190eHEocmluZyksIHNrYi0+bGVuKTsKKwor
CWJ1ZmZlci0+bmV4dF90b193YXRjaCA9IGRlc2M7CisJcmluZy0+bmV4dF90b191c2UgPSAocmlu
Zy0+bmV4dF90b191c2UgKyAxKSAlIHJpbmctPmNvdW50OworCisJcmV0dXJuIDA7Cit9CisKK3N0
YXRpYyBpbnQgaWdjX2ZwZV94bWl0X3NtZF9mcmFtZShzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0
ZXIsCisJCQkJICBlbnVtIGlnY190eGRfcG9wdHNfdHlwZSB0eXBlKQoreworCWludCBjcHUgPSBz
bXBfcHJvY2Vzc29yX2lkKCk7CisJc3RydWN0IG5ldGRldl9xdWV1ZSAqbnE7CisJc3RydWN0IGln
Y19yaW5nICpyaW5nOworCXN0cnVjdCBza19idWZmICpza2I7CisJaW50IGVycjsKKworCXJpbmcg
PSBpZ2NfZ2V0X3R4X3JpbmcoYWRhcHRlciwgY3B1KTsKKwlucSA9IHR4cmluZ190eHEocmluZyk7
CisKKwlza2IgPSBhbGxvY19za2IoU01EX0ZSQU1FX1NJWkUsIEdGUF9BVE9NSUMpOworCWlmICgh
c2tiKQorCQlyZXR1cm4gLUVOT01FTTsKKworCXNrYl9wdXRfemVybyhza2IsIFNNRF9GUkFNRV9T
SVpFKTsKKworCV9fbmV0aWZfdHhfbG9jayhucSwgY3B1KTsKKworCWVyciA9IGlnY19mcGVfaW5p
dF90eF9kZXNjcmlwdG9yKHJpbmcsIHNrYiwgdHlwZSk7CisJaWdjX2ZsdXNoX3R4X2Rlc2NyaXB0
b3JzKHJpbmcpOworCisJX19uZXRpZl90eF91bmxvY2sobnEpOworCisJcmV0dXJuIGVycjsKK30K
Kworc3RhdGljIHZvaWQgaWdjX2ZwZV9zZW5kX21wYWNrZXQoc3RydWN0IGV0aHRvb2xfbW1zdiAq
bW1zdiwKKwkJCQkgZW51bSBldGh0b29sX21wYWNrZXQgdHlwZSkKK3sKKwlzdHJ1Y3QgZnBlX3Qg
KmZwZSA9IGNvbnRhaW5lcl9vZihtbXN2LCBzdHJ1Y3QgZnBlX3QsIG1tc3YpOworCXN0cnVjdCBp
Z2NfYWRhcHRlciAqYWRhcHRlcjsKKwlpbnQgZXJyOworCisJYWRhcHRlciA9IGNvbnRhaW5lcl9v
ZihmcGUsIHN0cnVjdCBpZ2NfYWRhcHRlciwgZnBlKTsKKworCWlmICh0eXBlID09IEVUSFRPT0xf
TVBBQ0tFVF9WRVJJRlkpIHsKKwkJZXJyID0gaWdjX2ZwZV94bWl0X3NtZF9mcmFtZShhZGFwdGVy
LCBTTURfVik7CisJCWlmIChlcnIgJiYgbmV0X3JhdGVsaW1pdCgpKQorCQkJbmV0ZGV2X2Vycihh
ZGFwdGVyLT5uZXRkZXYsICJFcnJvciBzZW5kaW5nIFNNRC1WXG4iKTsKKwl9IGVsc2UgaWYgKHR5
cGUgPT0gRVRIVE9PTF9NUEFDS0VUX1JFU1BPTlNFKSB7CisJCWVyciA9IGlnY19mcGVfeG1pdF9z
bWRfZnJhbWUoYWRhcHRlciwgU01EX1IpOworCQlpZiAoZXJyICYmIG5ldF9yYXRlbGltaXQoKSkK
KwkJCW5ldGRldl9lcnIoYWRhcHRlci0+bmV0ZGV2LCAiRXJyb3Igc2VuZGluZyBTTUQtUiBmcmFt
ZVxuIik7CisJfQorfQorCitzdGF0aWMgY29uc3Qgc3RydWN0IGV0aHRvb2xfbW1zdl9vcHMgaWdj
X21tc3Zfb3BzID0geworCS5zZW5kX21wYWNrZXQgPSBpZ2NfZnBlX3NlbmRfbXBhY2tldCwKK307
CisKK3ZvaWQgaWdjX2ZwZV9pbml0KHN0cnVjdCBpZ2NfYWRhcHRlciAqYWRhcHRlcikKK3sKKwll
dGh0b29sX21tc3ZfaW5pdCgmYWRhcHRlci0+ZnBlLm1tc3YsIGFkYXB0ZXItPm5ldGRldiwgJmln
Y19tbXN2X29wcyk7Cit9CisKIHN0YXRpYyBib29sIGlzX2FueV9sYXVuY2h0aW1lKHN0cnVjdCBp
Z2NfYWRhcHRlciAqYWRhcHRlcikKIHsKIAlpbnQgaTsKQEAgLTQ5LDYgKzE3Niw5IEBAIHN0YXRp
YyB1bnNpZ25lZCBpbnQgaWdjX3Rzbl9uZXdfZmxhZ3Moc3RydWN0IGlnY19hZGFwdGVyICphZGFw
dGVyKQogCWlmIChhZGFwdGVyLT5zdHJpY3RfcHJpb3JpdHlfZW5hYmxlKQogCQluZXdfZmxhZ3Mg
fD0gSUdDX0ZMQUdfVFNOX0xFR0FDWV9FTkFCTEVEOwogCisJaWYgKGFkYXB0ZXItPmZwZS5tbXN2
LnBtYWNfZW5hYmxlZCkKKwkJbmV3X2ZsYWdzIHw9IElHQ19GTEFHX1RTTl9QUkVFTVBUX0VOQUJM
RUQ7CisKIAlyZXR1cm4gbmV3X2ZsYWdzOwogfQogCkBAIC0xNDgsNyArMjc4LDggQEAgc3RhdGlj
IGludCBpZ2NfdHNuX2Rpc2FibGVfb2ZmbG9hZChzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIp
CiAKIAl0cWF2Y3RybCA9IHJkMzIoSUdDX1RRQVZDVFJMKTsKIAl0cWF2Y3RybCAmPSB+KElHQ19U
UUFWQ1RSTF9UUkFOU01JVF9NT0RFX1RTTiB8Ci0JCSAgICAgIElHQ19UUUFWQ1RSTF9FTkhBTkNF
RF9RQVYgfCBJR0NfVFFBVkNUUkxfRlVUU0NERElTKTsKKwkJICAgICAgSUdDX1RRQVZDVFJMX0VO
SEFOQ0VEX1FBViB8IElHQ19UUUFWQ1RSTF9GVVRTQ0RESVMgfAorCQkgICAgICBJR0NfVFFBVkNU
UkxfUFJFRU1QVF9FTkEpOwogCiAJd3IzMihJR0NfVFFBVkNUUkwsIHRxYXZjdHJsKTsKIApAQCAt
MzcwLDEwICs1MDEsMTQgQEAgc3RhdGljIGludCBpZ2NfdHNuX2VuYWJsZV9vZmZsb2FkKHN0cnVj
dCBpZ2NfYWRhcHRlciAqYWRhcHRlcikKIAkJd3IzMihJR0NfVFhRQ1RMKGkpLCB0eHFjdGwpOwog
CX0KIAotCXRxYXZjdHJsID0gcmQzMihJR0NfVFFBVkNUUkwpICYgfklHQ19UUUFWQ1RSTF9GVVRT
Q0RESVM7CisJdHFhdmN0cmwgPSByZDMyKElHQ19UUUFWQ1RSTCkgJiB+KElHQ19UUUFWQ1RSTF9G
VVRTQ0RESVMgfAorCQkgICBJR0NfVFFBVkNUUkxfUFJFRU1QVF9FTkEpOwogCiAJdHFhdmN0cmwg
fD0gSUdDX1RRQVZDVFJMX1RSQU5TTUlUX01PREVfVFNOIHwgSUdDX1RRQVZDVFJMX0VOSEFOQ0VE
X1FBVjsKIAorCWlmIChhZGFwdGVyLT5mcGUubW1zdi5wbWFjX2VuYWJsZWQpCisJCXRxYXZjdHJs
IHw9IElHQ19UUUFWQ1RSTF9QUkVFTVBUX0VOQTsKKwogCWFkYXB0ZXItPnFidl9jb3VudCsrOwog
CiAJY3ljbGUgPSBhZGFwdGVyLT5jeWNsZV90aW1lOwpAQCAtNDM0LDYgKzU2OSwxNCBAQCBpbnQg
aWdjX3Rzbl9yZXNldChzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIpCiAJdW5zaWduZWQgaW50
IG5ld19mbGFnczsKIAlpbnQgZXJyID0gMDsKIAorCWlmIChhZGFwdGVyLT5mcGUubW1zdi5wbWFj
X2VuYWJsZWQpIHsKKwkJZXJyID0gaWdjX2VuYWJsZV9lbXB0eV9hZGRyX3JlY3YoYWRhcHRlcik7
CisJCWlmIChlcnIgJiYgbmV0X3JhdGVsaW1pdCgpKQorCQkJbmV0ZGV2X2VycihhZGFwdGVyLT5u
ZXRkZXYsICJFcnJvciBhZGRpbmcgZW1wdHkgYWRkcmVzcyB0byBNQUMgZmlsdGVyXG4iKTsKKwl9
IGVsc2UgeworCQlpZ2NfZGlzYWJsZV9lbXB0eV9hZGRyX3JlY3YoYWRhcHRlcik7CisJfQorCiAJ
bmV3X2ZsYWdzID0gaWdjX3Rzbl9uZXdfZmxhZ3MoYWRhcHRlcik7CiAKIAlpZiAoIShuZXdfZmxh
Z3MgJiBJR0NfRkxBR19UU05fQU5ZX0VOQUJMRUQpKQpkaWZmIC0tZ2l0IGEvZHJpdmVycy9uZXQv
ZXRoZXJuZXQvaW50ZWwvaWdjL2lnY190c24uaCBiL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVs
L2lnYy9pZ2NfdHNuLmgKaW5kZXggOThlYzg0NWE4NmJmLi43YmEyMzJlZjM3YzkgMTAwNjQ0Ci0t
LSBhL2RyaXZlcnMvbmV0L2V0aGVybmV0L2ludGVsL2lnYy9pZ2NfdHNuLmgKKysrIGIvZHJpdmVy
cy9uZXQvZXRoZXJuZXQvaW50ZWwvaWdjL2lnY190c24uaApAQCAtNCw5ICs0LDYwIEBACiAjaWZu
ZGVmIF9JR0NfVFNOX0hfCiAjZGVmaW5lIF9JR0NfVFNOX0hfCiAKKyNkZWZpbmUgU01EX0ZSQU1F
X1NJWkUJCQk2MAorCitlbnVtIGlnY190eGRfcG9wdHNfdHlwZSB7CisJU01EX1YgPSAweDAxLAor
CVNNRF9SID0gMHgwMgorfTsKKworREVDTEFSRV9TVEFUSUNfS0VZX0ZBTFNFKGlnY19mcGVfZW5h
YmxlZCk7CisKK3ZvaWQgaWdjX2ZwZV9pbml0KHN0cnVjdCBpZ2NfYWRhcHRlciAqYWRhcHRlcik7
Cit1MzIgaWdjX2ZwZV9nZXRfc3VwcG9ydGVkX2ZyYWdfc2l6ZSh1MzIgdXNlcl9mcmFnX3NpemUp
OwogaW50IGlnY190c25fb2ZmbG9hZF9hcHBseShzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIp
OwogaW50IGlnY190c25fcmVzZXQoc3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVyKTsKIHZvaWQg
aWdjX3Rzbl9hZGp1c3RfdHh0aW1lX29mZnNldChzdHJ1Y3QgaWdjX2FkYXB0ZXIgKmFkYXB0ZXIp
OwogYm9vbCBpZ2NfdHNuX2lzX3RhcHJpb19hY3RpdmF0ZWRfYnlfdXNlcihzdHJ1Y3QgaWdjX2Fk
YXB0ZXIgKmFkYXB0ZXIpOwogCitzdGF0aWMgaW5saW5lIGJvb2wgaWdjX2ZwZV9pc19wbWFjX2Vu
YWJsZWQoc3RydWN0IGlnY19hZGFwdGVyICphZGFwdGVyKQoreworCXJldHVybiBzdGF0aWNfYnJh
bmNoX3VubGlrZWx5KCZpZ2NfZnBlX2VuYWJsZWQpICYmCisJICAgICAgIGFkYXB0ZXItPmZwZS5t
bXN2LnBtYWNfZW5hYmxlZDsKK30KKworc3RhdGljIGlubGluZSBib29sIGlnY19mcGVfaXNfdmVy
aWZ5X29yX3Jlc3BvbnNlKHVuaW9uIGlnY19hZHZfcnhfZGVzYyAqcnhfZGVzYywKKwkJCQkJCSB1
bnNpZ25lZCBpbnQgc2l6ZSkKK3sKKwl1MzIgc3RhdHVzX2Vycm9yID0gbGUzMl90b19jcHUocnhf
ZGVzYy0+d2IudXBwZXIuc3RhdHVzX2Vycm9yKTsKKwlpbnQgc21kOworCisJc21kID0gRklFTERf
R0VUKElHQ19SWERBRFZfU1RBVF9TTURfVFlQRV9NQVNLLCBzdGF0dXNfZXJyb3IpOworCisJcmV0
dXJuICgoc21kID09IElHQ19SWERfU1RBVF9TTURfVFlQRV9WIHx8IHNtZCA9PSBJR0NfUlhEX1NU
QVRfU01EX1RZUEVfUikgJiYKKwkJc2l6ZSA9PSBTTURfRlJBTUVfU0laRSk7Cit9CisKK3N0YXRp
YyBpbmxpbmUgdm9pZCBpZ2NfZnBlX2xwX2V2ZW50X3N0YXR1cyh1bmlvbiBpZ2NfYWR2X3J4X2Rl
c2MgKnJ4X2Rlc2MsCisJCQkJCSAgIHN0cnVjdCBldGh0b29sX21tc3YgKm1tc3YpCit7CisJdTMy
IHN0YXR1c19lcnJvciA9IGxlMzJfdG9fY3B1KHJ4X2Rlc2MtPndiLnVwcGVyLnN0YXR1c19lcnJv
cik7CisJaW50IHNtZDsKKworCXNtZCA9IEZJRUxEX0dFVChJR0NfUlhEQURWX1NUQVRfU01EX1RZ
UEVfTUFTSywgc3RhdHVzX2Vycm9yKTsKKworCWlmIChzbWQgPT0gSUdDX1JYRF9TVEFUX1NNRF9U
WVBFX1YpCisJCWV0aHRvb2xfbW1zdl9ldmVudF9oYW5kbGUobW1zdiwgRVRIVE9PTF9NTVNWX0xQ
X1NFTlRfVkVSSUZZX01QQUNLRVQpOworCWVsc2UgaWYgKHNtZCA9PSBJR0NfUlhEX1NUQVRfU01E
X1RZUEVfUikKKwkJZXRodG9vbF9tbXN2X2V2ZW50X2hhbmRsZShtbXN2LCBFVEhUT09MX01NU1Zf
TFBfU0VOVF9SRVNQT05TRV9NUEFDS0VUKTsKK30KKworc3RhdGljIGlubGluZSBib29sIGlnY19m
cGVfdHJhbnNtaXR0ZWRfc21kX3YodW5pb24gaWdjX2Fkdl90eF9kZXNjICp0eF9kZXNjKQorewor
CXUzMiBvbGluZm9fc3RhdHVzID0gbGUzMl90b19jcHUodHhfZGVzYy0+cmVhZC5vbGluZm9fc3Rh
dHVzKTsKKwl1OCBzbWQgPSBGSUVMRF9HRVQoSUdDX1RYRF9QT1BUU19TTURfTUFTSywgb2xpbmZv
X3N0YXR1cyk7CisKKwlyZXR1cm4gc21kID09IFNNRF9WOworfQorCiAjZW5kaWYgLyogX0lHQ19C
QVNFX0ggKi8KLS0gCjIuMzQuMQoKX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX18KTGludXgtc3RtMzIgbWFpbGluZyBsaXN0CkxpbnV4LXN0bTMyQHN0LW1kLW1h
aWxtYW4uc3Rvcm1yZXBseS5jb20KaHR0cHM6Ly9zdC1tZC1tYWlsbWFuLnN0b3JtcmVwbHkuY29t
L21haWxtYW4vbGlzdGluZm8vbGludXgtc3RtMzIK
