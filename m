Return-Path: <linux-stm32-bounces@st-md-mailman.stormreply.com>
X-Original-To: lists+linux-stm32@lfdr.de
Delivered-To: lists+linux-stm32@lfdr.de
Received: from stm-ict-prod-mailman-01.stormreply.prv (st-md-mailman.stormreply.com [52.209.6.89])
	by mail.lfdr.de (Postfix) with ESMTPS id 0C9F35A5CE1
	for <lists+linux-stm32@lfdr.de>; Tue, 30 Aug 2022 09:30:29 +0200 (CEST)
Received: from ip-172-31-3-47.eu-west-1.compute.internal (localhost [127.0.0.1])
	by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTP id B1415C5EC6B;
	Tue, 30 Aug 2022 07:30:28 +0000 (UTC)
Received: from mga12.intel.com (mga12.intel.com [192.55.52.136])
 (using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
 (No client certificate requested)
 by stm-ict-prod-mailman-01.stormreply.prv (Postfix) with ESMTPS id F1A49C03FD4
 for <linux-stm32@st-md-mailman.stormreply.com>;
 Tue, 30 Aug 2022 07:30:26 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
 d=intel.com; i=@intel.com; q=dns/txt; s=Intel;
 t=1661844627; x=1693380627;
 h=from:to:cc:subject:date:message-id:in-reply-to:
 references:mime-version:content-transfer-encoding;
 bh=k9/Bb0nFsj/7oGrsG6tpQJCSmsT4lrVGDQ4Ipd7L0Tw=;
 b=Qw/8fV1plxTp358eTbUF+JXmI45ic2wE0CYJnlF2MDZ9lg1UF9HY8svg
 yqYwe/IvF+whtVU9VXKcjCR5lLaye799V1YXlSxvpzEDIkDj1TlAIf/W0
 bVEQtRUn7yrHYhiAyjguY/UFUrIpp5z7SRn3YHvijFUW/LpQT1dBQWTAP
 GzmQVAyXjVzxUgB1j0M2xIoa05e3A/Y03fPOlPMhJrDPP8lKdzx5oi/H6
 HbTGtwj2xnrLxlT2aeFNxw7MSgcsbdfmQURLxKNvyacIpnAz8OQxWOi3D
 /t7ev/48MD82P1MD6IZEVfGS6yjHm9wj3vp06dLVZ9wt3TBUXii1HupcP w==;
X-IronPort-AV: E=McAfee;i="6500,9779,10454"; a="274854953"
X-IronPort-AV: E=Sophos;i="5.93,274,1654585200"; d="scan'208";a="274854953"
Received: from orsmga008.jf.intel.com ([10.7.209.65])
 by fmsmga106.fm.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384;
 30 Aug 2022 00:30:24 -0700
X-IronPort-AV: E=Sophos;i="5.93,274,1654585200"; d="scan'208";a="641262711"
Received: from arnesgom-mobl.ger.corp.intel.com (HELO
 ijarvine-MOBL2.ger.corp.intel.com) ([10.252.54.235])
 by orsmga008-auth.jf.intel.com with ESMTP/TLS/ECDHE-RSA-AES256-GCM-SHA384;
 30 Aug 2022 00:30:18 -0700
From: =?UTF-8?q?Ilpo=20J=C3=A4rvinen?= <ilpo.jarvinen@linux.intel.com>
To: Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
 Jiri Slaby <jirislaby@kernel.org>, linux-serial@vger.kernel.org,
 Andy Shevchenko <andriy.shevchenko@linux.intel.com>,
 Jonathan Corbet <corbet@lwn.net>,
 =?UTF-8?q?Ilpo=20J=C3=A4rvinen?= <ilpo.jarvinen@linux.intel.com>,
 Vladimir Zapolskiy <vz@mleia.com>, Russell King <linux@armlinux.org.uk>,
 Richard Genoud <richard.genoud@gmail.com>,
 Nicolas Ferre <nicolas.ferre@microchip.com>,
 Alexandre Belloni <alexandre.belloni@bootlin.com>,
 Claudiu Beznea <claudiu.beznea@microchip.com>,
 Shawn Guo <shawnguo@kernel.org>, Sascha Hauer <s.hauer@pengutronix.de>,
 Pengutronix Kernel Team <kernel@pengutronix.de>,
 Fabio Estevam <festevam@gmail.com>, NXP Linux Team <linux-imx@nxp.com>,
 Maxime Coquelin <mcoquelin.stm32@gmail.com>,
 Alexandre Torgue <alexandre.torgue@foss.st.com>, linux-doc@vger.kernel.org,
 linux-kernel@vger.kernel.org, linux-arm-kernel@lists.infradead.org,
 linux-stm32@st-md-mailman.stormreply.com
Date: Tue, 30 Aug 2022 10:29:56 +0300
Message-Id: <20220830072956.3630-5-ilpo.jarvinen@linux.intel.com>
X-Mailer: git-send-email 2.30.2
In-Reply-To: <20220830072956.3630-1-ilpo.jarvinen@linux.intel.com>
References: <20220830072956.3630-1-ilpo.jarvinen@linux.intel.com>
MIME-Version: 1.0
Cc: Lino Sanfilippo <LinoSanfilippo@gmx.de>
Subject: [Linux-stm32] [PATCH v2 4/4] serial: Add kserial_rs485 to avoid
	wasted space due to .padding
X-BeenThere: linux-stm32@st-md-mailman.stormreply.com
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: <linux-stm32.st-md-mailman.stormreply.com>
List-Unsubscribe: <https://st-md-mailman.stormreply.com/mailman/options/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=unsubscribe>
List-Archive: <http://st-md-mailman.stormreply.com/pipermail/linux-stm32/>
List-Post: <mailto:linux-stm32@st-md-mailman.stormreply.com>
List-Help: <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=help>
List-Subscribe: <https://st-md-mailman.stormreply.com/mailman/listinfo/linux-stm32>, 
 <mailto:linux-stm32-request@st-md-mailman.stormreply.com?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: linux-stm32-bounces@st-md-mailman.stormreply.com
Sender: "Linux-stm32" <linux-stm32-bounces@st-md-mailman.stormreply.com>

VGhlIHN0cnVjdCBzZXJpYWxfcnM0ODUgaGFzIGEgLnBhZGRpbmcgZmllbGQgdG8gbWFrZSB1YXBp
IHVwZGF0ZXMKZWFzaWVyLiBJdCB3YXN0ZXMgc3BhY2UsIGhvd2V2ZXIuIENyZWF0ZSBzdHJ1Y3Qg
a3NlcmlhbF9yczQ4NSB3aGljaCBpcwphIGtlcm5lciBjb3VudGVycGFydCB3L28gcGFkZGluZy4K
CnNlcmlhbF9yczQ4NV90b191c2VyKCkncyByczQ4NSBjYW4gbm93IGJlY29tZSBjb25zdCBhcyBw
YWRkaW5nIGlzIGRlYWx0CndpdGhpbiB0aGUgbG9jYWwgdmFyaWFibGUuCgpTaWduZWQtb2ZmLWJ5
OiBJbHBvIErDpHJ2aW5lbiA8aWxwby5qYXJ2aW5lbkBsaW51eC5pbnRlbC5jb20+Ci0tLQogLi4u
L2RyaXZlci1hcGkvc2VyaWFsL3NlcmlhbC1yczQ4NS5yc3QgICAgICAgIHwgIDIgKy0KIGRyaXZl
cnMvdHR5L3NlcmlhbC84MjUwLzgyNTAuaCAgICAgICAgICAgICAgICB8ICA0ICstCiBkcml2ZXJz
L3R0eS9zZXJpYWwvODI1MC84MjUwX2R3bGliLmMgICAgICAgICAgfCAgNiArLS0KIGRyaXZlcnMv
dHR5L3NlcmlhbC84MjUwLzgyNTBfZXhhci5jICAgICAgICAgICB8IDEyICsrLS0tCiBkcml2ZXJz
L3R0eS9zZXJpYWwvODI1MC84MjUwX2ZpbnRlay5jICAgICAgICAgfCAgNiArLS0KIGRyaXZlcnMv
dHR5L3NlcmlhbC84MjUwLzgyNTBfbHBjMTh4eC5jICAgICAgICB8ICA0ICstCiBkcml2ZXJzL3R0
eS9zZXJpYWwvODI1MC84MjUwX3BjaS5jICAgICAgICAgICAgfCAgNCArLQogZHJpdmVycy90dHkv
c2VyaWFsLzgyNTAvODI1MF9wb3J0LmMgICAgICAgICAgIHwgIDQgKy0KIGRyaXZlcnMvdHR5L3Nl
cmlhbC9hbWJhLXBsMDExLmMgICAgICAgICAgICAgICB8ICA0ICstCiBkcml2ZXJzL3R0eS9zZXJp
YWwvYXI5MzN4X3VhcnQuYyAgICAgICAgICAgICAgfCAgOCArLS0KIGRyaXZlcnMvdHR5L3Nlcmlh
bC9hdG1lbF9zZXJpYWwuYyAgICAgICAgICAgICB8ICA0ICstCiBkcml2ZXJzL3R0eS9zZXJpYWwv
ZnNsX2xwdWFydC5jICAgICAgICAgICAgICAgfCAgNiArLS0KIGRyaXZlcnMvdHR5L3NlcmlhbC9p
bXguYyAgICAgICAgICAgICAgICAgICAgICB8ICA2ICstLQogZHJpdmVycy90dHkvc2VyaWFsL21h
eDMxMHguYyAgICAgICAgICAgICAgICAgIHwgIDQgKy0KIGRyaXZlcnMvdHR5L3NlcmlhbC9tY2Yu
YyAgICAgICAgICAgICAgICAgICAgICB8ICA0ICstCiBkcml2ZXJzL3R0eS9zZXJpYWwvb21hcC1z
ZXJpYWwuYyAgICAgICAgICAgICAgfCAgNiArLS0KIGRyaXZlcnMvdHR5L3NlcmlhbC9zYzE2aXM3
eHguYyAgICAgICAgICAgICAgICB8ICA2ICstLQogZHJpdmVycy90dHkvc2VyaWFsL3NlcmlhbF9j
b3JlLmMgICAgICAgICAgICAgIHwgNTQgKysrKysrKysrKysrKy0tLS0tLQogZHJpdmVycy90dHkv
c2VyaWFsL3N0bTMyLXVzYXJ0LmMgICAgICAgICAgICAgIHwgMTIgKystLS0KIGluY2x1ZGUvbGlu
dXgvc2VyaWFsX2NvcmUuaCAgICAgICAgICAgICAgICAgICB8IDI5ICsrKysrKysrLS0KIGluY2x1
ZGUvdWFwaS9saW51eC9zZXJpYWwuaCAgICAgICAgICAgICAgICAgICB8ICAyICsKIDIxIGZpbGVz
IGNoYW5nZWQsIDExOCBpbnNlcnRpb25zKCspLCA2OSBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQg
YS9Eb2N1bWVudGF0aW9uL2RyaXZlci1hcGkvc2VyaWFsL3NlcmlhbC1yczQ4NS5yc3QgYi9Eb2N1
bWVudGF0aW9uL2RyaXZlci1hcGkvc2VyaWFsL3NlcmlhbC1yczQ4NS5yc3QKaW5kZXggNmViYWQ3
NWM3NGVkLi43ZTQ5NjMzNmEwMWIgMTAwNjQ0Ci0tLSBhL0RvY3VtZW50YXRpb24vZHJpdmVyLWFw
aS9zZXJpYWwvc2VyaWFsLXJzNDg1LnJzdAorKysgYi9Eb2N1bWVudGF0aW9uL2RyaXZlci1hcGkv
c2VyaWFsL3NlcmlhbC1yczQ4NS5yc3QKQEAgLTQxLDcgKzQxLDcgQEAgUlM0ODUgU2VyaWFsIENv
bW11bmljYXRpb25zCiAgICBpbXBsZW1lbnQgdGhlIHJzNDg1X2NvbmZpZyBjYWxsYmFjayBhbmQg
cHJvdmlkZSByczQ4NV9zdXBwb3J0ZWQgaW4gdGhlCiAgICB1YXJ0X3BvcnQgc3RydWN0dXJlLiBU
aGUgc2VyaWFsIGNvcmUgY2FsbHMgcnM0ODVfY29uZmlnIHRvIGRvIHRoZSBkZXZpY2UKICAgIHNw
ZWNpZmljIHBhcnQgaW4gcmVzcG9uc2UgdG8gVElPQ1NSUzQ4NSBpb2N0bCAoc2VlIGJlbG93KS4g
VGhlIHJzNDg1X2NvbmZpZwotICAgY2FsbGJhY2sgcmVjZWl2ZXMgYSBwb2ludGVyIHRvIGEgc2Fu
aXRpemF0ZWQgc2VyaWFsX3JzNDg1IHN0cnVjdHVyZS4gVGhlCisgICBjYWxsYmFjayByZWNlaXZl
cyBhIHBvaW50ZXIgdG8gYSBzYW5pdGl6YXRlZCBrc2VyaWFsX3JzNDg1IHN0cnVjdHVyZS4gVGhl
CiAgICBzZXJpYWxfcnM0ODUgdXNlcnNwYWNlIHByb3ZpZGVzIGlzIHNhbml0aXplZCBiZWZvcmUg
Y2FsbGluZyByczQ4NV9jb25maWcKICAgIHVzaW5nIHJzNDg1X3N1cHBvcnRlZCB0aGF0IGluZGlj
YXRlcyB3aGF0IFJTNDg1IGZlYXR1cmVzIHRoZSBkcml2ZXIgc3VwcG9ydHMKICAgIGZvciB0aGUg
dWFydF9wb3J0LiBUSU9DR1JTNDg1IGlvY3RsIGNhbiBiZSB1c2VkIHRvIHJlYWQgYmFjayB0aGUK
ZGlmZiAtLWdpdCBhL2RyaXZlcnMvdHR5L3NlcmlhbC84MjUwLzgyNTAuaCBiL2RyaXZlcnMvdHR5
L3NlcmlhbC84MjUwLzgyNTAuaAppbmRleCAyODcxNTNkMzI1MzYuLjRlMjJmOGQ1MGU5MSAxMDA2
NDQKLS0tIGEvZHJpdmVycy90dHkvc2VyaWFsLzgyNTAvODI1MC5oCisrKyBiL2RyaXZlcnMvdHR5
L3NlcmlhbC84MjUwLzgyNTAuaApAQCAtMjA0LDExICsyMDQsMTEgQEAgdm9pZCBzZXJpYWw4MjUw
X3JwbV9nZXRfdHgoc3RydWN0IHVhcnRfODI1MF9wb3J0ICpwKTsKIHZvaWQgc2VyaWFsODI1MF9y
cG1fcHV0X3R4KHN0cnVjdCB1YXJ0XzgyNTBfcG9ydCAqcCk7CiAKIGludCBzZXJpYWw4MjUwX2Vt
NDg1X2NvbmZpZyhzdHJ1Y3QgdWFydF9wb3J0ICpwb3J0LCBzdHJ1Y3Qga3Rlcm1pb3MgKnRlcm1p
b3MsCi0JCQkgICAgc3RydWN0IHNlcmlhbF9yczQ4NSAqcnM0ODUpOworCQkJICAgIHN0cnVjdCBr
c2VyaWFsX3JzNDg1ICpyczQ4NSk7CiB2b2lkIHNlcmlhbDgyNTBfZW00ODVfc3RhcnRfdHgoc3Ry
dWN0IHVhcnRfODI1MF9wb3J0ICpwKTsKIHZvaWQgc2VyaWFsODI1MF9lbTQ4NV9zdG9wX3R4KHN0
cnVjdCB1YXJ0XzgyNTBfcG9ydCAqcCk7CiB2b2lkIHNlcmlhbDgyNTBfZW00ODVfZGVzdHJveShz
dHJ1Y3QgdWFydF84MjUwX3BvcnQgKnApOwotZXh0ZXJuIHN0cnVjdCBzZXJpYWxfcnM0ODUgc2Vy
aWFsODI1MF9lbTQ4NV9zdXBwb3J0ZWQ7CitleHRlcm4gc3RydWN0IGtzZXJpYWxfcnM0ODUgc2Vy
aWFsODI1MF9lbTQ4NV9zdXBwb3J0ZWQ7CiAKIC8qIE1DUiA8LT4gVElPQ00gY29udmVyc2lvbiAq
Lwogc3RhdGljIGlubGluZSBpbnQgc2VyaWFsODI1MF9USU9DTV90b19NQ1IoaW50IHRpb2NtKQpk
aWZmIC0tZ2l0IGEvZHJpdmVycy90dHkvc2VyaWFsLzgyNTAvODI1MF9kd2xpYi5jIGIvZHJpdmVy
cy90dHkvc2VyaWFsLzgyNTAvODI1MF9kd2xpYi5jCmluZGV4IGRiZTRkNDRmNjBkNC4uYTYyOGVk
MmMyMzViIDEwMDY0NAotLS0gYS9kcml2ZXJzL3R0eS9zZXJpYWwvODI1MC84MjUwX2R3bGliLmMK
KysrIGIvZHJpdmVycy90dHkvc2VyaWFsLzgyNTAvODI1MF9kd2xpYi5jCkBAIC0xMzQsNyArMTM0
LDcgQEAgc3RhdGljIHZvaWQgZHc4MjUwX3VwZGF0ZV9yYXIoc3RydWN0IHVhcnRfcG9ydCAqcCwg
dTMyIGFkZHIpCiAJCWR3ODI1MF93cml0ZWxfZXh0KHAsIERXX1VBUlRfUkVfRU4sIHJlX2VuKTsK
IH0KIAotc3RhdGljIHZvaWQgZHc4MjUwX3JzNDg1X3NldF9hZGRyKHN0cnVjdCB1YXJ0X3BvcnQg
KnAsIHN0cnVjdCBzZXJpYWxfcnM0ODUgKnJzNDg1LAorc3RhdGljIHZvaWQgZHc4MjUwX3JzNDg1
X3NldF9hZGRyKHN0cnVjdCB1YXJ0X3BvcnQgKnAsIHN0cnVjdCBrc2VyaWFsX3JzNDg1ICpyczQ4
NSwKIAkJCQkgIHN0cnVjdCBrdGVybWlvcyAqdGVybWlvcykKIHsKIAl1MzIgbGNyID0gZHc4MjUw
X3JlYWRsX2V4dChwLCBEV19VQVJUX0xDUl9FWFQpOwpAQCAtMTc3LDcgKzE3Nyw3IEBAIHN0YXRp
YyB2b2lkIGR3ODI1MF9yczQ4NV9zZXRfYWRkcihzdHJ1Y3QgdWFydF9wb3J0ICpwLCBzdHJ1Y3Qg
c2VyaWFsX3JzNDg1ICpyczQ4CiB9CiAKIHN0YXRpYyBpbnQgZHc4MjUwX3JzNDg1X2NvbmZpZyhz
dHJ1Y3QgdWFydF9wb3J0ICpwLCBzdHJ1Y3Qga3Rlcm1pb3MgKnRlcm1pb3MsCi0JCQkgICAgICAg
c3RydWN0IHNlcmlhbF9yczQ4NSAqcnM0ODUpCisJCQkgICAgICAgc3RydWN0IGtzZXJpYWxfcnM0
ODUgKnJzNDg1KQogewogCXUzMiB0Y3I7CiAKQEAgLTIzMiw3ICsyMzIsNyBAQCBzdGF0aWMgYm9v
bCBkdzgyNTBfZGV0ZWN0X3JzNDg1X2h3KHN0cnVjdCB1YXJ0X3BvcnQgKnApCiAJcmV0dXJuIHJl
ZzsKIH0KIAotc3RhdGljIGNvbnN0IHN0cnVjdCBzZXJpYWxfcnM0ODUgZHc4MjUwX3JzNDg1X3N1
cHBvcnRlZCA9IHsKK3N0YXRpYyBjb25zdCBzdHJ1Y3Qga3NlcmlhbF9yczQ4NSBkdzgyNTBfcnM0
ODVfc3VwcG9ydGVkID0gewogCS5mbGFncyA9IFNFUl9SUzQ4NV9FTkFCTEVEIHwgU0VSX1JTNDg1
X1JYX0RVUklOR19UWCB8IFNFUl9SUzQ4NV9SVFNfT05fU0VORCB8CiAJCSBTRVJfUlM0ODVfUlRT
X0FGVEVSX1NFTkQgfCBTRVJfUlM0ODVfQUREUkIgfCBTRVJfUlM0ODVfQUREUl9SRUNWIHwKIAkJ
IFNFUl9SUzQ4NV9BRERSX0RFU1QsCmRpZmYgLS1naXQgYS9kcml2ZXJzL3R0eS9zZXJpYWwvODI1
MC84MjUwX2V4YXIuYyBiL2RyaXZlcnMvdHR5L3NlcmlhbC84MjUwLzgyNTBfZXhhci5jCmluZGV4
IDMxNGEwNWUwMDlkZi4uOWZlZjIwNTZhOWI1IDEwMDY0NAotLS0gYS9kcml2ZXJzL3R0eS9zZXJp
YWwvODI1MC84MjUwX2V4YXIuYworKysgYi9kcml2ZXJzL3R0eS9zZXJpYWwvODI1MC84MjUwX2V4
YXIuYwpAQCAtMTEzLDggKzExMyw4IEBAIHN0cnVjdCBleGFyODI1MDsKIAogc3RydWN0IGV4YXI4
MjUwX3BsYXRmb3JtIHsKIAlpbnQgKCpyczQ4NV9jb25maWcpKHN0cnVjdCB1YXJ0X3BvcnQgKnBv
cnQsIHN0cnVjdCBrdGVybWlvcyAqdGVybWlvcywKLQkJCSAgICBzdHJ1Y3Qgc2VyaWFsX3JzNDg1
ICpyczQ4NSk7Ci0JY29uc3Qgc3RydWN0IHNlcmlhbF9yczQ4NSAqcnM0ODVfc3VwcG9ydGVkOwor
CQkJICAgIHN0cnVjdCBrc2VyaWFsX3JzNDg1ICpyczQ4NSk7CisJY29uc3Qgc3RydWN0IGtzZXJp
YWxfcnM0ODUgKnJzNDg1X3N1cHBvcnRlZDsKIAlpbnQgKCpyZWdpc3Rlcl9ncGlvKShzdHJ1Y3Qg
cGNpX2RldiAqLCBzdHJ1Y3QgdWFydF84MjUwX3BvcnQgKik7CiAJdm9pZCAoKnVucmVnaXN0ZXJf
Z3Bpbykoc3RydWN0IHVhcnRfODI1MF9wb3J0ICopOwogfTsKQEAgLTQxMSw3ICs0MTEsNyBAQCBz
dGF0aWMgdm9pZCB4cjE3djM1eF91bnJlZ2lzdGVyX2dwaW8oc3RydWN0IHVhcnRfODI1MF9wb3J0
ICpwb3J0KQogfQogCiBzdGF0aWMgaW50IGdlbmVyaWNfcnM0ODVfY29uZmlnKHN0cnVjdCB1YXJ0
X3BvcnQgKnBvcnQsIHN0cnVjdCBrdGVybWlvcyAqdGVybWlvcywKLQkJCQlzdHJ1Y3Qgc2VyaWFs
X3JzNDg1ICpyczQ4NSkKKwkJCQlzdHJ1Y3Qga3NlcmlhbF9yczQ4NSAqcnM0ODUpCiB7CiAJYm9v
bCBpc19yczQ4NSA9ICEhKHJzNDg1LT5mbGFncyAmIFNFUl9SUzQ4NV9FTkFCTEVEKTsKIAl1OCBf
X2lvbWVtICpwID0gcG9ydC0+bWVtYmFzZTsKQEAgLTQzMSw3ICs0MzEsNyBAQCBzdGF0aWMgaW50
IGdlbmVyaWNfcnM0ODVfY29uZmlnKHN0cnVjdCB1YXJ0X3BvcnQgKnBvcnQsIHN0cnVjdCBrdGVy
bWlvcyAqdGVybWlvcwogCXJldHVybiAwOwogfQogCi1zdGF0aWMgY29uc3Qgc3RydWN0IHNlcmlh
bF9yczQ4NSBnZW5lcmljX3JzNDg1X3N1cHBvcnRlZCA9IHsKK3N0YXRpYyBjb25zdCBzdHJ1Y3Qg
a3NlcmlhbF9yczQ4NSBnZW5lcmljX3JzNDg1X3N1cHBvcnRlZCA9IHsKIAkuZmxhZ3MgPSBTRVJf
UlM0ODVfRU5BQkxFRCwKIH07CiAKQEAgLTQ0Myw3ICs0NDMsNyBAQCBzdGF0aWMgY29uc3Qgc3Ry
dWN0IGV4YXI4MjUwX3BsYXRmb3JtIGV4YXI4MjUwX2RlZmF1bHRfcGxhdGZvcm0gPSB7CiB9Owog
CiBzdGF0aWMgaW50IGlvdDIwNDBfcnM0ODVfY29uZmlnKHN0cnVjdCB1YXJ0X3BvcnQgKnBvcnQs
IHN0cnVjdCBrdGVybWlvcyAqdGVybWlvcywKLQkJCQlzdHJ1Y3Qgc2VyaWFsX3JzNDg1ICpyczQ4
NSkKKwkJCQlzdHJ1Y3Qga3NlcmlhbF9yczQ4NSAqcnM0ODUpCiB7CiAJYm9vbCBpc19yczQ4NSA9
ICEhKHJzNDg1LT5mbGFncyAmIFNFUl9SUzQ4NV9FTkFCTEVEKTsKIAl1OCBfX2lvbWVtICpwID0g
cG9ydC0+bWVtYmFzZTsKQEAgLTQ3NSw3ICs0NzUsNyBAQCBzdGF0aWMgaW50IGlvdDIwNDBfcnM0
ODVfY29uZmlnKHN0cnVjdCB1YXJ0X3BvcnQgKnBvcnQsIHN0cnVjdCBrdGVybWlvcyAqdGVybWlv
cwogCXJldHVybiBnZW5lcmljX3JzNDg1X2NvbmZpZyhwb3J0LCB0ZXJtaW9zLCByczQ4NSk7CiB9
CiAKLXN0YXRpYyBjb25zdCBzdHJ1Y3Qgc2VyaWFsX3JzNDg1IGlvdDIwNDBfcnM0ODVfc3VwcG9y
dGVkID0geworc3RhdGljIGNvbnN0IHN0cnVjdCBrc2VyaWFsX3JzNDg1IGlvdDIwNDBfcnM0ODVf
c3VwcG9ydGVkID0gewogCS5mbGFncyA9IFNFUl9SUzQ4NV9FTkFCTEVEIHwgU0VSX1JTNDg1X1JY
X0RVUklOR19UWCB8IFNFUl9SUzQ4NV9URVJNSU5BVEVfQlVTLAogfTsKIApkaWZmIC0tZ2l0IGEv
ZHJpdmVycy90dHkvc2VyaWFsLzgyNTAvODI1MF9maW50ZWsuYyBiL2RyaXZlcnMvdHR5L3Nlcmlh
bC84MjUwLzgyNTBfZmludGVrLmMKaW5kZXggNjViNmIzY2JhZmY2Li5kM2QyZTI1ZGQwNmIgMTAw
NjQ0Ci0tLSBhL2RyaXZlcnMvdHR5L3NlcmlhbC84MjUwLzgyNTBfZmludGVrLmMKKysrIGIvZHJp
dmVycy90dHkvc2VyaWFsLzgyNTAvODI1MF9maW50ZWsuYwpAQCAtMTkyLDcgKzE5Miw3IEBAIHN0
YXRpYyBpbnQgZmludGVrXzgyNTBfZ2V0X2xkbl9yYW5nZShzdHJ1Y3QgZmludGVrXzgyNTAgKnBk
YXRhLCBpbnQgKm1pbiwKIH0KIAogc3RhdGljIGludCBmaW50ZWtfODI1MF9yczQ4NV9jb25maWco
c3RydWN0IHVhcnRfcG9ydCAqcG9ydCwgc3RydWN0IGt0ZXJtaW9zICp0ZXJtaW9zLAotCQkJICAg
ICAgc3RydWN0IHNlcmlhbF9yczQ4NSAqcnM0ODUpCisJCQkgICAgICBzdHJ1Y3Qga3NlcmlhbF9y
czQ4NSAqcnM0ODUpCiB7CiAJdWludDhfdCBjb25maWcgPSAwOwogCXN0cnVjdCBmaW50ZWtfODI1
MCAqcGRhdGEgPSBwb3J0LT5wcml2YXRlX2RhdGE7CkBAIC00MTEsMTMgKzQxMSwxMyBAQCBzdGF0
aWMgaW50IHByb2JlX3NldHVwX3BvcnQoc3RydWN0IGZpbnRla184MjUwICpwZGF0YSwKIH0KIAog
LyogT25seSB0aGUgZmlyc3QgcG9ydCBzdXBwb3J0cyBkZWxheXMgKi8KLXN0YXRpYyBjb25zdCBz
dHJ1Y3Qgc2VyaWFsX3JzNDg1IGZpbnRla184MjUwX3JzNDg1X3N1cHBvcnRlZF9wb3J0MCA9IHsK
K3N0YXRpYyBjb25zdCBzdHJ1Y3Qga3NlcmlhbF9yczQ4NSBmaW50ZWtfODI1MF9yczQ4NV9zdXBw
b3J0ZWRfcG9ydDAgPSB7CiAJLmZsYWdzID0gU0VSX1JTNDg1X0VOQUJMRUQgfCBTRVJfUlM0ODVf
UlRTX09OX1NFTkQgfCBTRVJfUlM0ODVfUlRTX0FGVEVSX1NFTkQsCiAJLmRlbGF5X3J0c19iZWZv
cmVfc2VuZCA9IDEsCiAJLmRlbGF5X3J0c19hZnRlcl9zZW5kID0gMSwKIH07CiAKLXN0YXRpYyBj
b25zdCBzdHJ1Y3Qgc2VyaWFsX3JzNDg1IGZpbnRla184MjUwX3JzNDg1X3N1cHBvcnRlZCA9IHsK
K3N0YXRpYyBjb25zdCBzdHJ1Y3Qga3NlcmlhbF9yczQ4NSBmaW50ZWtfODI1MF9yczQ4NV9zdXBw
b3J0ZWQgPSB7CiAJLmZsYWdzID0gU0VSX1JTNDg1X0VOQUJMRUQgfCBTRVJfUlM0ODVfUlRTX09O
X1NFTkQgfCBTRVJfUlM0ODVfUlRTX0FGVEVSX1NFTkQsCiB9OwogCmRpZmYgLS1naXQgYS9kcml2
ZXJzL3R0eS9zZXJpYWwvODI1MC84MjUwX2xwYzE4eHguYyBiL2RyaXZlcnMvdHR5L3NlcmlhbC84
MjUwLzgyNTBfbHBjMTh4eC5jCmluZGV4IDZkYzg1YWFiYTVkMC4uMDYxOTQyNzY4M2NmIDEwMDY0
NAotLS0gYS9kcml2ZXJzL3R0eS9zZXJpYWwvODI1MC84MjUwX2xwYzE4eHguYworKysgYi9kcml2
ZXJzL3R0eS9zZXJpYWwvODI1MC84MjUwX2xwYzE4eHguYwpAQCAtMzMsNyArMzMsNyBAQCBzdHJ1
Y3QgbHBjMTh4eF91YXJ0X2RhdGEgewogfTsKIAogc3RhdGljIGludCBscGMxOHh4X3JzNDg1X2Nv
bmZpZyhzdHJ1Y3QgdWFydF9wb3J0ICpwb3J0LCBzdHJ1Y3Qga3Rlcm1pb3MgKnRlcm1pb3MsCi0J
CQkJc3RydWN0IHNlcmlhbF9yczQ4NSAqcnM0ODUpCisJCQkJc3RydWN0IGtzZXJpYWxfcnM0ODUg
KnJzNDg1KQogewogCXN0cnVjdCB1YXJ0XzgyNTBfcG9ydCAqdXAgPSB1cF90b191ODI1MHAocG9y
dCk7CiAJdTMyIHJzNDg1X2N0cmxfcmVnID0gMDsKQEAgLTgxLDcgKzgxLDcgQEAgc3RhdGljIHZv
aWQgbHBjMTh4eF91YXJ0X3NlcmlhbF9vdXQoc3RydWN0IHVhcnRfcG9ydCAqcCwgaW50IG9mZnNl
dCwgaW50IHZhbHVlKQogCXdyaXRlbCh2YWx1ZSwgcC0+bWVtYmFzZSArIG9mZnNldCk7CiB9CiAK
LXN0YXRpYyBjb25zdCBzdHJ1Y3Qgc2VyaWFsX3JzNDg1IGxwYzE4eHhfcnM0ODVfc3VwcG9ydGVk
ID0geworc3RhdGljIGNvbnN0IHN0cnVjdCBrc2VyaWFsX3JzNDg1IGxwYzE4eHhfcnM0ODVfc3Vw
cG9ydGVkID0gewogCS5mbGFncyA9IFNFUl9SUzQ4NV9FTkFCTEVEIHwgU0VSX1JTNDg1X1JUU19P
Tl9TRU5EIHwgU0VSX1JTNDg1X1JUU19BRlRFUl9TRU5ELAogCS5kZWxheV9ydHNfYWZ0ZXJfc2Vu
ZCA9IDEsCiAJLyogRGVsYXkgUlRTIGJlZm9yZSBzZW5kIGlzIG5vdCBzdXBwb3J0ZWQgKi8KZGlm
ZiAtLWdpdCBhL2RyaXZlcnMvdHR5L3NlcmlhbC84MjUwLzgyNTBfcGNpLmMgYi9kcml2ZXJzL3R0
eS9zZXJpYWwvODI1MC84MjUwX3BjaS5jCmluZGV4IDZmNjZkYzJlYmFjYy4uODY3NWIwZDk2NThk
IDEwMDY0NAotLS0gYS9kcml2ZXJzL3R0eS9zZXJpYWwvODI1MC84MjUwX3BjaS5jCisrKyBiL2Ry
aXZlcnMvdHR5L3NlcmlhbC84MjUwLzgyNTBfcGNpLmMKQEAgLTE1NTQsNyArMTU1NCw3IEBAIHBj
aV9icmNtX3RydW1hbmFnZV9zZXR1cChzdHJ1Y3Qgc2VyaWFsX3ByaXZhdGUgKnByaXYsCiAKIC8q
IFdlIHNob3VsZCBkbyBwcm9wZXIgSC9XIHRyYW5zY2VpdmVyIHNldHRpbmcgYmVmb3JlIGNoYW5n
ZSB0byBSUzQ4NSBtb2RlICovCiBzdGF0aWMgaW50IHBjaV9maW50ZWtfcnM0ODVfY29uZmlnKHN0
cnVjdCB1YXJ0X3BvcnQgKnBvcnQsIHN0cnVjdCBrdGVybWlvcyAqdGVybWlvcywKLQkJCSAgICAg
ICBzdHJ1Y3Qgc2VyaWFsX3JzNDg1ICpyczQ4NSkKKwkJCSAgICAgICBzdHJ1Y3Qga3NlcmlhbF9y
czQ4NSAqcnM0ODUpCiB7CiAJc3RydWN0IHBjaV9kZXYgKnBjaV9kZXYgPSB0b19wY2lfZGV2KHBv
cnQtPmRldik7CiAJdTggc2V0dGluZzsKQEAgLTE1ODMsNyArMTU4Myw3IEBAIHN0YXRpYyBpbnQg
cGNpX2ZpbnRla19yczQ4NV9jb25maWcoc3RydWN0IHVhcnRfcG9ydCAqcG9ydCwgc3RydWN0IGt0
ZXJtaW9zICp0ZXJtCiAJcmV0dXJuIDA7CiB9CiAKLXN0YXRpYyBjb25zdCBzdHJ1Y3Qgc2VyaWFs
X3JzNDg1IHBjaV9maW50ZWtfcnM0ODVfc3VwcG9ydGVkID0geworc3RhdGljIGNvbnN0IHN0cnVj
dCBrc2VyaWFsX3JzNDg1IHBjaV9maW50ZWtfcnM0ODVfc3VwcG9ydGVkID0gewogCS5mbGFncyA9
IFNFUl9SUzQ4NV9FTkFCTEVEIHwgU0VSX1JTNDg1X1JUU19PTl9TRU5ELAogCS8qIEY4MTUwNC81
MDgvNTEyIGRvZXMgbm90IHN1cHBvcnQgUlRTIGRlbGF5IGJlZm9yZSBvciBhZnRlciBzZW5kICov
CiB9OwpkaWZmIC0tZ2l0IGEvZHJpdmVycy90dHkvc2VyaWFsLzgyNTAvODI1MF9wb3J0LmMgYi9k
cml2ZXJzL3R0eS9zZXJpYWwvODI1MC84MjUwX3BvcnQuYwppbmRleCAzOWIzNWE2MTk1OGMuLjIz
NDViNmZiYWM2ZCAxMDA2NDQKLS0tIGEvZHJpdmVycy90dHkvc2VyaWFsLzgyNTAvODI1MF9wb3J0
LmMKKysrIGIvZHJpdmVycy90dHkvc2VyaWFsLzgyNTAvODI1MF9wb3J0LmMKQEAgLTY0Nyw3ICs2
NDcsNyBAQCB2b2lkIHNlcmlhbDgyNTBfZW00ODVfZGVzdHJveShzdHJ1Y3QgdWFydF84MjUwX3Bv
cnQgKnApCiB9CiBFWFBPUlRfU1lNQk9MX0dQTChzZXJpYWw4MjUwX2VtNDg1X2Rlc3Ryb3kpOwog
Ci1zdHJ1Y3Qgc2VyaWFsX3JzNDg1IHNlcmlhbDgyNTBfZW00ODVfc3VwcG9ydGVkID0geworc3Ry
dWN0IGtzZXJpYWxfcnM0ODUgc2VyaWFsODI1MF9lbTQ4NV9zdXBwb3J0ZWQgPSB7CiAJLmZsYWdz
ID0gU0VSX1JTNDg1X0VOQUJMRUQgfCBTRVJfUlM0ODVfUlRTX09OX1NFTkQgfCBTRVJfUlM0ODVf
UlRTX0FGVEVSX1NFTkQgfAogCQkgU0VSX1JTNDg1X1RFUk1JTkFURV9CVVMgfCBTRVJfUlM0ODVf
UlhfRFVSSU5HX1RYLAogCS5kZWxheV9ydHNfYmVmb3JlX3NlbmQgPSAxLApAQCAtNjY1LDcgKzY2
NSw3IEBAIEVYUE9SVF9TWU1CT0xfR1BMKHNlcmlhbDgyNTBfZW00ODVfc3VwcG9ydGVkKTsKICAq
IGhhcmR3YXJlLCByZWx5aW5nIG9uIHNvZnR3YXJlIGVtdWxhdGlvbiBpbnN0ZWFkLgogICovCiBp
bnQgc2VyaWFsODI1MF9lbTQ4NV9jb25maWcoc3RydWN0IHVhcnRfcG9ydCAqcG9ydCwgc3RydWN0
IGt0ZXJtaW9zICp0ZXJtaW9zLAotCQkJICAgIHN0cnVjdCBzZXJpYWxfcnM0ODUgKnJzNDg1KQor
CQkJICAgIHN0cnVjdCBrc2VyaWFsX3JzNDg1ICpyczQ4NSkKIHsKIAlzdHJ1Y3QgdWFydF84MjUw
X3BvcnQgKnVwID0gdXBfdG9fdTgyNTBwKHBvcnQpOwogCmRpZmYgLS1naXQgYS9kcml2ZXJzL3R0
eS9zZXJpYWwvYW1iYS1wbDAxMS5jIGIvZHJpdmVycy90dHkvc2VyaWFsL2FtYmEtcGwwMTEuYwpp
bmRleCAxNWYwZTRkODhjNWEuLmU3OGNkMDc1OWRjMSAxMDA2NDQKLS0tIGEvZHJpdmVycy90dHkv
c2VyaWFsL2FtYmEtcGwwMTEuYworKysgYi9kcml2ZXJzL3R0eS9zZXJpYWwvYW1iYS1wbDAxMS5j
CkBAIC0yMjE1LDcgKzIyMTUsNyBAQCBzdGF0aWMgaW50IHBsMDExX3ZlcmlmeV9wb3J0KHN0cnVj
dCB1YXJ0X3BvcnQgKnBvcnQsIHN0cnVjdCBzZXJpYWxfc3RydWN0ICpzZXIpCiB9CiAKIHN0YXRp
YyBpbnQgcGwwMTFfcnM0ODVfY29uZmlnKHN0cnVjdCB1YXJ0X3BvcnQgKnBvcnQsIHN0cnVjdCBr
dGVybWlvcyAqdGVybWlvcywKLQkJCSAgICAgIHN0cnVjdCBzZXJpYWxfcnM0ODUgKnJzNDg1KQor
CQkJICAgICAgc3RydWN0IGtzZXJpYWxfcnM0ODUgKnJzNDg1KQogewogCXN0cnVjdCB1YXJ0X2Ft
YmFfcG9ydCAqdWFwID0KIAkJY29udGFpbmVyX29mKHBvcnQsIHN0cnVjdCB1YXJ0X2FtYmFfcG9y
dCwgcG9ydCk7CkBAIC0yNzY1LDcgKzI3NjUsNyBAQCBzdGF0aWMgaW50IHBsMDExX3JlZ2lzdGVy
X3BvcnQoc3RydWN0IHVhcnRfYW1iYV9wb3J0ICp1YXApCiAJcmV0dXJuIHJldDsKIH0KIAotc3Rh
dGljIGNvbnN0IHN0cnVjdCBzZXJpYWxfcnM0ODUgcGwwMTFfcnM0ODVfc3VwcG9ydGVkID0gewor
c3RhdGljIGNvbnN0IHN0cnVjdCBrc2VyaWFsX3JzNDg1IHBsMDExX3JzNDg1X3N1cHBvcnRlZCA9
IHsKIAkuZmxhZ3MgPSBTRVJfUlM0ODVfRU5BQkxFRCB8IFNFUl9SUzQ4NV9SVFNfT05fU0VORCB8
IFNFUl9SUzQ4NV9SVFNfQUZURVJfU0VORCB8CiAJCSBTRVJfUlM0ODVfUlhfRFVSSU5HX1RYLAog
CS5kZWxheV9ydHNfYmVmb3JlX3NlbmQgPSAxLApkaWZmIC0tZ2l0IGEvZHJpdmVycy90dHkvc2Vy
aWFsL2FyOTMzeF91YXJ0LmMgYi9kcml2ZXJzL3R0eS9zZXJpYWwvYXI5MzN4X3VhcnQuYwppbmRl
eCAzMmNhZWFjMTI5ODUuLjMwYzcxNmI0YTEwNSAxMDA2NDQKLS0tIGEvZHJpdmVycy90dHkvc2Vy
aWFsL2FyOTMzeF91YXJ0LmMKKysrIGIvZHJpdmVycy90dHkvc2VyaWFsL2FyOTMzeF91YXJ0LmMK
QEAgLTM5MSw3ICszOTEsNyBAQCBzdGF0aWMgdm9pZCBhcjkzM3hfdWFydF9yeF9jaGFycyhzdHJ1
Y3QgYXI5MzN4X3VhcnRfcG9ydCAqdXApCiBzdGF0aWMgdm9pZCBhcjkzM3hfdWFydF90eF9jaGFy
cyhzdHJ1Y3QgYXI5MzN4X3VhcnRfcG9ydCAqdXApCiB7CiAJc3RydWN0IGNpcmNfYnVmICp4bWl0
ID0gJnVwLT5wb3J0LnN0YXRlLT54bWl0OwotCXN0cnVjdCBzZXJpYWxfcnM0ODUgKnJzNDg1Y29u
ZiA9ICZ1cC0+cG9ydC5yczQ4NTsKKwlzdHJ1Y3Qga3NlcmlhbF9yczQ4NSAqcnM0ODVjb25mID0g
JnVwLT5wb3J0LnJzNDg1OwogCWludCBjb3VudDsKIAlib29sIGhhbGZfZHVwbGV4X3NlbmQgPSBm
YWxzZTsKIApAQCAtNTgxLDcgKzU4MSw3IEBAIHN0YXRpYyBjb25zdCBzdHJ1Y3QgdWFydF9vcHMg
YXI5MzN4X3VhcnRfb3BzID0gewogfTsKIAogc3RhdGljIGludCBhcjkzM3hfY29uZmlnX3JzNDg1
KHN0cnVjdCB1YXJ0X3BvcnQgKnBvcnQsIHN0cnVjdCBrdGVybWlvcyAqdGVybWlvcywKLQkJCQlz
dHJ1Y3Qgc2VyaWFsX3JzNDg1ICpyczQ4NWNvbmYpCisJCQkJc3RydWN0IGtzZXJpYWxfcnM0ODUg
KnJzNDg1Y29uZikKIHsKIAlyZXR1cm4gMDsKIH0KQEAgLTY5Myw4ICs2OTMsOCBAQCBzdGF0aWMg
c3RydWN0IHVhcnRfZHJpdmVyIGFyOTMzeF91YXJ0X2RyaXZlciA9IHsKIAkuY29ucwkJPSBOVUxM
LCAvKiBmaWxsZWQgaW4gcnVudGltZSAqLwogfTsKIAotc3RhdGljIGNvbnN0IHN0cnVjdCBzZXJp
YWxfcnM0ODUgYXI5MzN4X25vX3JzNDg1ID0ge307Ci1zdGF0aWMgY29uc3Qgc3RydWN0IHNlcmlh
bF9yczQ4NSBhcjkzM3hfcnM0ODVfc3VwcG9ydGVkID0geworc3RhdGljIGNvbnN0IHN0cnVjdCBr
c2VyaWFsX3JzNDg1IGFyOTMzeF9ub19yczQ4NSA9IHt9Oworc3RhdGljIGNvbnN0IHN0cnVjdCBr
c2VyaWFsX3JzNDg1IGFyOTMzeF9yczQ4NV9zdXBwb3J0ZWQgPSB7CiAJLmZsYWdzID0gU0VSX1JT
NDg1X0VOQUJMRUQgfCBTRVJfUlM0ODVfUlRTX09OX1NFTkQgfCBTRVJfUlM0ODVfUlRTX0FGVEVS
X1NFTkQsCiB9OwogCmRpZmYgLS1naXQgYS9kcml2ZXJzL3R0eS9zZXJpYWwvYXRtZWxfc2VyaWFs
LmMgYi9kcml2ZXJzL3R0eS9zZXJpYWwvYXRtZWxfc2VyaWFsLmMKaW5kZXggMzBiYTllZWY3YjM5
Li5iZTAyOTY3MTQ1ODUgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvdHR5L3NlcmlhbC9hdG1lbF9zZXJp
YWwuYworKysgYi9kcml2ZXJzL3R0eS9zZXJpYWwvYXRtZWxfc2VyaWFsLmMKQEAgLTI4NCw3ICsy
ODQsNyBAQCBzdGF0aWMgdm9pZCBhdG1lbF90YXNrbGV0X3NjaGVkdWxlKHN0cnVjdCBhdG1lbF91
YXJ0X3BvcnQgKmF0bWVsX3BvcnQsCiAKIC8qIEVuYWJsZSBvciBkaXNhYmxlIHRoZSByczQ4NSBz
dXBwb3J0ICovCiBzdGF0aWMgaW50IGF0bWVsX2NvbmZpZ19yczQ4NShzdHJ1Y3QgdWFydF9wb3J0
ICpwb3J0LCBzdHJ1Y3Qga3Rlcm1pb3MgKnRlcm1pb3MsCi0JCQkgICAgICBzdHJ1Y3Qgc2VyaWFs
X3JzNDg1ICpyczQ4NWNvbmYpCisJCQkgICAgICBzdHJ1Y3Qga3NlcmlhbF9yczQ4NSAqcnM0ODVj
b25mKQogewogCXN0cnVjdCBhdG1lbF91YXJ0X3BvcnQgKmF0bWVsX3BvcnQgPSB0b19hdG1lbF91
YXJ0X3BvcnQocG9ydCk7CiAJdW5zaWduZWQgaW50IG1vZGU7CkBAIC0yNDcxLDcgKzI0NzEsNyBA
QCBzdGF0aWMgY29uc3Qgc3RydWN0IHVhcnRfb3BzIGF0bWVsX3BvcHMgPSB7CiAjZW5kaWYKIH07
CiAKLXN0YXRpYyBjb25zdCBzdHJ1Y3Qgc2VyaWFsX3JzNDg1IGF0bWVsX3JzNDg1X3N1cHBvcnRl
ZCA9IHsKK3N0YXRpYyBjb25zdCBzdHJ1Y3Qga3NlcmlhbF9yczQ4NSBhdG1lbF9yczQ4NV9zdXBw
b3J0ZWQgPSB7CiAJLmZsYWdzID0gU0VSX1JTNDg1X0VOQUJMRUQgfCBTRVJfUlM0ODVfUlRTX0FG
VEVSX1NFTkQgfCBTRVJfUlM0ODVfUlhfRFVSSU5HX1RYLAogCS5kZWxheV9ydHNfYmVmb3JlX3Nl
bmQgPSAxLAogCS5kZWxheV9ydHNfYWZ0ZXJfc2VuZCA9IDEsCmRpZmYgLS1naXQgYS9kcml2ZXJz
L3R0eS9zZXJpYWwvZnNsX2xwdWFydC5jIGIvZHJpdmVycy90dHkvc2VyaWFsL2ZzbF9scHVhcnQu
YwppbmRleCBmNmMzM2NkMjI4YzguLjdiMjhjYjhiZWUxZSAxMDA2NDQKLS0tIGEvZHJpdmVycy90
dHkvc2VyaWFsL2ZzbF9scHVhcnQuYworKysgYi9kcml2ZXJzL3R0eS9zZXJpYWwvZnNsX2xwdWFy
dC5jCkBAIC0xMzc0LDcgKzEzNzQsNyBAQCBzdGF0aWMgdm9pZCBscHVhcnRfZG1hX3J4X2ZyZWUo
c3RydWN0IHVhcnRfcG9ydCAqcG9ydCkKIH0KIAogc3RhdGljIGludCBscHVhcnRfY29uZmlnX3Jz
NDg1KHN0cnVjdCB1YXJ0X3BvcnQgKnBvcnQsIHN0cnVjdCBrdGVybWlvcyAqdGVybWlvcywKLQkJ
CXN0cnVjdCBzZXJpYWxfcnM0ODUgKnJzNDg1KQorCQkJc3RydWN0IGtzZXJpYWxfcnM0ODUgKnJz
NDg1KQogewogCXN0cnVjdCBscHVhcnRfcG9ydCAqc3BvcnQgPSBjb250YWluZXJfb2YocG9ydCwK
IAkJCXN0cnVjdCBscHVhcnRfcG9ydCwgcG9ydCk7CkBAIC0xNDA0LDcgKzE0MDQsNyBAQCBzdGF0
aWMgaW50IGxwdWFydF9jb25maWdfcnM0ODUoc3RydWN0IHVhcnRfcG9ydCAqcG9ydCwgc3RydWN0
IGt0ZXJtaW9zICp0ZXJtaW9zLAogfQogCiBzdGF0aWMgaW50IGxwdWFydDMyX2NvbmZpZ19yczQ4
NShzdHJ1Y3QgdWFydF9wb3J0ICpwb3J0LCBzdHJ1Y3Qga3Rlcm1pb3MgKnRlcm1pb3MsCi0JCQlz
dHJ1Y3Qgc2VyaWFsX3JzNDg1ICpyczQ4NSkKKwkJCXN0cnVjdCBrc2VyaWFsX3JzNDg1ICpyczQ4
NSkKIHsKIAlzdHJ1Y3QgbHB1YXJ0X3BvcnQgKnNwb3J0ID0gY29udGFpbmVyX29mKHBvcnQsCiAJ
CQlzdHJ1Y3QgbHB1YXJ0X3BvcnQsIHBvcnQpOwpAQCAtMjYzMyw3ICsyNjMzLDcgQEAgc3RhdGlj
IHN0cnVjdCB1YXJ0X2RyaXZlciBscHVhcnRfcmVnID0gewogCS5jb25zCQk9IExQVUFSVF9DT05T
T0xFLAogfTsKIAotc3RhdGljIGNvbnN0IHN0cnVjdCBzZXJpYWxfcnM0ODUgbHB1YXJ0X3JzNDg1
X3N1cHBvcnRlZCA9IHsKK3N0YXRpYyBjb25zdCBzdHJ1Y3Qga3NlcmlhbF9yczQ4NSBscHVhcnRf
cnM0ODVfc3VwcG9ydGVkID0gewogCS5mbGFncyA9IFNFUl9SUzQ4NV9FTkFCTEVEIHwgU0VSX1JT
NDg1X1JUU19PTl9TRU5EIHwgU0VSX1JTNDg1X1JUU19BRlRFUl9TRU5ELAogCS8qIGRlbGF5X3J0
c18qIGFuZCBSWF9EVVJJTkdfVFggYXJlIG5vdCBzdXBwb3J0ZWQgKi8KIH07CmRpZmYgLS1naXQg
YS9kcml2ZXJzL3R0eS9zZXJpYWwvaW14LmMgYi9kcml2ZXJzL3R0eS9zZXJpYWwvaW14LmMKaW5k
ZXggNTIyNDQ1YThmNjY2Li4wNzY4ZTgyNzAxNTMgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvdHR5L3Nl
cmlhbC9pbXguYworKysgYi9kcml2ZXJzL3R0eS9zZXJpYWwvaW14LmMKQEAgLTE5MDgsNyArMTkw
OCw3IEBAIHN0YXRpYyB2b2lkIGlteF91YXJ0X3BvbGxfcHV0X2NoYXIoc3RydWN0IHVhcnRfcG9y
dCAqcG9ydCwgdW5zaWduZWQgY2hhciBjKQogCiAvKiBjYWxsZWQgd2l0aCBwb3J0LmxvY2sgdGFr
ZW4gYW5kIGlycXMgb2ZmIG9yIGZyb20gLnByb2JlIHdpdGhvdXQgbG9ja2luZyAqLwogc3RhdGlj
IGludCBpbXhfdWFydF9yczQ4NV9jb25maWcoc3RydWN0IHVhcnRfcG9ydCAqcG9ydCwgc3RydWN0
IGt0ZXJtaW9zICp0ZXJtaW9zLAotCQkJCSBzdHJ1Y3Qgc2VyaWFsX3JzNDg1ICpyczQ4NWNvbmYp
CisJCQkJIHN0cnVjdCBrc2VyaWFsX3JzNDg1ICpyczQ4NWNvbmYpCiB7CiAJc3RydWN0IGlteF9w
b3J0ICpzcG9ydCA9IChzdHJ1Y3QgaW14X3BvcnQgKilwb3J0OwogCXUzMiB1Y3IyOwpAQCAtMjE5
Niw4ICsyMTk2LDggQEAgc3RhdGljIGVudW0gaHJ0aW1lcl9yZXN0YXJ0IGlteF90cmlnZ2VyX3N0
b3BfdHgoc3RydWN0IGhydGltZXIgKnQpCiAJcmV0dXJuIEhSVElNRVJfTk9SRVNUQVJUOwogfQog
Ci1zdGF0aWMgY29uc3Qgc3RydWN0IHNlcmlhbF9yczQ4NSBpbXhfbm9fcnM0ODUgPSB7fTsJLyog
Tm8gUlM0ODUgaWYgbm8gUlRTICovCi1zdGF0aWMgY29uc3Qgc3RydWN0IHNlcmlhbF9yczQ4NSBp
bXhfcnM0ODVfc3VwcG9ydGVkID0geworc3RhdGljIGNvbnN0IHN0cnVjdCBrc2VyaWFsX3JzNDg1
IGlteF9ub19yczQ4NSA9IHt9OwkvKiBObyBSUzQ4NSBpZiBubyBSVFMgKi8KK3N0YXRpYyBjb25z
dCBzdHJ1Y3Qga3NlcmlhbF9yczQ4NSBpbXhfcnM0ODVfc3VwcG9ydGVkID0gewogCS5mbGFncyA9
IFNFUl9SUzQ4NV9FTkFCTEVEIHwgU0VSX1JTNDg1X1JUU19PTl9TRU5EIHwgU0VSX1JTNDg1X1JU
U19BRlRFUl9TRU5EIHwKIAkJIFNFUl9SUzQ4NV9SWF9EVVJJTkdfVFgsCiAJLmRlbGF5X3J0c19i
ZWZvcmVfc2VuZCA9IDEsCmRpZmYgLS1naXQgYS9kcml2ZXJzL3R0eS9zZXJpYWwvbWF4MzEweC5j
IGIvZHJpdmVycy90dHkvc2VyaWFsL21heDMxMHguYwppbmRleCBhYjEwY2E0YTQ1YjUuLjZhOGFi
NjNkMTA3MiAxMDA2NDQKLS0tIGEvZHJpdmVycy90dHkvc2VyaWFsL21heDMxMHguYworKysgYi9k
cml2ZXJzL3R0eS9zZXJpYWwvbWF4MzEweC5jCkBAIC0xMDM3LDcgKzEwMzcsNyBAQCBzdGF0aWMg
dm9pZCBtYXgzMTB4X3JzX3Byb2Moc3RydWN0IHdvcmtfc3RydWN0ICp3cykKIH0KIAogc3RhdGlj
IGludCBtYXgzMTB4X3JzNDg1X2NvbmZpZyhzdHJ1Y3QgdWFydF9wb3J0ICpwb3J0LCBzdHJ1Y3Qg
a3Rlcm1pb3MgKnRlcm1pb3MsCi0JCQkJc3RydWN0IHNlcmlhbF9yczQ4NSAqcnM0ODUpCisJCQkJ
c3RydWN0IGtzZXJpYWxfcnM0ODUgKnJzNDg1KQogewogCXN0cnVjdCBtYXgzMTB4X29uZSAqb25l
ID0gdG9fbWF4MzEweF9wb3J0KHBvcnQpOwogCkBAIC0xMjU3LDcgKzEyNTcsNyBAQCBzdGF0aWMg
aW50IG1heDMxMHhfZ3Bpb19zZXRfY29uZmlnKHN0cnVjdCBncGlvX2NoaXAgKmNoaXAsIHVuc2ln
bmVkIGludCBvZmZzZXQsCiB9CiAjZW5kaWYKIAotc3RhdGljIGNvbnN0IHN0cnVjdCBzZXJpYWxf
cnM0ODUgbWF4MzEweF9yczQ4NV9zdXBwb3J0ZWQgPSB7CitzdGF0aWMgY29uc3Qgc3RydWN0IGtz
ZXJpYWxfcnM0ODUgbWF4MzEweF9yczQ4NV9zdXBwb3J0ZWQgPSB7CiAJLmZsYWdzID0gU0VSX1JT
NDg1X0VOQUJMRUQgfCBTRVJfUlM0ODVfUlRTX09OX1NFTkQgfCBTRVJfUlM0ODVfUlhfRFVSSU5H
X1RYLAogCS5kZWxheV9ydHNfYmVmb3JlX3NlbmQgPSAxLAogCS5kZWxheV9ydHNfYWZ0ZXJfc2Vu
ZCA9IDEsCmRpZmYgLS1naXQgYS9kcml2ZXJzL3R0eS9zZXJpYWwvbWNmLmMgYi9kcml2ZXJzL3R0
eS9zZXJpYWwvbWNmLmMKaW5kZXggZjRhYWFhZGQwNzQyLi45Yzg2MjE4YWUyOWQgMTAwNjQ0Ci0t
LSBhL2RyaXZlcnMvdHR5L3NlcmlhbC9tY2YuYworKysgYi9kcml2ZXJzL3R0eS9zZXJpYWwvbWNm
LmMKQEAgLTQzMiw3ICs0MzIsNyBAQCBzdGF0aWMgaW50IG1jZl92ZXJpZnlfcG9ydChzdHJ1Y3Qg
dWFydF9wb3J0ICpwb3J0LCBzdHJ1Y3Qgc2VyaWFsX3N0cnVjdCAqc2VyKQogCiAvKiBFbmFibGUg
b3IgZGlzYWJsZSB0aGUgUlM0ODUgc3VwcG9ydCAqLwogc3RhdGljIGludCBtY2ZfY29uZmlnX3Jz
NDg1KHN0cnVjdCB1YXJ0X3BvcnQgKnBvcnQsIHN0cnVjdCBrdGVybWlvcyAqdGVybWlvcywKLQkJ
CSAgICBzdHJ1Y3Qgc2VyaWFsX3JzNDg1ICpyczQ4NSkKKwkJCSAgICBzdHJ1Y3Qga3NlcmlhbF9y
czQ4NSAqcnM0ODUpCiB7CiAJdW5zaWduZWQgY2hhciBtcjEsIG1yMjsKIApAQCAtNDUzLDcgKzQ1
Myw3IEBAIHN0YXRpYyBpbnQgbWNmX2NvbmZpZ19yczQ4NShzdHJ1Y3QgdWFydF9wb3J0ICpwb3J0
LCBzdHJ1Y3Qga3Rlcm1pb3MgKnRlcm1pb3MsCiAJcmV0dXJuIDA7CiB9CiAKLXN0YXRpYyBjb25z
dCBzdHJ1Y3Qgc2VyaWFsX3JzNDg1IG1jZl9yczQ4NV9zdXBwb3J0ZWQgPSB7CitzdGF0aWMgY29u
c3Qgc3RydWN0IGtzZXJpYWxfcnM0ODUgbWNmX3JzNDg1X3N1cHBvcnRlZCA9IHsKIAkuZmxhZ3Mg
PSBTRVJfUlM0ODVfRU5BQkxFRCB8IFNFUl9SUzQ4NV9SVFNfQUZURVJfU0VORCwKIH07CiAKZGlm
ZiAtLWdpdCBhL2RyaXZlcnMvdHR5L3NlcmlhbC9vbWFwLXNlcmlhbC5jIGIvZHJpdmVycy90dHkv
c2VyaWFsL29tYXAtc2VyaWFsLmMKaW5kZXggMGFhNjY2ZTI0N2Q1Li4wMTNkODQzODMzYTkgMTAw
NjQ0Ci0tLSBhL2RyaXZlcnMvdHR5L3NlcmlhbC9vbWFwLXNlcmlhbC5jCisrKyBiL2RyaXZlcnMv
dHR5L3NlcmlhbC9vbWFwLXNlcmlhbC5jCkBAIC0xMzI1LDcgKzEzMjUsNyBAQCBzdGF0aWMgaW5s
aW5lIHZvaWQgc2VyaWFsX29tYXBfYWRkX2NvbnNvbGVfcG9ydChzdHJ1Y3QgdWFydF9vbWFwX3Bv
cnQgKnVwKQogLyogRW5hYmxlIG9yIGRpc2FibGUgdGhlIHJzNDg1IHN1cHBvcnQgKi8KIHN0YXRp
YyBpbnQKIHNlcmlhbF9vbWFwX2NvbmZpZ19yczQ4NShzdHJ1Y3QgdWFydF9wb3J0ICpwb3J0LCBz
dHJ1Y3Qga3Rlcm1pb3MgKnRlcm1pb3MsCi0JCQkgc3RydWN0IHNlcmlhbF9yczQ4NSAqcnM0ODUp
CisJCQkgc3RydWN0IGtzZXJpYWxfcnM0ODUgKnJzNDg1KQogewogCXN0cnVjdCB1YXJ0X29tYXBf
cG9ydCAqdXAgPSB0b191YXJ0X29tYXBfcG9ydChwb3J0KTsKIAl1bnNpZ25lZCBpbnQgbW9kZTsK
QEAgLTE1MTYsNyArMTUxNiw3IEBAIHN0YXRpYyBzdHJ1Y3Qgb21hcF91YXJ0X3BvcnRfaW5mbyAq
b2ZfZ2V0X3VhcnRfcG9ydF9pbmZvKHN0cnVjdCBkZXZpY2UgKmRldikKIHN0YXRpYyBpbnQgc2Vy
aWFsX29tYXBfcHJvYmVfcnM0ODUoc3RydWN0IHVhcnRfb21hcF9wb3J0ICp1cCwKIAkJCQkgICBz
dHJ1Y3QgZGV2aWNlICpkZXYpCiB7Ci0Jc3RydWN0IHNlcmlhbF9yczQ4NSAqcnM0ODVjb25mID0g
JnVwLT5wb3J0LnJzNDg1OworCXN0cnVjdCBrc2VyaWFsX3JzNDg1ICpyczQ4NWNvbmYgPSAmdXAt
PnBvcnQucnM0ODU7CiAJc3RydWN0IGRldmljZV9ub2RlICpucCA9IGRldi0+b2Zfbm9kZTsKIAll
bnVtIGdwaW9kX2ZsYWdzIGdmbGFnczsKIAlpbnQgcmV0OwpAQCAtMTU1OSw3ICsxNTU5LDcgQEAg
c3RhdGljIGludCBzZXJpYWxfb21hcF9wcm9iZV9yczQ4NShzdHJ1Y3QgdWFydF9vbWFwX3BvcnQg
KnVwLAogCXJldHVybiAwOwogfQogCi1zdGF0aWMgY29uc3Qgc3RydWN0IHNlcmlhbF9yczQ4NSBz
ZXJpYWxfb21hcF9yczQ4NV9zdXBwb3J0ZWQgPSB7CitzdGF0aWMgY29uc3Qgc3RydWN0IGtzZXJp
YWxfcnM0ODUgc2VyaWFsX29tYXBfcnM0ODVfc3VwcG9ydGVkID0gewogCS5mbGFncyA9IFNFUl9S
UzQ4NV9FTkFCTEVEIHwgU0VSX1JTNDg1X1JUU19PTl9TRU5EIHwgU0VSX1JTNDg1X1JUU19BRlRF
Ul9TRU5EIHwKIAkJIFNFUl9SUzQ4NV9SWF9EVVJJTkdfVFgsCiAJLmRlbGF5X3J0c19iZWZvcmVf
c2VuZCA9IDEsCmRpZmYgLS1naXQgYS9kcml2ZXJzL3R0eS9zZXJpYWwvc2MxNmlzN3h4LmMgYi9k
cml2ZXJzL3R0eS9zZXJpYWwvc2MxNmlzN3h4LmMKaW5kZXggMjU5ZTA4Y2MzNDdjLi5lMjFmMzBk
OWZiMmYgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvdHR5L3NlcmlhbC9zYzE2aXM3eHguYworKysgYi9k
cml2ZXJzL3R0eS9zZXJpYWwvc2MxNmlzN3h4LmMKQEAgLTgzNiw3ICs4MzYsNyBAQCBzdGF0aWMg
dm9pZCBzYzE2aXM3eHhfcmVjb25mX3JzNDg1KHN0cnVjdCB1YXJ0X3BvcnQgKnBvcnQpCiAJY29u
c3QgdTMyIG1hc2sgPSBTQzE2SVM3WFhfRUZDUl9BVVRPX1JTNDg1X0JJVCB8CiAJCQkgU0MxNklT
N1hYX0VGQ1JfUlRTX0lOVkVSVF9CSVQ7CiAJdTMyIGVmY3IgPSAwOwotCXN0cnVjdCBzZXJpYWxf
cnM0ODUgKnJzNDg1ID0gJnBvcnQtPnJzNDg1OworCXN0cnVjdCBrc2VyaWFsX3JzNDg1ICpyczQ4
NSA9ICZwb3J0LT5yczQ4NTsKIAl1bnNpZ25lZCBsb25nIGlycWZsYWdzOwogCiAJc3Bpbl9sb2Nr
X2lycXNhdmUoJnBvcnQtPmxvY2ssIGlycWZsYWdzKTsKQEAgLTExMjgsNyArMTEyOCw3IEBAIHN0
YXRpYyB2b2lkIHNjMTZpczd4eF9zZXRfdGVybWlvcyhzdHJ1Y3QgdWFydF9wb3J0ICpwb3J0LAog
fQogCiBzdGF0aWMgaW50IHNjMTZpczd4eF9jb25maWdfcnM0ODUoc3RydWN0IHVhcnRfcG9ydCAq
cG9ydCwgc3RydWN0IGt0ZXJtaW9zICp0ZXJtaW9zLAotCQkJCSAgc3RydWN0IHNlcmlhbF9yczQ4
NSAqcnM0ODUpCisJCQkJICBzdHJ1Y3Qga3NlcmlhbF9yczQ4NSAqcnM0ODUpCiB7CiAJc3RydWN0
IHNjMTZpczd4eF9wb3J0ICpzID0gZGV2X2dldF9kcnZkYXRhKHBvcnQtPmRldik7CiAJc3RydWN0
IHNjMTZpczd4eF9vbmUgKm9uZSA9IHRvX3NjMTZpczd4eF9vbmUocG9ydCwgcG9ydCk7CkBAIC0x
MzUzLDcgKzEzNTMsNyBAQCBzdGF0aWMgaW50IHNjMTZpczd4eF9ncGlvX2RpcmVjdGlvbl9vdXRw
dXQoc3RydWN0IGdwaW9fY2hpcCAqY2hpcCwKIH0KICNlbmRpZgogCi1zdGF0aWMgY29uc3Qgc3Ry
dWN0IHNlcmlhbF9yczQ4NSBzYzE2aXM3eHhfcnM0ODVfc3VwcG9ydGVkID0geworc3RhdGljIGNv
bnN0IHN0cnVjdCBrc2VyaWFsX3JzNDg1IHNjMTZpczd4eF9yczQ4NV9zdXBwb3J0ZWQgPSB7CiAJ
LmZsYWdzID0gU0VSX1JTNDg1X0VOQUJMRUQgfCBTRVJfUlM0ODVfUlRTX0FGVEVSX1NFTkQsCiAJ
LmRlbGF5X3J0c19iZWZvcmVfc2VuZCA9IDEsCiAJLmRlbGF5X3J0c19hZnRlcl9zZW5kID0gMSwJ
LyogTm90IHN1cHBvcnRlZCBidXQga2VlcCByZXR1cm5pbmcgLUVJTlZBTCAqLwpkaWZmIC0tZ2l0
IGEvZHJpdmVycy90dHkvc2VyaWFsL3NlcmlhbF9jb3JlLmMgYi9kcml2ZXJzL3R0eS9zZXJpYWwv
c2VyaWFsX2NvcmUuYwppbmRleCA0YTRlZDYxOWVlNzEuLjYyYzE4ODQ5MDk4OCAxMDA2NDQKLS0t
IGEvZHJpdmVycy90dHkvc2VyaWFsL3NlcmlhbF9jb3JlLmMKKysrIGIvZHJpdmVycy90dHkvc2Vy
aWFsL3NlcmlhbF9jb3JlLmMKQEAgLTEyOTEsNyArMTI5MSw3IEBAIHN0YXRpYyBpbnQgdWFydF9n
ZXRfaWNvdW50KHN0cnVjdCB0dHlfc3RydWN0ICp0dHksCiAJCQkJIFNFUl9SUzQ4NV9SVFNfQUZU
RVJfU0VORCB8IFNFUl9SUzQ4NV9SWF9EVVJJTkdfVFggfCBcCiAJCQkJIFNFUl9SUzQ4NV9URVJN
SU5BVEVfQlVTKQogCi1zdGF0aWMgaW50IHVhcnRfY2hlY2tfcnM0ODVfZmxhZ3Moc3RydWN0IHVh
cnRfcG9ydCAqcG9ydCwgc3RydWN0IHNlcmlhbF9yczQ4NSAqcnM0ODUpCitzdGF0aWMgaW50IHVh
cnRfY2hlY2tfcnM0ODVfZmxhZ3Moc3RydWN0IHVhcnRfcG9ydCAqcG9ydCwgc3RydWN0IGtzZXJp
YWxfcnM0ODUgKnJzNDg1KQogewogCXUzMiBmbGFncyA9IHJzNDg1LT5mbGFnczsKIApAQCAtMTMy
MCw3ICsxMzIwLDcgQEAgc3RhdGljIGludCB1YXJ0X2NoZWNrX3JzNDg1X2ZsYWdzKHN0cnVjdCB1
YXJ0X3BvcnQgKnBvcnQsIHN0cnVjdCBzZXJpYWxfcnM0ODUgKnIKIH0KIAogc3RhdGljIHZvaWQg
dWFydF9zYW5pdGl6ZV9zZXJpYWxfcnM0ODVfZGVsYXlzKHN0cnVjdCB1YXJ0X3BvcnQgKnBvcnQs
Ci0JCQkJCSAgICAgIHN0cnVjdCBzZXJpYWxfcnM0ODUgKnJzNDg1KQorCQkJCQkgICAgICBzdHJ1
Y3Qga3NlcmlhbF9yczQ4NSAqcnM0ODUpCiB7CiAJaWYgKCFwb3J0LT5yczQ4NV9zdXBwb3J0ZWQu
ZGVsYXlfcnRzX2JlZm9yZV9zZW5kKSB7CiAJCWlmIChyczQ4NS0+ZGVsYXlfcnRzX2JlZm9yZV9z
ZW5kKSB7CkBAIC0xMzUxLDcgKzEzNTEsNyBAQCBzdGF0aWMgdm9pZCB1YXJ0X3Nhbml0aXplX3Nl
cmlhbF9yczQ4NV9kZWxheXMoc3RydWN0IHVhcnRfcG9ydCAqcG9ydCwKIAl9CiB9CiAKLXN0YXRp
YyB2b2lkIHVhcnRfc2FuaXRpemVfc2VyaWFsX3JzNDg1KHN0cnVjdCB1YXJ0X3BvcnQgKnBvcnQs
IHN0cnVjdCBzZXJpYWxfcnM0ODUgKnJzNDg1KQorc3RhdGljIHZvaWQgdWFydF9zYW5pdGl6ZV9z
ZXJpYWxfcnM0ODUoc3RydWN0IHVhcnRfcG9ydCAqcG9ydCwgc3RydWN0IGtzZXJpYWxfcnM0ODUg
KnJzNDg1KQogewogCXUzMiBzdXBwb3J0ZWRfZmxhZ3MgPSBwb3J0LT5yczQ4NV9zdXBwb3J0ZWQu
ZmxhZ3M7CiAKQEAgLTEzNzgsNyArMTM3OCw3IEBAIHN0YXRpYyB2b2lkIHVhcnRfc2FuaXRpemVf
c2VyaWFsX3JzNDg1KHN0cnVjdCB1YXJ0X3BvcnQgKnBvcnQsIHN0cnVjdCBzZXJpYWxfcnM0CiB9
CiAKIHN0YXRpYyB2b2lkIHVhcnRfc2V0X3JzNDg1X3Rlcm1pbmF0aW9uKHN0cnVjdCB1YXJ0X3Bv
cnQgKnBvcnQsCi0JCQkJICAgICAgIGNvbnN0IHN0cnVjdCBzZXJpYWxfcnM0ODUgKnJzNDg1KQor
CQkJCSAgICAgICBjb25zdCBzdHJ1Y3Qga3NlcmlhbF9yczQ4NSAqcnM0ODUpCiB7CiAJaWYgKCEo
cnM0ODUtPmZsYWdzICYgU0VSX1JTNDg1X0VOQUJMRUQpKQogCQlyZXR1cm47CkBAIC0xMzg5LDcg
KzEzODksNyBAQCBzdGF0aWMgdm9pZCB1YXJ0X3NldF9yczQ4NV90ZXJtaW5hdGlvbihzdHJ1Y3Qg
dWFydF9wb3J0ICpwb3J0LAogCiBpbnQgdWFydF9yczQ4NV9jb25maWcoc3RydWN0IHVhcnRfcG9y
dCAqcG9ydCkKIHsKLQlzdHJ1Y3Qgc2VyaWFsX3JzNDg1ICpyczQ4NSA9ICZwb3J0LT5yczQ4NTsK
KwlzdHJ1Y3Qga3NlcmlhbF9yczQ4NSAqcnM0ODUgPSAmcG9ydC0+cnM0ODU7CiAJaW50IHJldDsK
IAogCXVhcnRfc2FuaXRpemVfc2VyaWFsX3JzNDg1KHBvcnQsIHJzNDg1KTsKQEAgLTE0MDMsMjMg
KzE0MDMsMzEgQEAgaW50IHVhcnRfcnM0ODVfY29uZmlnKHN0cnVjdCB1YXJ0X3BvcnQgKnBvcnQp
CiB9CiBFWFBPUlRfU1lNQk9MX0dQTCh1YXJ0X3JzNDg1X2NvbmZpZyk7CiAKLXN0YXRpYyBpbnQg
c2VyaWFsX3JzNDg1X2Zyb21fdXNlcihzdHJ1Y3Qgc2VyaWFsX3JzNDg1ICpyczQ4NSwKK3N0YXRp
YyBpbnQgc2VyaWFsX3JzNDg1X2Zyb21fdXNlcihzdHJ1Y3Qga3NlcmlhbF9yczQ4NSAqcnM0ODUs
CiAJCQkJICBjb25zdCBzdHJ1Y3Qgc2VyaWFsX3JzNDg1IF9fdXNlciAqcnM0ODVfdXNlcikKIHsK
LQlpZiAoY29weV9mcm9tX3VzZXIocnM0ODUsIHJzNDg1X3VzZXIsIHNpemVvZigqcnM0ODUpKSkK
KwlzdHJ1Y3Qgc2VyaWFsX3JzNDg1IHJzNDg1X3VhcGk7CisKKwlpZiAoY29weV9mcm9tX3VzZXIo
JnJzNDg1X3VhcGksIHJzNDg1X3VzZXIsIHNpemVvZigqcnM0ODUpKSkKIAkJcmV0dXJuIC1FRkFV
TFQ7CiAKKwkqcnM0ODUgPSAqKChzdHJ1Y3Qga3NlcmlhbF9yczQ4NSAqKSZyczQ4NV91YXBpKTsK
KwogCXJldHVybiAwOwogfQogCiBzdGF0aWMgaW50IHNlcmlhbF9yczQ4NV90b191c2VyKHN0cnVj
dCBzZXJpYWxfcnM0ODUgX191c2VyICpyczQ4NV91c2VyLAotCQkJCXN0cnVjdCBzZXJpYWxfcnM0
ODUgKnJzNDg1KQorCQkJCWNvbnN0IHN0cnVjdCBrc2VyaWFsX3JzNDg1ICpyczQ4NSkKIHsKKwlz
dHJ1Y3Qgc2VyaWFsX3JzNDg1IHJzNDg1X3VhcGk7CisKKwkqKChzdHJ1Y3Qga3NlcmlhbF9yczQ4
NSAqKSZyczQ4NV91YXBpKSA9ICpyczQ4NTsKKwogCS8qIFJldHVybiBjbGVhbiBwYWRkaW5nIGFy
ZWEgdG8gdXNlcnNwYWNlICovCi0JbWVtc2V0KHJzNDg1LT5wYWRkaW5nMCwgMCwgc2l6ZW9mKHJz
NDg1LT5wYWRkaW5nMCkpOwotCW1lbXNldChyczQ4NS0+cGFkZGluZzEsIDAsIHNpemVvZihyczQ4
NS0+cGFkZGluZzEpKTsKKwltZW1zZXQocnM0ODVfdWFwaS5wYWRkaW5nMCwgMCwgc2l6ZW9mKHJz
NDg1X3VhcGkucGFkZGluZzApKTsKKwltZW1zZXQocnM0ODVfdWFwaS5wYWRkaW5nMSwgMCwgc2l6
ZW9mKHJzNDg1X3VhcGkucGFkZGluZzEpKTsKIAotCWlmIChjb3B5X3RvX3VzZXIocnM0ODVfdXNl
ciwgcnM0ODUsIHNpemVvZigqcnM0ODUpKSkKKwlpZiAoY29weV90b191c2VyKHJzNDg1X3VzZXIs
ICZyczQ4NV91YXBpLCBzaXplb2YocnM0ODVfdWFwaSkpKQogCQlyZXR1cm4gLUVGQVVMVDsKIAog
CXJldHVybiAwOwpAQCAtMTQyOCw3ICsxNDM2LDcgQEAgc3RhdGljIGludCBzZXJpYWxfcnM0ODVf
dG9fdXNlcihzdHJ1Y3Qgc2VyaWFsX3JzNDg1IF9fdXNlciAqcnM0ODVfdXNlciwKIHN0YXRpYyBp
bnQgdWFydF9nZXRfcnM0ODVfY29uZmlnKHN0cnVjdCB1YXJ0X3BvcnQgKnBvcnQsCiAJCQkgc3Ry
dWN0IHNlcmlhbF9yczQ4NSBfX3VzZXIgKnJzNDg1X3VzZXIpCiB7Ci0Jc3RydWN0IHNlcmlhbF9y
czQ4NSByczQ4NTsKKwlzdHJ1Y3Qga3NlcmlhbF9yczQ4NSByczQ4NTsKIAl1bnNpZ25lZCBsb25n
IGZsYWdzOwogCiAJc3Bpbl9sb2NrX2lycXNhdmUoJnBvcnQtPmxvY2ssIGZsYWdzKTsKQEAgLTE0
NDEsNyArMTQ0OSw3IEBAIHN0YXRpYyBpbnQgdWFydF9nZXRfcnM0ODVfY29uZmlnKHN0cnVjdCB1
YXJ0X3BvcnQgKnBvcnQsCiBzdGF0aWMgaW50IHVhcnRfc2V0X3JzNDg1X2NvbmZpZyhzdHJ1Y3Qg
dHR5X3N0cnVjdCAqdHR5LCBzdHJ1Y3QgdWFydF9wb3J0ICpwb3J0LAogCQkJIHN0cnVjdCBzZXJp
YWxfcnM0ODUgX191c2VyICpyczQ4NV91c2VyKQogewotCXN0cnVjdCBzZXJpYWxfcnM0ODUgcnM0
ODU7CisJc3RydWN0IGtzZXJpYWxfcnM0ODUgcnM0ODU7CiAJaW50IHJldDsKIAl1bnNpZ25lZCBs
b25nIGZsYWdzOwogCkBAIC0zNDE1LDcgKzM0MjMsNyBAQCBFWFBPUlRfU1lNQk9MX0dQTCh1YXJ0
X3RyeV90b2dnbGVfc3lzcnEpOwogICovCiBpbnQgdWFydF9nZXRfcnM0ODVfbW9kZShzdHJ1Y3Qg
dWFydF9wb3J0ICpwb3J0KQogewotCXN0cnVjdCBzZXJpYWxfcnM0ODUgKnJzNDg1Y29uZiA9ICZw
b3J0LT5yczQ4NTsKKwlzdHJ1Y3Qga3NlcmlhbF9yczQ4NSAqcnM0ODVjb25mID0gJnBvcnQtPnJz
NDg1OwogCXN0cnVjdCBkZXZpY2UgKmRldiA9IHBvcnQtPmRldjsKIAl1MzIgcnM0ODVfZGVsYXlb
Ml07CiAJaW50IHJldDsKQEAgLTM0NzEsNyArMzQ3OSwyMyBAQCBpbnQgdWFydF9nZXRfcnM0ODVf
bW9kZShzdHJ1Y3QgdWFydF9wb3J0ICpwb3J0KQogfQogRVhQT1JUX1NZTUJPTF9HUEwodWFydF9n
ZXRfcnM0ODVfbW9kZSk7CiAKLS8qIENvbXBpbGUtdGltZSBhc3NlcnRpb25zIGZvciBzZXJpYWxf
cnM0ODUgbGF5b3V0ICovCisvKgorICogQ29tcGlsZS10aW1lIGFzc2VydHMgZm9yIHN0cnVjdCBr
c2VyaWFsX3JzNDg1IGFuZCBzdHJ1Y3Qgc2VyaWFsX3JzNDg1IGVxdWFsaXR5CisgKiAoZXhjZXB0
IHBhZGRpbmcpLgorICovCitzdGF0aWNfYXNzZXJ0KG9mZnNldG9mKHN0cnVjdCBrc2VyaWFsX3Jz
NDg1LCBmbGFncykgPT0KKwkgICAgICBvZmZzZXRvZihzdHJ1Y3Qgc2VyaWFsX3JzNDg1LCBmbGFn
cykpOworc3RhdGljX2Fzc2VydChvZmZzZXRvZihzdHJ1Y3Qga3NlcmlhbF9yczQ4NSwgZGVsYXlf
cnRzX2JlZm9yZV9zZW5kKSA9PQorCSAgICAgIG9mZnNldG9mKHN0cnVjdCBzZXJpYWxfcnM0ODUs
IGRlbGF5X3J0c19iZWZvcmVfc2VuZCkpOworc3RhdGljX2Fzc2VydChvZmZzZXRvZihzdHJ1Y3Qg
a3NlcmlhbF9yczQ4NSwgZGVsYXlfcnRzX2FmdGVyX3NlbmQpID09CisJICAgICAgb2Zmc2V0b2Yo
c3RydWN0IHNlcmlhbF9yczQ4NSwgZGVsYXlfcnRzX2FmdGVyX3NlbmQpKTsKK3N0YXRpY19hc3Nl
cnQob2Zmc2V0b2Yoc3RydWN0IGtzZXJpYWxfcnM0ODUsIGFkZHJfcmVjdikgPT0KKwkgICAgICBv
ZmZzZXRvZihzdHJ1Y3Qgc2VyaWFsX3JzNDg1LCBhZGRyX3JlY3YpKTsKK3N0YXRpY19hc3NlcnQo
b2Zmc2V0b2Yoc3RydWN0IGtzZXJpYWxfcnM0ODUsIGFkZHJfZGVzdCkgPT0KKwkgICAgICBvZmZz
ZXRvZihzdHJ1Y3Qgc2VyaWFsX3JzNDg1LCBhZGRyX2Rlc3QpKTsKK3N0YXRpY19hc3NlcnQoc2l6
ZW9mKHN0cnVjdCBrc2VyaWFsX3JzNDg1KSA8PSBzaXplb2Yoc3RydWN0IHNlcmlhbF9yczQ4NSkp
OworCisvKiBDb21waWxlLXRpbWUgYXNzZXJ0aW9ucyBmb3Igc3RydWN0IHNlcmlhbF9yczQ4NSBs
YXlvdXQgKi8KIHN0YXRpY19hc3NlcnQob2Zmc2V0b2Yoc3RydWN0IHNlcmlhbF9yczQ4NSwgcGFk
ZGluZykgPT0KICAgICAgICAgICAgICAgKG9mZnNldG9mKHN0cnVjdCBzZXJpYWxfcnM0ODUsIGRl
bGF5X3J0c19hZnRlcl9zZW5kKSArIHNpemVvZihfX3UzMikpKTsKIHN0YXRpY19hc3NlcnQob2Zm
c2V0b2Yoc3RydWN0IHNlcmlhbF9yczQ4NSwgcGFkZGluZzEpID09CmRpZmYgLS1naXQgYS9kcml2
ZXJzL3R0eS9zZXJpYWwvc3RtMzItdXNhcnQuYyBiL2RyaXZlcnMvdHR5L3NlcmlhbC9zdG0zMi11
c2FydC5jCmluZGV4IDJjODVkYmYxNjVjNC4uODYwNmJkYTlmN2ZhIDEwMDY0NAotLS0gYS9kcml2
ZXJzL3R0eS9zZXJpYWwvc3RtMzItdXNhcnQuYworKysgYi9kcml2ZXJzL3R0eS9zZXJpYWwvc3Rt
MzItdXNhcnQuYwpAQCAtMTY5LDcgKzE2OSw3IEBAIHN0YXRpYyB2b2lkIHN0bTMyX3VzYXJ0X2Nv
bmZpZ19yZWdfcnM0ODUodTMyICpjcjEsIHUzMiAqY3IzLCB1MzIgZGVsYXlfQURFLAogfQogCiBz
dGF0aWMgaW50IHN0bTMyX3VzYXJ0X2NvbmZpZ19yczQ4NShzdHJ1Y3QgdWFydF9wb3J0ICpwb3J0
LCBzdHJ1Y3Qga3Rlcm1pb3MgKnRlcm1pb3MsCi0JCQkJICAgIHN0cnVjdCBzZXJpYWxfcnM0ODUg
KnJzNDg1Y29uZikKKwkJCQkgICAgc3RydWN0IGtzZXJpYWxfcnM0ODUgKnJzNDg1Y29uZikKIHsK
IAlzdHJ1Y3Qgc3RtMzJfcG9ydCAqc3RtMzJfcG9ydCA9IHRvX3N0bTMyX3BvcnQocG9ydCk7CiAJ
Y29uc3Qgc3RydWN0IHN0bTMyX3VzYXJ0X29mZnNldHMgKm9mcyA9ICZzdG0zMl9wb3J0LT5pbmZv
LT5vZnM7CkBAIC0yMjAsNyArMjIwLDcgQEAgc3RhdGljIGludCBzdG0zMl91c2FydF9jb25maWdf
cnM0ODUoc3RydWN0IHVhcnRfcG9ydCAqcG9ydCwgc3RydWN0IGt0ZXJtaW9zICp0ZXIKIHN0YXRp
YyBpbnQgc3RtMzJfdXNhcnRfaW5pdF9yczQ4NShzdHJ1Y3QgdWFydF9wb3J0ICpwb3J0LAogCQkJ
CSAgc3RydWN0IHBsYXRmb3JtX2RldmljZSAqcGRldikKIHsKLQlzdHJ1Y3Qgc2VyaWFsX3JzNDg1
ICpyczQ4NWNvbmYgPSAmcG9ydC0+cnM0ODU7CisJc3RydWN0IGtzZXJpYWxfcnM0ODUgKnJzNDg1
Y29uZiA9ICZwb3J0LT5yczQ4NTsKIAogCXJzNDg1Y29uZi0+ZmxhZ3MgPSAwOwogCXJzNDg1Y29u
Zi0+ZGVsYXlfcnRzX2JlZm9yZV9zZW5kID0gMDsKQEAgLTUzMiw3ICs1MzIsNyBAQCBzdGF0aWMg
dm9pZCBzdG0zMl91c2FydF90Y19pbnRlcnJ1cHRfZGlzYWJsZShzdHJ1Y3QgdWFydF9wb3J0ICpw
b3J0KQogc3RhdGljIHZvaWQgc3RtMzJfdXNhcnRfcnM0ODVfcnRzX2VuYWJsZShzdHJ1Y3QgdWFy
dF9wb3J0ICpwb3J0KQogewogCXN0cnVjdCBzdG0zMl9wb3J0ICpzdG0zMl9wb3J0ID0gdG9fc3Rt
MzJfcG9ydChwb3J0KTsKLQlzdHJ1Y3Qgc2VyaWFsX3JzNDg1ICpyczQ4NWNvbmYgPSAmcG9ydC0+
cnM0ODU7CisJc3RydWN0IGtzZXJpYWxfcnM0ODUgKnJzNDg1Y29uZiA9ICZwb3J0LT5yczQ4NTsK
IAogCWlmIChzdG0zMl9wb3J0LT5od19mbG93X2NvbnRyb2wgfHwKIAkgICAgIShyczQ4NWNvbmYt
PmZsYWdzICYgU0VSX1JTNDg1X0VOQUJMRUQpKQpAQCAtNTUwLDcgKzU1MCw3IEBAIHN0YXRpYyB2
b2lkIHN0bTMyX3VzYXJ0X3JzNDg1X3J0c19lbmFibGUoc3RydWN0IHVhcnRfcG9ydCAqcG9ydCkK
IHN0YXRpYyB2b2lkIHN0bTMyX3VzYXJ0X3JzNDg1X3J0c19kaXNhYmxlKHN0cnVjdCB1YXJ0X3Bv
cnQgKnBvcnQpCiB7CiAJc3RydWN0IHN0bTMyX3BvcnQgKnN0bTMyX3BvcnQgPSB0b19zdG0zMl9w
b3J0KHBvcnQpOwotCXN0cnVjdCBzZXJpYWxfcnM0ODUgKnJzNDg1Y29uZiA9ICZwb3J0LT5yczQ4
NTsKKwlzdHJ1Y3Qga3NlcmlhbF9yczQ4NSAqcnM0ODVjb25mID0gJnBvcnQtPnJzNDg1OwogCiAJ
aWYgKHN0bTMyX3BvcnQtPmh3X2Zsb3dfY29udHJvbCB8fAogCSAgICAhKHJzNDg1Y29uZi0+Zmxh
Z3MgJiBTRVJfUlM0ODVfRU5BQkxFRCkpCkBAIC0xMDk0LDcgKzEwOTQsNyBAQCBzdGF0aWMgdm9p
ZCBzdG0zMl91c2FydF9zZXRfdGVybWlvcyhzdHJ1Y3QgdWFydF9wb3J0ICpwb3J0LAogCXN0cnVj
dCBzdG0zMl9wb3J0ICpzdG0zMl9wb3J0ID0gdG9fc3RtMzJfcG9ydChwb3J0KTsKIAljb25zdCBz
dHJ1Y3Qgc3RtMzJfdXNhcnRfb2Zmc2V0cyAqb2ZzID0gJnN0bTMyX3BvcnQtPmluZm8tPm9mczsK
IAljb25zdCBzdHJ1Y3Qgc3RtMzJfdXNhcnRfY29uZmlnICpjZmcgPSAmc3RtMzJfcG9ydC0+aW5m
by0+Y2ZnOwotCXN0cnVjdCBzZXJpYWxfcnM0ODUgKnJzNDg1Y29uZiA9ICZwb3J0LT5yczQ4NTsK
KwlzdHJ1Y3Qga3NlcmlhbF9yczQ4NSAqcnM0ODVjb25mID0gJnBvcnQtPnJzNDg1OwogCXVuc2ln
bmVkIGludCBiYXVkLCBiaXRzOwogCXUzMiB1c2FydGRpdiwgbWFudGlzc2EsIGZyYWN0aW9uLCBv
dmVyc2FtcGxpbmc7CiAJdGNmbGFnX3QgY2ZsYWcgPSB0ZXJtaW9zLT5jX2NmbGFnOwpAQCAtMTQ0
Niw3ICsxNDQ2LDcgQEAgc3RhdGljIHZvaWQgc3RtMzJfdXNhcnRfZGVpbml0X3BvcnQoc3RydWN0
IHN0bTMyX3BvcnQgKnN0bTMycG9ydCkKIAljbGtfZGlzYWJsZV91bnByZXBhcmUoc3RtMzJwb3J0
LT5jbGspOwogfQogCi1zdGF0aWMgY29uc3Qgc3RydWN0IHNlcmlhbF9yczQ4NSBzdG0zMl9yczQ4
NV9zdXBwb3J0ZWQgPSB7CitzdGF0aWMgY29uc3Qgc3RydWN0IGtzZXJpYWxfcnM0ODUgc3RtMzJf
cnM0ODVfc3VwcG9ydGVkID0gewogCS5mbGFncyA9IFNFUl9SUzQ4NV9FTkFCTEVEIHwgU0VSX1JT
NDg1X1JUU19PTl9TRU5EIHwgU0VSX1JTNDg1X1JUU19BRlRFUl9TRU5EIHwKIAkJIFNFUl9SUzQ4
NV9SWF9EVVJJTkdfVFgsCiAJLmRlbGF5X3J0c19iZWZvcmVfc2VuZCA9IDEsCmRpZmYgLS1naXQg
YS9pbmNsdWRlL2xpbnV4L3NlcmlhbF9jb3JlLmggYi9pbmNsdWRlL2xpbnV4L3NlcmlhbF9jb3Jl
LmgKaW5kZXggYWVmMzE0NWYyMDMyLi4zYTk4N2FmODhmZmUgMTAwNjQ0Ci0tLSBhL2luY2x1ZGUv
bGludXgvc2VyaWFsX2NvcmUuaAorKysgYi9pbmNsdWRlL2xpbnV4L3NlcmlhbF9jb3JlLmgKQEAg
LTMxLDYgKzMxLDI5IEBAIHN0cnVjdCBzZXJpYWxfc3RydWN0Owogc3RydWN0IGRldmljZTsKIHN0
cnVjdCBncGlvX2Rlc2M7CiAKKy8qKgorICogc3RydWN0IGtzZXJpYWxfcnM0ODUgLSBrZXJuZWwt
c2lkZSBzdHJ1Y3QgZm9yIGNvbnRyb2xsaW5nIFJTNDg1IHNldHRpbmdzLgorICogQGZsYWdzOgkJ
CVJTNDg1IGZlYXR1cmUgZmxhZ3MKKyAqIEBkZWxheV9ydHNfYmVmb3JlX3NlbmQ6CURlbGF5IGJl
Zm9yZSBzZW5kIChtaWxsaXNlY29uZHMpCisgKiBAZGVsYXlfcnRzX2FmdGVyX3NlbmQ6CURlbGF5
IGFmdGVyIHNlbmQgKG1pbGxpc2Vjb25kcykKKyAqIEBhZGRyX3JlY3Y6CQkJUmVjZWl2ZSBmaWx0
ZXIgZm9yIFJTNDg1IGFkZHJlc3NpbmcgbW9kZQorICoJCQkJKHVzZWQgb25seSB3aGVuICVTRVJf
UlM0ODVfQUREUl9SRUNWIGlzIHNldCkuCisgKiBAYWRkcl9kZXN0OgkJCURlc3RpbmF0aW9uIGFk
ZHJlc3MgZm9yIFJTNDg1IGFkZHJlc3NpbmcgbW9kZQorICoJCQkJKHVzZWQgb25seSB3aGVuICVT
RVJfUlM0ODVfQUREUl9ERVNUIGlzIHNldCkuCisgKgorICogTXVzdCBtYXRjaCB3aXRoIHN0cnVj
dCBzZXJpYWxfcnM0ODUgaW4gaW5jbHVkZS91YXBpL2xpbnV4L3NlcmlhbC5oIGV4Y2x1ZGluZwor
ICogdGhlIHBhZGRpbmcuCisgKi8KK3N0cnVjdCBrc2VyaWFsX3JzNDg1IHsKKwlfX3UzMglmbGFn
czsKKwlfX3UzMglkZWxheV9ydHNfYmVmb3JlX3NlbmQ7CisJX191MzIJZGVsYXlfcnRzX2FmdGVy
X3NlbmQ7CisJc3RydWN0IHsKKwkJX191OCAgICBhZGRyX3JlY3Y7CisJCV9fdTggICAgYWRkcl9k
ZXN0OworCX07Cit9OworCiAvKioKICAqIHN0cnVjdCB1YXJ0X29wcyAtLSBpbnRlcmZhY2UgYmV0
d2VlbiBzZXJpYWxfY29yZSBhbmQgdGhlIGRyaXZlcgogICoKQEAgLTQ0Nyw3ICs0NzAsNyBAQCBz
dHJ1Y3QgdWFydF9wb3J0IHsKIAl2b2lkCQkJKCpoYW5kbGVfYnJlYWspKHN0cnVjdCB1YXJ0X3Bv
cnQgKik7CiAJaW50CQkJKCpyczQ4NV9jb25maWcpKHN0cnVjdCB1YXJ0X3BvcnQgKiwKIAkJCQkJ
CXN0cnVjdCBrdGVybWlvcyAqdGVybWlvcywKLQkJCQkJCXN0cnVjdCBzZXJpYWxfcnM0ODUgKnJz
NDg1KTsKKwkJCQkJCXN0cnVjdCBrc2VyaWFsX3JzNDg1ICpyczQ4NSk7CiAJaW50CQkJKCppc283
ODE2X2NvbmZpZykoc3RydWN0IHVhcnRfcG9ydCAqLAogCQkJCQkJICBzdHJ1Y3Qgc2VyaWFsX2lz
bzc4MTYgKmlzbzc4MTYpOwogCXVuc2lnbmVkIGludAkJaXJxOwkJCS8qIGlycSBudW1iZXIgKi8K
QEAgLTU2Nyw4ICs1OTAsOCBAQCBzdHJ1Y3QgdWFydF9wb3J0IHsKIAljb25zdCBjaGFyCQkqbmFt
ZTsJCQkvKiBwb3J0IG5hbWUgKi8KIAlzdHJ1Y3QgYXR0cmlidXRlX2dyb3VwCSphdHRyX2dyb3Vw
OwkJLyogcG9ydCBzcGVjaWZpYyBhdHRyaWJ1dGVzICovCiAJY29uc3Qgc3RydWN0IGF0dHJpYnV0
ZV9ncm91cCAqKnR0eV9ncm91cHM7CS8qIGFsbCBhdHRyaWJ1dGVzIChzZXJpYWwgY29yZSB1c2Ug
b25seSkgKi8KLQlzdHJ1Y3Qgc2VyaWFsX3JzNDg1ICAgICByczQ4NTsKLQlzdHJ1Y3Qgc2VyaWFs
X3JzNDg1CXJzNDg1X3N1cHBvcnRlZDsJLyogU3VwcG9ydGVkIG1hc2sgZm9yIHNlcmlhbF9yczQ4
NSAqLworCXN0cnVjdCBrc2VyaWFsX3JzNDg1CXJzNDg1OworCXN0cnVjdCBrc2VyaWFsX3JzNDg1
CXJzNDg1X3N1cHBvcnRlZDsJLyogU3VwcG9ydGVkIG1hc2sgZm9yIHNlcmlhbF9yczQ4NSAqLwog
CXN0cnVjdCBncGlvX2Rlc2MJKnJzNDg1X3Rlcm1fZ3BpbzsJLyogZW5hYmxlIFJTNDg1IGJ1cyB0
ZXJtaW5hdGlvbiAqLwogCXN0cnVjdCBzZXJpYWxfaXNvNzgxNiAgIGlzbzc4MTY7CiAJdm9pZAkJ
CSpwcml2YXRlX2RhdGE7CQkvKiBnZW5lcmljIHBsYXRmb3JtIGRhdGEgcG9pbnRlciAqLwpkaWZm
IC0tZ2l0IGEvaW5jbHVkZS91YXBpL2xpbnV4L3NlcmlhbC5oIGIvaW5jbHVkZS91YXBpL2xpbnV4
L3NlcmlhbC5oCmluZGV4IGRiZGM3ODY1YWJkYy4uNzA2M2ViNmIxNjE3IDEwMDY0NAotLS0gYS9p
bmNsdWRlL3VhcGkvbGludXgvc2VyaWFsLmgKKysrIGIvaW5jbHVkZS91YXBpL2xpbnV4L3Nlcmlh
bC5oCkBAIC0xMzgsNiArMTM4LDggQEAgc3RydWN0IHNlcmlhbF9pY291bnRlcl9zdHJ1Y3Qgewog
ICoJCQkJICBSZXF1aXJlcyAlU0VSX1JTNDg1X0FERFJCLgogICogKiAlU0VSX1JTNDg1X0FERFJf
REVTVAktIERlc3RpbmF0aW9uIGFkZHJlc3MgKGVuYWJsZXMgQGFkZHJfZGVzdCkuCiAgKgkJCQkg
IFJlcXVpcmVzICVTRVJfUlM0ODVfQUREUkIuCisgKgorICogVGhlcmUncyBrZXJuZWwgY291bnRl
cnBhcnQgc3RydWN0IGtzZXJpYWxfcnM0ODUgb2YgdGhpcyBzdHJ1Y3Qgd2l0aG91dCBwYWRkaW5n
LgogICovCiBzdHJ1Y3Qgc2VyaWFsX3JzNDg1IHsKIAlfX3UzMglmbGFnczsKLS0gCjIuMzAuMgoK
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KTGludXgtc3Rt
MzIgbWFpbGluZyBsaXN0CkxpbnV4LXN0bTMyQHN0LW1kLW1haWxtYW4uc3Rvcm1yZXBseS5jb20K
aHR0cHM6Ly9zdC1tZC1tYWlsbWFuLnN0b3JtcmVwbHkuY29tL21haWxtYW4vbGlzdGluZm8vbGlu
dXgtc3RtMzIK
